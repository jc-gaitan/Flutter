define(['dart_sdk'], (function load__packages__syncfusion_flutter_core__src__utils__shape_helper_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var shape_helper = Object.create(dart.library);
  var $toDouble = dartx.toDouble;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ShapeMarkerTypeL: () => (T.ShapeMarkerTypeL = dart.constFn(dart.legacy(shape_helper.ShapeMarkerType)))(),
    VoidToPath: () => (T.VoidToPath = dart.constFn(dart.fnType(ui.Path, [])))(),
    PathTodynamic: () => (T.PathTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ui.Path])))(),
    PointOfdouble: () => (T.PointOfdouble = dart.constFn(math.Point$(core.double)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.image",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.circle",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.rectangle",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.diamond",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.triangle",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.invertedTriangle",
        index: 5
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.verticalTriangle",
        index: 6
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.verticalInvertedTriangle",
        index: 7
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.pentagon",
        index: 8
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.verticalLine",
        index: 9
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.horizontalLine",
        index: 10
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.lineSeries",
        index: 11
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.lineSeriesWithMarker",
        index: 12
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.fastLineSeries",
        index: 13
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.fastLineSeriesWithMarker",
        index: 14
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedLineSeries",
        index: 15
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedLineSeriesWithMarker",
        index: 16
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedLine100Series",
        index: 17
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedLine100SeriesWithMarker",
        index: 18
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.splineSeries",
        index: 19
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.splineAreaSeries",
        index: 20
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.splineRangeAreaSeries",
        index: 21
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.areaSeries",
        index: 22
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedAreaSeries",
        index: 23
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.rangeAreaSeries",
        index: 24
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedArea100Series",
        index: 25
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stepAreaSeries",
        index: 26
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stepLineSeries",
        index: 27
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.bubbleSeries",
        index: 28
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.columnSeries",
        index: 29
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedColumnSeries",
        index: 30
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedColumn100Series",
        index: 31
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.rangeColumnSeries",
        index: 32
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.histogramSeries",
        index: 33
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.barSeries",
        index: 34
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedBarSeries",
        index: 35
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.stackedBar100Series",
        index: 36
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.hiloSeries",
        index: 37
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.hiloOpenCloseSeries",
        index: 38
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.candleSeries",
        index: 39
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.waterfallSeries",
        index: 40
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.boxAndWhiskerSeries",
        index: 41
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.pieSeries",
        index: 42
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.doughnutSeries",
        index: 43
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.radialBarSeries",
        index: 44
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.pyramidSeries",
        index: 45
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: shape_helper.ShapeMarkerType.prototype,
        [_name$]: "ShapeMarkerType.funnelSeries",
        index: 46
      });
    },
    get C47() {
      return C[47] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46], T.ShapeMarkerTypeL());
    }
  }, false);
  var C = Array(48).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.2.48/lib/src/utils/shape_helper.dart",
    "package:syncfusion_flutter_core/src/utils/shape_helper.dart"
  ];
  var _name$ = dart.privateName(shape_helper, "_name");
  shape_helper.ShapeMarkerType = class ShapeMarkerType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (shape_helper.ShapeMarkerType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 8, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 8, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = shape_helper.ShapeMarkerType.prototype;
  dart.addTypeTests(shape_helper.ShapeMarkerType);
  dart.addTypeCaches(shape_helper.ShapeMarkerType);
  dart.setLibraryUri(shape_helper.ShapeMarkerType, I[1]);
  dart.setFieldSignature(shape_helper.ShapeMarkerType, () => ({
    __proto__: dart.getFields(shape_helper.ShapeMarkerType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(shape_helper.ShapeMarkerType, ['toString']);
  shape_helper.ShapeMarkerType.image = C[0] || CT.C0;
  shape_helper.ShapeMarkerType.circle = C[1] || CT.C1;
  shape_helper.ShapeMarkerType.rectangle = C[2] || CT.C2;
  shape_helper.ShapeMarkerType.diamond = C[3] || CT.C3;
  shape_helper.ShapeMarkerType.triangle = C[4] || CT.C4;
  shape_helper.ShapeMarkerType.invertedTriangle = C[5] || CT.C5;
  shape_helper.ShapeMarkerType.verticalTriangle = C[6] || CT.C6;
  shape_helper.ShapeMarkerType.verticalInvertedTriangle = C[7] || CT.C7;
  shape_helper.ShapeMarkerType.pentagon = C[8] || CT.C8;
  shape_helper.ShapeMarkerType.verticalLine = C[9] || CT.C9;
  shape_helper.ShapeMarkerType.horizontalLine = C[10] || CT.C10;
  shape_helper.ShapeMarkerType.lineSeries = C[11] || CT.C11;
  shape_helper.ShapeMarkerType.lineSeriesWithMarker = C[12] || CT.C12;
  shape_helper.ShapeMarkerType.fastLineSeries = C[13] || CT.C13;
  shape_helper.ShapeMarkerType.fastLineSeriesWithMarker = C[14] || CT.C14;
  shape_helper.ShapeMarkerType.stackedLineSeries = C[15] || CT.C15;
  shape_helper.ShapeMarkerType.stackedLineSeriesWithMarker = C[16] || CT.C16;
  shape_helper.ShapeMarkerType.stackedLine100Series = C[17] || CT.C17;
  shape_helper.ShapeMarkerType.stackedLine100SeriesWithMarker = C[18] || CT.C18;
  shape_helper.ShapeMarkerType.splineSeries = C[19] || CT.C19;
  shape_helper.ShapeMarkerType.splineAreaSeries = C[20] || CT.C20;
  shape_helper.ShapeMarkerType.splineRangeAreaSeries = C[21] || CT.C21;
  shape_helper.ShapeMarkerType.areaSeries = C[22] || CT.C22;
  shape_helper.ShapeMarkerType.stackedAreaSeries = C[23] || CT.C23;
  shape_helper.ShapeMarkerType.rangeAreaSeries = C[24] || CT.C24;
  shape_helper.ShapeMarkerType.stackedArea100Series = C[25] || CT.C25;
  shape_helper.ShapeMarkerType.stepAreaSeries = C[26] || CT.C26;
  shape_helper.ShapeMarkerType.stepLineSeries = C[27] || CT.C27;
  shape_helper.ShapeMarkerType.bubbleSeries = C[28] || CT.C28;
  shape_helper.ShapeMarkerType.columnSeries = C[29] || CT.C29;
  shape_helper.ShapeMarkerType.stackedColumnSeries = C[30] || CT.C30;
  shape_helper.ShapeMarkerType.stackedColumn100Series = C[31] || CT.C31;
  shape_helper.ShapeMarkerType.rangeColumnSeries = C[32] || CT.C32;
  shape_helper.ShapeMarkerType.histogramSeries = C[33] || CT.C33;
  shape_helper.ShapeMarkerType.barSeries = C[34] || CT.C34;
  shape_helper.ShapeMarkerType.stackedBarSeries = C[35] || CT.C35;
  shape_helper.ShapeMarkerType.stackedBar100Series = C[36] || CT.C36;
  shape_helper.ShapeMarkerType.hiloSeries = C[37] || CT.C37;
  shape_helper.ShapeMarkerType.hiloOpenCloseSeries = C[38] || CT.C38;
  shape_helper.ShapeMarkerType.candleSeries = C[39] || CT.C39;
  shape_helper.ShapeMarkerType.waterfallSeries = C[40] || CT.C40;
  shape_helper.ShapeMarkerType.boxAndWhiskerSeries = C[41] || CT.C41;
  shape_helper.ShapeMarkerType.pieSeries = C[42] || CT.C42;
  shape_helper.ShapeMarkerType.doughnutSeries = C[43] || CT.C43;
  shape_helper.ShapeMarkerType.radialBarSeries = C[44] || CT.C44;
  shape_helper.ShapeMarkerType.pyramidSeries = C[45] || CT.C45;
  shape_helper.ShapeMarkerType.funnelSeries = C[46] || CT.C46;
  shape_helper.ShapeMarkerType.values = C[47] || CT.C47;
  shape_helper.ShapePainter = class ShapePainter extends core.Object {
    static paint(opts) {
      let t0;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 180, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 181, 21, "rect");
      let shapeType = opts && 'shapeType' in opts ? opts.shapeType : null;
      if (shapeType == null) dart.nullFailed(I[0], 182, 32, "shapeType");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 183, 22, "paint");
      let path = opts && 'path' in opts ? opts.path : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      shape_helper.ShapePainter._processShapes({canvas: canvas, rect: rect, shapeType: shapeType, paint: paint, path: (t0 = path, t0 == null ? ui.Path.new() : t0), borderPaint: borderPaint, isNeedToReturnPath: false, elevation: elevation, elevationColor: elevationColor});
    }
    static getShapesPath(opts) {
      let t0, t0$, t0$0;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 205, 21, "rect");
      let shapeType = opts && 'shapeType' in opts ? opts.shapeType : null;
      if (shapeType == null) dart.nullFailed(I[0], 206, 32, "shapeType");
      let path = opts && 'path' in opts ? opts.path : null;
      let pentagonRotation = opts && 'pentagonRotation' in opts ? opts.pentagonRotation : -1.5707963267948966;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let degree = opts && 'degree' in opts ? opts.degree : null;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : null;
      let endAngle = opts && 'endAngle' in opts ? opts.endAngle : null;
      return shape_helper.ShapePainter._processShapes({canvas: (t0 = canvas, t0 == null ? ui.Canvas.new(ui.PictureRecorder.new()) : t0), paint: (t0$ = paint, t0$ == null ? ui.Paint.new() : t0$), borderPaint: borderPaint, rect: rect, path: (t0$0 = path, t0$0 == null ? ui.Path.new() : t0$0), shapeType: shapeType, isNeedToReturnPath: true, pentagonRotation: pentagonRotation, radius: radius, degree: degree, startAngle: startAngle, endAngle: endAngle});
    }
    static _processShapes(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 229, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 230, 21, "rect");
      let shapeType = opts && 'shapeType' in opts ? opts.shapeType : null;
      if (shapeType == null) dart.nullFailed(I[0], 231, 32, "shapeType");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 232, 22, "paint");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 233, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 234, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let pentagonRotation = opts && 'pentagonRotation' in opts ? opts.pentagonRotation : -1.5707963267948966;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let degree = opts && 'degree' in opts ? opts.degree : null;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : null;
      let endAngle = opts && 'endAngle' in opts ? opts.endAngle : null;
      switch (shapeType) {
        case C[1] || CT.C1:
        {
          return shape_helper.ShapePainter._processCircleShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[2] || CT.C2:
        {
          return shape_helper.ShapePainter._processRectangleShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[3] || CT.C3:
        {
          return shape_helper.ShapePainter._processDiamondShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[4] || CT.C4:
        {
          return shape_helper.ShapePainter._processTriangleShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[5] || CT.C5:
        {
          return shape_helper.ShapePainter._processInvertedTriangleShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[6] || CT.C6:
        {
          return shape_helper.ShapePainter._processVerticalTriangleShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[7] || CT.C7:
        {
          return shape_helper.ShapePainter._processVerticalInvertedTriangleShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[8] || CT.C8:
        {
          return shape_helper.ShapePainter._processPentagonShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, rotation: pentagonRotation, elevation: elevation, elevationColor: elevationColor, paint: paint, borderPaint: borderPaint});
        }
        case C[9] || CT.C9:
        {
          return shape_helper.ShapePainter._processVerticalLineShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, borderPaint: borderPaint});
        }
        case C[10] || CT.C10:
        {
          return shape_helper.ShapePainter._processHorizontalLineShape({canvas: canvas, rect: rect, path: path, isNeedToReturnPath: isNeedToReturnPath, borderPaint: borderPaint});
        }
        case C[11] || CT.C11:
        case C[13] || CT.C13:
        case C[15] || CT.C15:
        case C[17] || CT.C17:
        {
          return shape_helper.ShapePainter._processLineShape({canvas: canvas, path: path, rect: rect, borderPaint: paint, isNeedToReturnPath: isNeedToReturnPath, isNeedMarker: false});
        }
        case C[12] || CT.C12:
        case C[14] || CT.C14:
        case C[16] || CT.C16:
        case C[18] || CT.C18:
        {
          return shape_helper.ShapePainter._processLineShape({canvas: canvas, path: path, rect: rect, borderPaint: paint, isNeedToReturnPath: isNeedToReturnPath, isNeedMarker: true});
        }
        case C[19] || CT.C19:
        {
          return shape_helper.ShapePainter._processSplineShape({canvas: canvas, rect: rect, path: path, paint: paint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[20] || CT.C20:
        case C[21] || CT.C21:
        {
          return shape_helper.ShapePainter._processSplineAreaShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[22] || CT.C22:
        case C[23] || CT.C23:
        case C[24] || CT.C24:
        case C[25] || CT.C25:
        {
          return shape_helper.ShapePainter._processAreaShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[26] || CT.C26:
        {
          return shape_helper.ShapePainter._processStepAreaShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[27] || CT.C27:
        {
          return shape_helper.ShapePainter._processStepLineShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[28] || CT.C28:
        {
          return shape_helper.ShapePainter._processBubbleShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[29] || CT.C29:
        case C[30] || CT.C30:
        case C[31] || CT.C31:
        case C[32] || CT.C32:
        case C[33] || CT.C33:
        {
          return shape_helper.ShapePainter._processColumnShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[34] || CT.C34:
        case C[35] || CT.C35:
        case C[36] || CT.C36:
        {
          return shape_helper.ShapePainter._processBarShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[37] || CT.C37:
        {
          return shape_helper.ShapePainter._processHiloShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[38] || CT.C38:
        case C[39] || CT.C39:
        {
          return shape_helper.ShapePainter._processHiloOpenCloseShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[40] || CT.C40:
        case C[41] || CT.C41:
        {
          return shape_helper.ShapePainter._processWaterfallShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[42] || CT.C42:
        {
          return shape_helper.ShapePainter._processPieShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[43] || CT.C43:
        {
          return shape_helper.ShapePainter._processDoughnutShape({canvas: canvas, rect: rect, radius: dart.nullCheck(radius), path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[44] || CT.C44:
        {
          return shape_helper.ShapePainter._processRadialBarShape({rect: rect, canvas: canvas, radius: radius, path: path, paint: paint, borderPaint: borderPaint, degree: degree, isNeedToReturnPath: isNeedToReturnPath, startAngle: startAngle, endAngle: endAngle});
        }
        case C[45] || CT.C45:
        {
          return shape_helper.ShapePainter._processPyramidShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[46] || CT.C46:
        {
          return shape_helper.ShapePainter._processFunnelShape({canvas: canvas, rect: rect, path: path, paint: paint, borderPaint: borderPaint, isNeedToReturnPath: isNeedToReturnPath});
        }
        case C[0] || CT.C0:
        {
          return ui.Path.new();
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    static _processCircleShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 512, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 513, 21, "rect");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 514, 22, "paint");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 515, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 516, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      path.addOval(rect);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processRectangleShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 540, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 541, 21, "rect");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 542, 22, "paint");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 543, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 544, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      path.addRect(rect);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processInvertedTriangleShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 568, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 569, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 570, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 571, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 574, 22, "paint");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      path.moveTo(rect.left, rect.top);
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width), rect.top);
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width) / 2, dart.notNull(rect.top) + dart.notNull(rect.height));
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processTriangleShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 600, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 601, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 602, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 603, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 606, 22, "paint");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      path.moveTo(dart.notNull(rect.left) + dart.notNull(rect.width) / 2, rect.top);
      path.lineTo(rect.left, dart.notNull(rect.top) + dart.notNull(rect.height));
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width), dart.notNull(rect.top) + dart.notNull(rect.height));
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processVerticalTriangleShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 631, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 632, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 633, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 634, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 637, 22, "paint");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      path.moveTo(rect.left, dart.notNull(rect.top) + dart.notNull(rect.height) / 2);
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width), rect.top);
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width), dart.notNull(rect.top) + dart.notNull(rect.height));
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processVerticalInvertedTriangleShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 662, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 663, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 664, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 665, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 668, 22, "paint");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      path.moveTo(rect.left, rect.top);
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width), dart.notNull(rect.top) + dart.notNull(rect.height) / 2);
      path.lineTo(rect.left, dart.notNull(rect.top) + dart.notNull(rect.height));
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processDiamondShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 693, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 694, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 695, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 696, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 699, 22, "paint");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      path.moveTo(dart.notNull(rect.left) + dart.notNull(rect.width) / 2.0, rect.top);
      path.lineTo(rect.left, dart.notNull(rect.top) + dart.notNull(rect.height) / 2.0);
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width) / 2.0, dart.notNull(rect.top) + dart.notNull(rect.height));
      path.lineTo(dart.notNull(rect.left) + dart.notNull(rect.width), dart.notNull(rect.top) + dart.notNull(rect.height) / 2.0);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processPentagonShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 726, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 727, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 728, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 729, 21, "path");
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let elevationColor = opts && 'elevationColor' in opts ? opts.elevationColor : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 732, 22, "paint");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let rotation = opts && 'rotation' in opts ? opts.rotation : null;
      let left = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let top = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let radius = dart.notNull(rect.width) / 2;
      for (let i = 0; i <= 5; i = i + 1) {
        let angle = (i / 5 * 3.141592653589793 * 2 + dart.nullCheck(rotation))[$toDouble]();
        i === 0 ? path.moveTo(math.cos(angle) * radius + left, math.sin(angle) * radius + top) : path.lineTo(math.cos(angle) * radius + left, math.sin(angle) * radius + top);
      }
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (elevation != null && dart.notNull(elevation) > 0 && elevationColor != null) {
        canvas.drawShadow(path, elevationColor, elevation, true);
      }
      canvas.drawPath(path, paint);
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processVerticalLineShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 763, 24, "canvas");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 764, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 765, 21, "path");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 766, 21, "rect");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let left = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let top = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      path.moveTo(left, top + dart.notNull(rect.height) / 2);
      path.lineTo(left, top - dart.notNull(rect.height) / 2);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processHorizontalLineShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 787, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 788, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 789, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 790, 21, "path");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let left = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let top = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      path.moveTo(left - dart.notNull(rect.width) / 2, top);
      path.lineTo(left + dart.notNull(rect.width) / 2, top);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processStepLineShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 810, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 811, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 812, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 813, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x - dart.notNull(width) / 2 - 10 / 4, y + dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 2 + dart.notNull(width) / 10, y + dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 2 + dart.notNull(width) / 10, y);
      path.lineTo(x - dart.notNull(width) / 10, y);
      path.lineTo(x - dart.notNull(width) / 10, y + dart.notNull(height) / 2);
      path.lineTo(x + dart.notNull(width) / 5, y + dart.notNull(height) / 2);
      path.lineTo(x + dart.notNull(width) / 5, y - dart.notNull(height) / 2);
      path.lineTo(x + dart.notNull(width) / 2, y - dart.notNull(height) / 2);
      path.lineTo(x + dart.notNull(width) / 2, y + dart.notNull(height) / 2);
      path.lineTo(x + dart.notNull(width) / 2 + 10 / 4, y + dart.notNull(height) / 2);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processPieShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 846, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 847, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 848, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 849, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      let r = math.min(core.double, height, width) / 2;
      path.moveTo(x, y);
      path.lineTo(x + r, y);
      path.arcTo(new ui.Rect.fromCircle({center: new ui.Offset.new(x, y), radius: r}), shape_helper.ShapePainter._degreesToRadians(0.0)[$toDouble](), shape_helper.ShapePainter._degreesToRadians(270.0)[$toDouble](), false);
      path.close();
      path.moveTo(x + dart.notNull(width) / 10, y - dart.notNull(height) / 10);
      path.lineTo(x + r, y - dart.notNull(height) / 10);
      path.arcTo(new ui.Rect.fromCircle({center: new ui.Offset.new(x + 2, y - 2), radius: r}), shape_helper.ShapePainter._degreesToRadians(-5.0)[$toDouble](), shape_helper.ShapePainter._degreesToRadians(-80.0)[$toDouble](), false);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processDoughnutShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 889, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 890, 21, "rect");
      let radius = opts && 'radius' in opts ? opts.radius : null;
      if (radius == null) dart.nullFailed(I[0], 891, 23, "radius");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 892, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 893, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let path1 = null;
      let path1$35isSet = false;
      function path1$35get() {
        return path1$35isSet ? path1 : dart.throw(new _internal.LateError.localNI("path1"));
      }
      dart.fn(path1$35get, T.VoidToPath());
      function path1$35set(t3) {
        if (t3 == null) dart.nullFailed(I[0], 898, 15, "null");
        path1$35isSet = true;
        return path1 = t3;
      }
      dart.fn(path1$35set, T.PathTodynamic());
      let path2 = null;
      let path2$35isSet = false;
      function path2$35get() {
        return path2$35isSet ? path2 : dart.throw(new _internal.LateError.localNI("path2"));
      }
      dart.fn(path2$35get, T.VoidToPath());
      function path2$35set(t8) {
        if (t8 == null) dart.nullFailed(I[0], 898, 22, "null");
        path2$35isSet = true;
        return path2 = t8;
      }
      dart.fn(path2$35set, T.PathTodynamic());
      if (borderPaint != null) {
        path1$35set(shape_helper.ShapePainter._getArcPath(path, dart.notNull(radius) / 4, dart.notNull(radius) / 2, new ui.Offset.new(x, y), 0.0, 270.0, 270.0, true));
      } else {
        path2$35set(shape_helper.ShapePainter._getArcPath(path, dart.notNull(radius) / 4, dart.notNull(radius) / 2, new ui.Offset.new(x + 1, y - 1), -5.0, -85.0, -85.0, true));
      }
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path1$35get(), dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path1$35get(), borderPaint);
      }
      canvas.drawPath(path2$35get(), paint);
      if (borderPaint != null) {
        canvas.drawPath(path2$35get(), borderPaint);
      }
      return path;
    }
    static _processRadialBarShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 925, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 926, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 927, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 928, 21, "path");
      let degree = opts && 'degree' in opts ? opts.degree : null;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : null;
      let endAngle = opts && 'endAngle' in opts ? opts.endAngle : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let path1 = null;
      let path1$35isSet = false;
      function path1$35get() {
        return path1$35isSet ? path1 : dart.throw(new _internal.LateError.localNI("path1"));
      }
      dart.fn(path1$35get, T.VoidToPath());
      function path1$35set(t13) {
        if (t13 == null) dart.nullFailed(I[0], 938, 15, "null");
        path1$35isSet = true;
        return path1 = t13;
      }
      dart.fn(path1$35set, T.PathTodynamic());
      let path2 = null;
      let path2$35isSet = false;
      function path2$35get() {
        return path2$35isSet ? path2 : dart.throw(new _internal.LateError.localNI("path2"));
      }
      dart.fn(path2$35get, T.VoidToPath());
      function path2$35set(t18) {
        if (t18 == null) dart.nullFailed(I[0], 938, 22, "null");
        path2$35isSet = true;
        return path2 = t18;
      }
      dart.fn(path2$35set, T.PathTodynamic());
      radius == null ? radius = (dart.notNull(rect.width) + dart.notNull(rect.height)) / 2 : null;
      if (borderPaint != null) {
        path1$35set(shape_helper.ShapePainter._getArcPath(path, dart.notNull(radius) / 2 - 2, dart.notNull(radius) / 2, new ui.Offset.new(x, y), 0.0, 360 - 0.01, 360 - 0.01, true));
      } else {
        path2$35set(shape_helper.ShapePainter._getArcPath(path, dart.notNull(radius) / 2 - 2, dart.notNull(radius) / 2, new ui.Offset.new(x, y), dart.nullCheck(startAngle), dart.nullCheck(endAngle), dart.nullCheck(degree), true));
      }
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path1$35get(), dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path1$35get(), borderPaint);
      }
      canvas.drawPath(path2$35get(), paint);
      if (borderPaint != null) {
        canvas.drawPath(path2$35get(), borderPaint);
      }
      return path;
    }
    static _getArcPath(path, innerRadius, radius, center, startAngle, endAngle, degree, isAnimate) {
      if (path == null) dart.nullFailed(I[0], 971, 12, "path");
      if (innerRadius == null) dart.nullFailed(I[0], 972, 14, "innerRadius");
      if (radius == null) dart.nullFailed(I[0], 973, 14, "radius");
      if (center == null) dart.nullFailed(I[0], 974, 14, "center");
      if (startAngle == null) dart.nullFailed(I[0], 975, 14, "startAngle");
      if (endAngle == null) dart.nullFailed(I[0], 976, 14, "endAngle");
      if (degree == null) dart.nullFailed(I[0], 977, 14, "degree");
      if (isAnimate == null) dart.nullFailed(I[0], 978, 12, "isAnimate");
      startAngle = shape_helper.ShapePainter._degreesToRadians(startAngle);
      endAngle = shape_helper.ShapePainter._degreesToRadians(endAngle);
      degree = shape_helper.ShapePainter._degreesToRadians(degree);
      let innerRadiusStartPoint = new (T.PointOfdouble()).new(dart.notNull(innerRadius) * math.cos(startAngle) + dart.notNull(center.dx), dart.notNull(innerRadius) * math.sin(startAngle) + dart.notNull(center.dy));
      let innerRadiusEndPoint = new (T.PointOfdouble()).new(dart.notNull(innerRadius) * math.cos(endAngle) + dart.notNull(center.dx), dart.notNull(innerRadius) * math.sin(endAngle) + dart.notNull(center.dy));
      let radiusStartPoint = new (T.PointOfdouble()).new(dart.notNull(radius) * math.cos(startAngle) + dart.notNull(center.dx), dart.notNull(radius) * math.sin(startAngle) + dart.notNull(center.dy));
      if (dart.test(isAnimate)) {
        path.moveTo(innerRadiusStartPoint.x, innerRadiusStartPoint.y);
      }
      let isFullCircle = startAngle != null && endAngle != null && dart.notNull(endAngle) - dart.notNull(startAngle) === 2 * 3.141592653589793;
      let midpointAngle = (dart.notNull(endAngle) + dart.notNull(startAngle)) / 2;
      if (isFullCircle) {
        path.arcTo(new ui.Rect.fromCircle({center: center, radius: radius[$toDouble]()}), startAngle[$toDouble](), midpointAngle[$toDouble]() - startAngle[$toDouble](), true);
        path.arcTo(new ui.Rect.fromCircle({center: center, radius: radius[$toDouble]()}), midpointAngle[$toDouble](), endAngle[$toDouble]() - midpointAngle[$toDouble](), true);
      } else {
        path.lineTo(radiusStartPoint.x, radiusStartPoint.y);
        path.arcTo(new ui.Rect.fromCircle({center: center, radius: radius[$toDouble]()}), startAngle[$toDouble](), degree[$toDouble](), true);
      }
      if (isFullCircle) {
        path.arcTo(new ui.Rect.fromCircle({center: center, radius: innerRadius[$toDouble]()}), endAngle[$toDouble](), midpointAngle[$toDouble]() - endAngle[$toDouble](), true);
        path.arcTo(new ui.Rect.fromCircle({center: center, radius: innerRadius[$toDouble]()}), midpointAngle[$toDouble](), dart.notNull(startAngle) - midpointAngle[$toDouble](), true);
      } else {
        path.lineTo(innerRadiusEndPoint.x, innerRadiusEndPoint.y);
        path.arcTo(new ui.Rect.fromCircle({center: center, radius: innerRadius[$toDouble]()}), endAngle[$toDouble](), startAngle[$toDouble]() - endAngle[$toDouble](), true);
        path.lineTo(radiusStartPoint.x, radiusStartPoint.y);
      }
      return path;
    }
    static _degreesToRadians(deg) {
      if (deg == null) dart.nullFailed(I[0], 1048, 42, "deg");
      return dart.notNull(deg) * (3.141592653589793 / 180);
    }
    static _processHiloShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1052, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1053, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1054, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1055, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let height = rect.height;
      path.moveTo(x, y + dart.notNull(height) / 2);
      path.lineTo(x, y - dart.notNull(height) / 2);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processHiloOpenCloseShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1079, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1080, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1081, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1082, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      path.moveTo(x - dart.notNull(width) / 2, y);
      path.lineTo(x + dart.notNull(width) / 2, y);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processWaterfallShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1105, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1106, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1107, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1108, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.addRect(new ui.Rect.fromLTRB(x - dart.notNull(width) / 2, y - dart.notNull(height) / 2, x + dart.notNull(width) / 2, y + dart.notNull(height) / 2));
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processPyramidShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1132, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1133, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1134, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1135, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x - dart.notNull(width) / 2, y + dart.notNull(height) / 2);
      path.lineTo(x + dart.notNull(width) / 2, y + dart.notNull(height) / 2);
      path.lineTo(x, y - dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 2, y + dart.notNull(height) / 2);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processFunnelShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1162, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1163, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1164, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1165, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x + dart.notNull(width) / 2, y - dart.notNull(height) / 2);
      path.lineTo(x, y + dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 2, y - dart.notNull(height) / 2);
      path.lineTo(x + dart.notNull(width) / 2, y - dart.notNull(height) / 2);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processBubbleShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1193, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1194, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1195, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1196, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.addArc(new ui.Rect.fromLTWH(x - dart.notNull(width) / 2, y - dart.notNull(height) / 2, width, height), 0.0, 2 * 3.141592653589793);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processStepAreaShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1221, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1222, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1223, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1224, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x - dart.notNull(width) / 2 - 10 / 4, y + dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 2 - 10 / 4, y - dart.notNull(height) / 4);
      path.lineTo(x - dart.notNull(width) / 2 + dart.notNull(width) / 10, y - dart.notNull(height) / 4);
      path.lineTo(x - dart.notNull(width) / 2 + dart.notNull(width) / 10, y - dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 10, y - dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 10, y);
      path.lineTo(x + dart.notNull(width) / 5, y);
      path.lineTo(x + dart.notNull(width) / 5, y - dart.notNull(height) / 3);
      path.lineTo(x + dart.notNull(width) / 2, y - dart.notNull(height) / 3);
      path.lineTo(x + dart.notNull(width) / 2, y + dart.notNull(height) / 2);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processSplineAreaShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1259, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1260, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1261, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1262, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x - dart.notNull(width) / 2, y + dart.notNull(height) / 2);
      path.quadraticBezierTo(x, y - dart.notNull(height), x, y + dart.notNull(height) / 5);
      path.quadraticBezierTo(x + dart.notNull(width) / 2, y - dart.notNull(height) / 2, x + dart.notNull(width) / 2, y + dart.notNull(height) / 2);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processLineShape(opts) {
      let t20, t20$;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1289, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1290, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1291, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1292, 21, "path");
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let isNeedMarker = opts && 'isNeedMarker' in opts ? opts.isNeedMarker : null;
      let left = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let top = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      path.moveTo(left - dart.notNull(rect.width) / 1.5, top);
      path.lineTo(left + dart.notNull(rect.width) / 1.5, top);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      if (borderPaint != null) {
        canvas.drawPath(path, (t20 = borderPaint, (() => {
          t20.style = ui.PaintingStyle.stroke;
          return t20;
        })()));
      }
      if (dart.nullCheck(isNeedMarker) && borderPaint != null) {
        path.close();
        path.addOval(new ui.Rect.fromCenter({center: new ui.Offset.new(left, top), width: dart.notNull(rect.width) / 1.5, height: dart.notNull(rect.height) / 1.5}));
        canvas.drawPath(path, (t20$ = borderPaint, (() => {
          t20$.style = ui.PaintingStyle.fill;
          return t20$;
        })()));
      }
      return path;
    }
    static _processColumnShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1321, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1322, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1323, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1324, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let left = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let top = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      path.moveTo(left - 3 * (dart.notNull(rect.width) / 5), top - dart.notNull(rect.height) / 5);
      path.lineTo(left + 3 * (-dart.notNull(rect.width) / 10), top - dart.notNull(rect.height) / 5);
      path.lineTo(left + 3 * (-dart.notNull(rect.width) / 10), top + dart.notNull(rect.height) / 2);
      path.lineTo(left - 3 * (dart.notNull(rect.width) / 5), top + dart.notNull(rect.height) / 2);
      path.close();
      path.moveTo(left - dart.notNull(rect.width) / 10 - dart.notNull(rect.width) / (10 * 2), top - dart.notNull(rect.height) / 4 - 10 / 2);
      path.lineTo(left + dart.notNull(rect.width) / 10 + dart.notNull(rect.width) / (10 * 2), top - dart.notNull(rect.height) / 4 - 10 / 2);
      path.lineTo(left + dart.notNull(rect.width) / 10 + dart.notNull(rect.width) / (10 * 2), top + dart.notNull(rect.height) / 2);
      path.lineTo(left - dart.notNull(rect.width) / 10 - dart.notNull(rect.width) / (10 * 2), top + dart.notNull(rect.height) / 2);
      path.close();
      path.moveTo(left + 3 * (dart.notNull(rect.width) / 10), top);
      path.lineTo(left + 3 * (dart.notNull(rect.width) / 5), top);
      path.lineTo(left + 3 * (dart.notNull(rect.width) / 5), top + dart.notNull(rect.height) / 2);
      path.lineTo(left + 3 * (dart.notNull(rect.width) / 10), top + dart.notNull(rect.height) / 2);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processAreaShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1372, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1373, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1374, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1375, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x - dart.notNull(width) / 2 - 10 / 4, y + dart.notNull(height) / 2);
      path.lineTo(x - dart.notNull(width) / 4 - 10 / 8, y - dart.notNull(height) / 2);
      path.lineTo(x, y + dart.notNull(height) / 4);
      path.lineTo(x + dart.notNull(width) / 4 + 10 / 8, y - dart.notNull(height) / 2 + dart.notNull(height) / 4);
      path.lineTo(x + dart.notNull(height) / 2 + 10 / 4, y + dart.notNull(height) / 2);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processBarShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1407, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1408, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1409, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1410, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x - dart.notNull(width) / 2 - 10 / 4, y - 3 * (dart.notNull(height) / 5));
      path.lineTo(x + 3 * (dart.notNull(width) / 10), y - 3 * (dart.notNull(height) / 5));
      path.lineTo(x + 3 * (dart.notNull(width) / 10), y - 3 * (dart.notNull(height) / 10));
      path.lineTo(x - dart.notNull(width) / 2 - 10 / 4, y - 3 * (dart.notNull(height) / 10));
      path.close();
      path.moveTo(x - dart.notNull(width) / 2 - 10 / 4, y - dart.notNull(height) / 5 + 10 / 20);
      path.lineTo(x + dart.notNull(width) / 2 + 10 / 4, y - dart.notNull(height) / 5 + 10 / 20);
      path.lineTo(x + dart.notNull(width) / 2 + 10 / 4, y + dart.notNull(height) / 10 + 10 / 20);
      path.lineTo(x - dart.notNull(width) / 2 - 10 / 4, y + dart.notNull(height) / 10 + 10 / 20);
      path.close();
      path.moveTo(x - dart.notNull(width) / 2 - 10 / 4, y + dart.notNull(height) / 5 + 10 / 10);
      path.lineTo(x - dart.notNull(width) / 4, y + dart.notNull(height) / 5 + 10 / 10);
      path.lineTo(x - dart.notNull(width) / 4, y + dart.notNull(height) / 2 + 10 / 10);
      path.lineTo(x - dart.notNull(width) / 2 - 10 / 4, y + dart.notNull(height) / 2 + 10 / 10);
      path.close();
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
    static _processSplineShape(opts) {
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 1457, 24, "canvas");
      let rect = opts && 'rect' in opts ? opts.rect : null;
      if (rect == null) dart.nullFailed(I[0], 1458, 21, "rect");
      let isNeedToReturnPath = opts && 'isNeedToReturnPath' in opts ? opts.isNeedToReturnPath : null;
      if (isNeedToReturnPath == null) dart.nullFailed(I[0], 1459, 21, "isNeedToReturnPath");
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 1460, 21, "path");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let borderPaint = opts && 'borderPaint' in opts ? opts.borderPaint : null;
      let x = dart.notNull(rect.left) + dart.notNull(rect.width) / 2;
      let y = dart.notNull(rect.top) + dart.notNull(rect.height) / 2;
      let width = rect.width;
      let height = rect.height;
      path.moveTo(x - dart.notNull(width) / 2, y + dart.notNull(height) / 5);
      path.quadraticBezierTo(x, y - dart.notNull(height), x, y + dart.notNull(height) / 5);
      path.moveTo(x, y + dart.notNull(height) / 5);
      path.quadraticBezierTo(x + dart.notNull(width) / 2, y + dart.notNull(height) / 2, x + dart.notNull(width) / 2, y - dart.notNull(height) / 2);
      if (dart.test(isNeedToReturnPath)) {
        return path;
      }
      canvas.drawPath(path, dart.nullCheck(paint));
      if (borderPaint != null) {
        canvas.drawPath(path, borderPaint);
      }
      return path;
    }
  };
  (shape_helper.ShapePainter.new = function() {
    ;
  }).prototype = shape_helper.ShapePainter.prototype;
  dart.addTypeTests(shape_helper.ShapePainter);
  dart.addTypeCaches(shape_helper.ShapePainter);
  dart.setLibraryUri(shape_helper.ShapePainter, I[1]);
  dart.trackLibraries("packages/syncfusion_flutter_core/src/utils/shape_helper.dart", {
    "package:syncfusion_flutter_core/src/utils/shape_helper.dart": shape_helper
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["shape_helper.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/syncfusion_flutter_core/src/utils/shape_helper.dart.lib.js"}');
  // Exports:
  return {
    src__utils__shape_helper: shape_helper
  };
}));

//# sourceMappingURL=shape_helper.dart.lib.js.map
