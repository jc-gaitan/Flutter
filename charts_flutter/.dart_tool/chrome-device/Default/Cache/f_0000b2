define(['dart_sdk', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/border_radius.dart'], (function load__packages__syncfusion_flutter_core__src__theme__theme_widget_dart(dart_sdk, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__border_radius$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const inherited_theme = packages__flutter__src__widgets__widget_span$46dart.src__widgets__inherited_theme;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const colors$ = packages__flutter__src__material__colors$46dart.src__material__colors;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  var theme_widget = Object.create(dart.library);
  var slider_theme = Object.create(dart.library);
  var range_slider_theme = Object.create(dart.library);
  var range_selector_theme = Object.create(dart.library);
  var pdfviewer_theme = Object.create(dart.library);
  var maps_theme = Object.create(dart.library);
  var gauges_theme = Object.create(dart.library);
  var daterangepicker_theme = Object.create(dart.library);
  var datapager_theme = Object.create(dart.library);
  var datagrid_theme = Object.create(dart.library);
  var charts_theme = Object.create(dart.library);
  var calendar_theme = Object.create(dart.library);
  var barcodes_theme = Object.create(dart.library);
  var theme$ = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    _SfInheritedThemeL: () => (T._SfInheritedThemeL = dart.constFn(dart.legacy(theme_widget._SfInheritedTheme)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    SfGaugeThemeDataL: () => (T.SfGaugeThemeDataL = dart.constFn(dart.legacy(gauges_theme.SfGaugeThemeData)))(),
    SfThemeDataL: () => (T.SfThemeDataL = dart.constFn(dart.legacy(theme_widget.SfThemeData)))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    JSArrayOfObjectL: () => (T.JSArrayOfObjectL = dart.constFn(_interceptors.JSArray$(T.ObjectL())))(),
    BrightnessL: () => (T.BrightnessL = dart.constFn(dart.legacy(ui.Brightness)))(),
    EnumPropertyOfBrightnessL: () => (T.EnumPropertyOfBrightnessL = dart.constFn(diagnostics.EnumProperty$(T.BrightnessL())))(),
    SfPdfViewerThemeDataL: () => (T.SfPdfViewerThemeDataL = dart.constFn(dart.legacy(pdfviewer_theme.SfPdfViewerThemeData)))(),
    DiagnosticsPropertyOfSfPdfViewerThemeDataL: () => (T.DiagnosticsPropertyOfSfPdfViewerThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfPdfViewerThemeDataL())))(),
    SfChartThemeDataL: () => (T.SfChartThemeDataL = dart.constFn(dart.legacy(charts_theme.SfChartThemeData)))(),
    DiagnosticsPropertyOfSfChartThemeDataL: () => (T.DiagnosticsPropertyOfSfChartThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfChartThemeDataL())))(),
    SfCalendarThemeDataL: () => (T.SfCalendarThemeDataL = dart.constFn(dart.legacy(calendar_theme.SfCalendarThemeData)))(),
    DiagnosticsPropertyOfSfCalendarThemeDataL: () => (T.DiagnosticsPropertyOfSfCalendarThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfCalendarThemeDataL())))(),
    SfDataGridThemeDataL: () => (T.SfDataGridThemeDataL = dart.constFn(dart.legacy(datagrid_theme.SfDataGridThemeData)))(),
    DiagnosticsPropertyOfSfDataGridThemeDataL: () => (T.DiagnosticsPropertyOfSfDataGridThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfDataGridThemeDataL())))(),
    SfDataPagerThemeDataL: () => (T.SfDataPagerThemeDataL = dart.constFn(dart.legacy(datapager_theme.SfDataPagerThemeData)))(),
    DiagnosticsPropertyOfSfDataPagerThemeDataL: () => (T.DiagnosticsPropertyOfSfDataPagerThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfDataPagerThemeDataL())))(),
    SfDateRangePickerThemeDataL: () => (T.SfDateRangePickerThemeDataL = dart.constFn(dart.legacy(daterangepicker_theme.SfDateRangePickerThemeData)))(),
    DiagnosticsPropertyOfSfDateRangePickerThemeDataL: () => (T.DiagnosticsPropertyOfSfDateRangePickerThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfDateRangePickerThemeDataL())))(),
    SfBarcodeThemeDataL: () => (T.SfBarcodeThemeDataL = dart.constFn(dart.legacy(barcodes_theme.SfBarcodeThemeData)))(),
    DiagnosticsPropertyOfSfBarcodeThemeDataL: () => (T.DiagnosticsPropertyOfSfBarcodeThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfBarcodeThemeDataL())))(),
    DiagnosticsPropertyOfSfGaugeThemeDataL: () => (T.DiagnosticsPropertyOfSfGaugeThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfGaugeThemeDataL())))(),
    SfRangeSelectorThemeDataL: () => (T.SfRangeSelectorThemeDataL = dart.constFn(dart.legacy(range_selector_theme.SfRangeSelectorThemeData)))(),
    DiagnosticsPropertyOfSfRangeSelectorThemeDataL: () => (T.DiagnosticsPropertyOfSfRangeSelectorThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfRangeSelectorThemeDataL())))(),
    SfRangeSliderThemeDataL: () => (T.SfRangeSliderThemeDataL = dart.constFn(dart.legacy(range_slider_theme.SfRangeSliderThemeData)))(),
    DiagnosticsPropertyOfSfRangeSliderThemeDataL: () => (T.DiagnosticsPropertyOfSfRangeSliderThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfRangeSliderThemeDataL())))(),
    SfSliderThemeDataL: () => (T.SfSliderThemeDataL = dart.constFn(dart.legacy(slider_theme.SfSliderThemeData)))(),
    DiagnosticsPropertyOfSfSliderThemeDataL: () => (T.DiagnosticsPropertyOfSfSliderThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfSliderThemeDataL())))(),
    SfMapsThemeDataL: () => (T.SfMapsThemeDataL = dart.constFn(dart.legacy(maps_theme.SfMapsThemeData)))(),
    DiagnosticsPropertyOfSfMapsThemeDataL: () => (T.DiagnosticsPropertyOfSfMapsThemeDataL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SfMapsThemeDataL())))(),
    SfSliderThemeL: () => (T.SfSliderThemeL = dart.constFn(dart.legacy(slider_theme.SfSliderTheme)))(),
    SizeL: () => (T.SizeL = dart.constFn(dart.legacy(ui.Size)))(),
    DiagnosticsPropertyOfSizeL: () => (T.DiagnosticsPropertyOfSizeL = dart.constFn(diagnostics.DiagnosticsProperty$(T.SizeL())))(),
    OffsetL: () => (T.OffsetL = dart.constFn(dart.legacy(ui.Offset)))(),
    DiagnosticsPropertyOfOffsetL: () => (T.DiagnosticsPropertyOfOffsetL = dart.constFn(diagnostics.DiagnosticsProperty$(T.OffsetL())))(),
    TextStyleL: () => (T.TextStyleL = dart.constFn(dart.legacy(text_style.TextStyle)))(),
    DiagnosticsPropertyOfTextStyleL: () => (T.DiagnosticsPropertyOfTextStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.TextStyleL())))(),
    SfRangeSliderThemeL: () => (T.SfRangeSliderThemeL = dart.constFn(dart.legacy(range_slider_theme.SfRangeSliderTheme)))(),
    SfRangeSelectorThemeL: () => (T.SfRangeSelectorThemeL = dart.constFn(dart.legacy(range_selector_theme.SfRangeSelectorTheme)))(),
    SfPdfViewerThemeL: () => (T.SfPdfViewerThemeL = dart.constFn(dart.legacy(pdfviewer_theme.SfPdfViewerTheme)))(),
    PdfScrollStatusStyleL: () => (T.PdfScrollStatusStyleL = dart.constFn(dart.legacy(pdfviewer_theme.PdfScrollStatusStyle)))(),
    DiagnosticsPropertyOfPdfScrollStatusStyleL: () => (T.DiagnosticsPropertyOfPdfScrollStatusStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.PdfScrollStatusStyleL())))(),
    PdfScrollHeadStyleL: () => (T.PdfScrollHeadStyleL = dart.constFn(dart.legacy(pdfviewer_theme.PdfScrollHeadStyle)))(),
    DiagnosticsPropertyOfPdfScrollHeadStyleL: () => (T.DiagnosticsPropertyOfPdfScrollHeadStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.PdfScrollHeadStyleL())))(),
    PdfBookmarkViewStyleL: () => (T.PdfBookmarkViewStyleL = dart.constFn(dart.legacy(pdfviewer_theme.PdfBookmarkViewStyle)))(),
    DiagnosticsPropertyOfPdfBookmarkViewStyleL: () => (T.DiagnosticsPropertyOfPdfBookmarkViewStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.PdfBookmarkViewStyleL())))(),
    PdfPaginationDialogStyleL: () => (T.PdfPaginationDialogStyleL = dart.constFn(dart.legacy(pdfviewer_theme.PdfPaginationDialogStyle)))(),
    DiagnosticsPropertyOfPdfPaginationDialogStyleL: () => (T.DiagnosticsPropertyOfPdfPaginationDialogStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.PdfPaginationDialogStyleL())))(),
    SfMapsThemeL: () => (T.SfMapsThemeL = dart.constFn(dart.legacy(maps_theme.SfMapsTheme)))(),
    BorderRadiusGeometryL: () => (T.BorderRadiusGeometryL = dart.constFn(dart.legacy(border_radius.BorderRadiusGeometry)))(),
    DiagnosticsPropertyOfBorderRadiusGeometryL: () => (T.DiagnosticsPropertyOfBorderRadiusGeometryL = dart.constFn(diagnostics.DiagnosticsProperty$(T.BorderRadiusGeometryL())))(),
    SfGaugeThemeL: () => (T.SfGaugeThemeL = dart.constFn(dart.legacy(gauges_theme.SfGaugeTheme)))(),
    SfDateRangePickerThemeL: () => (T.SfDateRangePickerThemeL = dart.constFn(dart.legacy(daterangepicker_theme.SfDateRangePickerTheme)))(),
    SfDataPagerThemeL: () => (T.SfDataPagerThemeL = dart.constFn(dart.legacy(datapager_theme.SfDataPagerTheme)))(),
    SfDataGridThemeL: () => (T.SfDataGridThemeL = dart.constFn(dart.legacy(datagrid_theme.SfDataGridTheme)))(),
    DataGridHeaderCellStyleL: () => (T.DataGridHeaderCellStyleL = dart.constFn(dart.legacy(datagrid_theme.DataGridHeaderCellStyle)))(),
    DiagnosticsPropertyOfDataGridHeaderCellStyleL: () => (T.DiagnosticsPropertyOfDataGridHeaderCellStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.DataGridHeaderCellStyleL())))(),
    DataGridCellStyleL: () => (T.DataGridCellStyleL = dart.constFn(dart.legacy(datagrid_theme.DataGridCellStyle)))(),
    DiagnosticsPropertyOfDataGridCellStyleL: () => (T.DiagnosticsPropertyOfDataGridCellStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.DataGridCellStyleL())))(),
    DataGridCurrentCellStyleL: () => (T.DataGridCurrentCellStyleL = dart.constFn(dart.legacy(datagrid_theme.DataGridCurrentCellStyle)))(),
    DiagnosticsPropertyOfDataGridCurrentCellStyleL: () => (T.DiagnosticsPropertyOfDataGridCurrentCellStyleL = dart.constFn(diagnostics.DiagnosticsProperty$(T.DataGridCurrentCellStyleL())))(),
    SfChartThemeL: () => (T.SfChartThemeL = dart.constFn(dart.legacy(charts_theme.SfChartTheme)))(),
    SfCalendarThemeL: () => (T.SfCalendarThemeL = dart.constFn(dart.legacy(calendar_theme.SfCalendarTheme)))(),
    ColorL: () => (T.ColorL = dart.constFn(dart.legacy(ui.Color)))(),
    SfBarcodeThemeL: () => (T.SfBarcodeThemeL = dart.constFn(dart.legacy(barcodes_theme.SfBarcodeTheme)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 30,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 42,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[3] || CT.C3], T._LocationL());
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1] || CT.C1,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 112,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/theme_widget.dart"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 19,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 31,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7], T._LocationL());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[5] || CT.C5,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 132,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/theme_widget.dart"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 25,
        [_Location_line]: 41,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 37,
        [_Location_line]: 41,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.constList([C[10] || CT.C10, C[11] || CT.C11], T._LocationL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[9] || CT.C9,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 41,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/slider_theme.dart"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 8,
        [OffsetBase__dx]: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 5,
        [OffsetBase__dx]: 1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288585374.0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290624957.0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 30,
        [_Location_line]: 43,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 42,
        [_Location_line]: 43,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.constList([C[18] || CT.C18, C[19] || CT.C19], T._LocationL());
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[17] || CT.C17,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 43,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/range_slider_theme.dart"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281348144.0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 32,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 44,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.constList([C[24] || CT.C24, C[25] || CT.C25], T._LocationL());
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[23] || CT.C23,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 104,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/range_selector_theme.dart"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 28,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 40,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.constList([C[28] || CT.C28, C[29] || CT.C29], T._LocationL());
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[27] || CT.C27,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 86,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/pdfviewer_theme.dart"
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 23,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 35,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.constList([C[32] || CT.C32, C[33] || CT.C33], T._LocationL());
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[31] || CT.C31,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 82,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/maps_theme.dart"
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292927712.0
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284572001.0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2141101726
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2145444064
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284612846.0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290479868.0
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2137129198
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 3434841852.0
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285887861.0
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294309365.0
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282532418.0
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 24,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 36,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.constList([C[47] || CT.C47, C[48] || CT.C48], T._LocationL());
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[46] || CT.C46,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 91,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/gauges_theme.dart"
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281545523.0
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292532954.0
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283782485.0
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288256409.0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287137928.0
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291085508.0
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284900966.0
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278233269.0
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282006074.0
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293848814.0
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294341248.0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 34,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 46,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.constList([C[62] || CT.C62, C[63] || CT.C63], T._LocationL());
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[61] || CT.C61,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 84,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/daterangepicker_theme.dart"
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 13,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281570323.0
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 13,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[66] || CT.C66,
        [TextStyle_inherit]: true
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293555711.0
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 13,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[68] || CT.C68,
        [TextStyle_inherit]: true
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 28,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 40,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C70() {
      return C[70] = dart.constList([C[71] || CT.C71, C[72] || CT.C72], T._LocationL());
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[70] || CT.C70,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 42,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/datapager_theme.dart"
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 27,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 39,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.constList([C[75] || CT.C75, C[76] || CT.C76], T._LocationL());
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[74] || CT.C74,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 83,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/datagrid_theme.dart"
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 4
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 3707764736.0
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[79] || CT.C79,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[80] || CT.C80,
        [TextStyle_inherit]: true
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2315255808.0
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: datagrid_theme.DataGridHeaderCellStyle.prototype,
        [DataGridCellStyle_textStyle]: C[78] || CT.C78,
        [DataGridCellStyle_backgroundColor]: C[20] || CT.C20,
        [DataGridHeaderCellStyle_hoverTextStyle]: C[78] || CT.C78,
        [DataGridHeaderCellStyle_hoverColor]: C[43] || CT.C43,
        [DataGridHeaderCellStyle_sortIconColor]: C[81] || CT.C81
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[79] || CT.C79,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[20] || CT.C20,
        [TextStyle_inherit]: true
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280361249.0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2332033023.0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: datagrid_theme.DataGridHeaderCellStyle.prototype,
        [DataGridCellStyle_textStyle]: C[83] || CT.C83,
        [DataGridCellStyle_backgroundColor]: C[84] || CT.C84,
        [DataGridHeaderCellStyle_hoverTextStyle]: C[83] || CT.C83,
        [DataGridHeaderCellStyle_hoverColor]: C[44] || CT.C44,
        [DataGridHeaderCellStyle_sortIconColor]: C[85] || CT.C85
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 3
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[88] || CT.C88,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[80] || CT.C80,
        [TextStyle_inherit]: true
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: datagrid_theme.DataGridCellStyle.prototype,
        [DataGridCellStyle_textStyle]: C[87] || CT.C87,
        [DataGridCellStyle_backgroundColor]: C[20] || CT.C20
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[88] || CT.C88,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[20] || CT.C20,
        [TextStyle_inherit]: true
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: datagrid_theme.DataGridCellStyle.prototype,
        [DataGridCellStyle_textStyle]: C[90] || CT.C90,
        [DataGridCellStyle_backgroundColor]: C[84] || CT.C84
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1107296256
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1124073471
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1526726656
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: datagrid_theme.DataGridCurrentCellStyle.prototype,
        [DataGridCurrentCellStyle_borderWidth]: 1,
        [DataGridCurrentCellStyle_borderColor]: C[94] || CT.C94
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1543503871
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: datagrid_theme.DataGridCurrentCellStyle.prototype,
        [DataGridCurrentCellStyle_borderWidth]: 1,
        [DataGridCurrentCellStyle_borderColor]: C[96] || CT.C96
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1023410176
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1040187391
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[46] || CT.C46,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 91,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/charts_theme.dart"
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285032552.0
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294111986.0
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290098613.0
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284835173.0
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292598747.0
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282796630.0
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293585642.0
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290756543.0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292269782.0
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288059030.0
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281677109.0
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283387727.0
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293256677.0
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 3204450326.0
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 422161378
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1291835705
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280921058.0
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 27,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 39,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.constList([C[120] || CT.C120, C[121] || CT.C121], T._LocationL());
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[119] || CT.C119,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 82,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/calendar_theme.dart"
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 18,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[80] || CT.C80,
        [TextStyle_inherit]: true
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 13,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[80] || CT.C80,
        [TextStyle_inherit]: true
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[88] || CT.C88,
        [TextStyle_fontSize]: 15,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[80] || CT.C80,
        [TextStyle_inherit]: true
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[88] || CT.C88,
        [TextStyle_fontSize]: 11,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: "Roboto",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[80] || CT.C80,
        [TextStyle_inherit]: true
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 26,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 38,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.constList([C[128] || CT.C128, C[129] || CT.C129], T._LocationL());
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[127] || CT.C127,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 97,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/barcodes_theme.dart"
      });
    }
  }, false);
  var C = Array(130).fill(void 0);
  var I = [
    "package:syncfusion_flutter_core/src/theme/theme_widget.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/theme_widget.dart",
    "package:syncfusion_flutter_core/src/theme/slider_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/slider_theme.dart",
    "package:syncfusion_flutter_core/src/theme/range_slider_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/range_slider_theme.dart",
    "package:syncfusion_flutter_core/src/theme/range_selector_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/range_selector_theme.dart",
    "package:syncfusion_flutter_core/src/theme/pdfviewer_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/pdfviewer_theme.dart",
    "package:syncfusion_flutter_core/src/theme/maps_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/maps_theme.dart",
    "package:syncfusion_flutter_core/src/theme/gauges_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/gauges_theme.dart",
    "package:syncfusion_flutter_core/src/theme/daterangepicker_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/daterangepicker_theme.dart",
    "package:syncfusion_flutter_core/src/theme/datapager_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/datapager_theme.dart",
    "package:syncfusion_flutter_core/src/theme/datagrid_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/datagrid_theme.dart",
    "package:syncfusion_flutter_core/src/theme/charts_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/charts_theme.dart",
    "package:syncfusion_flutter_core/src/theme/calendar_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/calendar_theme.dart",
    "package:syncfusion_flutter_core/src/theme/barcodes_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_core-18.4.49/lib/src/theme/barcodes_theme.dart"
  ];
  var child$ = dart.privateName(theme_widget, "SfTheme.child");
  var data$ = dart.privateName(theme_widget, "SfTheme.data");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  theme_widget.SfTheme = class SfTheme extends framework.StatelessWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    static of(context) {
      let t0, t0$;
      let inheritedTheme = context.dependOnInheritedWidgetOfExactType(T._SfInheritedThemeL());
      t0$ = (t0 = inheritedTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme.Theme.of(context).brightness == ui.Brightness.light ? theme_widget.SfThemeData.light() : theme_widget.SfThemeData.dark() : t0$;
    }
    build(context) {
      return new theme_widget._SfInheritedTheme.new({data: this.data, child: this.child, $creationLocationd_0dea112b090073317d4: C[0] || CT.C0});
    }
  };
  (theme_widget.SfTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$] = data;
    this[child$] = child;
    theme_widget.SfTheme.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = theme_widget.SfTheme.prototype;
  dart.addTypeTests(theme_widget.SfTheme);
  dart.addTypeCaches(theme_widget.SfTheme);
  dart.setMethodSignature(theme_widget.SfTheme, () => ({
    __proto__: dart.getMethods(theme_widget.SfTheme.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(theme_widget.SfTheme, I[0]);
  dart.setFieldSignature(theme_widget.SfTheme, () => ({
    __proto__: dart.getFields(theme_widget.SfTheme.__proto__),
    child: dart.finalFieldType(dart.legacy(framework.Widget)),
    data: dart.finalFieldType(dart.legacy(theme_widget.SfThemeData))
  }));
  dart.defineLazy(theme_widget.SfTheme, {
    /*theme_widget.SfTheme._kFallbackTheme*/get _kFallbackTheme() {
      return theme_widget.SfThemeData.fallback();
    }
  }, true);
  var data$0 = dart.privateName(theme_widget, "_SfInheritedTheme.data");
  theme_widget._SfInheritedTheme = class _SfInheritedTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    updateShouldNotify(oldWidget) {
      T._SfInheritedThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T._SfInheritedThemeL());
      return this === ancestorTheme ? child : new theme_widget.SfTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[4] || CT.C4});
    }
  };
  (theme_widget._SfInheritedTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$0] = data;
    theme_widget._SfInheritedTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = theme_widget._SfInheritedTheme.prototype;
  dart.addTypeTests(theme_widget._SfInheritedTheme);
  dart.addTypeCaches(theme_widget._SfInheritedTheme);
  dart.setMethodSignature(theme_widget._SfInheritedTheme, () => ({
    __proto__: dart.getMethods(theme_widget._SfInheritedTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(theme_widget._SfInheritedTheme, I[0]);
  dart.setFieldSignature(theme_widget._SfInheritedTheme, () => ({
    __proto__: dart.getFields(theme_widget._SfInheritedTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(theme_widget.SfThemeData))
  }));
  var brightness$ = dart.privateName(theme_widget, "SfThemeData.brightness");
  var pdfViewerThemeData$ = dart.privateName(theme_widget, "SfThemeData.pdfViewerThemeData");
  var chartThemeData$ = dart.privateName(theme_widget, "SfThemeData.chartThemeData");
  var dataGridThemeData$ = dart.privateName(theme_widget, "SfThemeData.dataGridThemeData");
  var dateRangePickerThemeData$ = dart.privateName(theme_widget, "SfThemeData.dateRangePickerThemeData");
  var calendarThemeData$ = dart.privateName(theme_widget, "SfThemeData.calendarThemeData");
  var barcodeThemeData$ = dart.privateName(theme_widget, "SfThemeData.barcodeThemeData");
  var gaugeThemeData$ = dart.privateName(theme_widget, "SfThemeData.gaugeThemeData");
  var rangeSelectorThemeData$ = dart.privateName(theme_widget, "SfThemeData.rangeSelectorThemeData");
  var rangeSliderThemeData$ = dart.privateName(theme_widget, "SfThemeData.rangeSliderThemeData");
  var sliderThemeData$ = dart.privateName(theme_widget, "SfThemeData.sliderThemeData");
  var mapsThemeData$ = dart.privateName(theme_widget, "SfThemeData.mapsThemeData");
  var dataPagerThemeData$ = dart.privateName(theme_widget, "SfThemeData.dataPagerThemeData");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  theme_widget.SfThemeData = class SfThemeData extends Object_Diagnosticable$36 {
    get brightness() {
      return this[brightness$];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get pdfViewerThemeData() {
      return this[pdfViewerThemeData$];
    }
    set pdfViewerThemeData(value) {
      super.pdfViewerThemeData = value;
    }
    get chartThemeData() {
      return this[chartThemeData$];
    }
    set chartThemeData(value) {
      super.chartThemeData = value;
    }
    get dataGridThemeData() {
      return this[dataGridThemeData$];
    }
    set dataGridThemeData(value) {
      super.dataGridThemeData = value;
    }
    get dateRangePickerThemeData() {
      return this[dateRangePickerThemeData$];
    }
    set dateRangePickerThemeData(value) {
      super.dateRangePickerThemeData = value;
    }
    get calendarThemeData() {
      return this[calendarThemeData$];
    }
    set calendarThemeData(value) {
      super.calendarThemeData = value;
    }
    get barcodeThemeData() {
      return this[barcodeThemeData$];
    }
    set barcodeThemeData(value) {
      super.barcodeThemeData = value;
    }
    get gaugeThemeData() {
      return this[gaugeThemeData$];
    }
    set gaugeThemeData(value) {
      super.gaugeThemeData = value;
    }
    get rangeSelectorThemeData() {
      return this[rangeSelectorThemeData$];
    }
    set rangeSelectorThemeData(value) {
      super.rangeSelectorThemeData = value;
    }
    get rangeSliderThemeData() {
      return this[rangeSliderThemeData$];
    }
    set rangeSliderThemeData(value) {
      super.rangeSliderThemeData = value;
    }
    get sliderThemeData() {
      return this[sliderThemeData$];
    }
    set sliderThemeData(value) {
      super.sliderThemeData = value;
    }
    get mapsThemeData() {
      return this[mapsThemeData$];
    }
    set mapsThemeData(value) {
      super.mapsThemeData = value;
    }
    get dataPagerThemeData() {
      return this[dataPagerThemeData$];
    }
    set dataPagerThemeData(value) {
      super.dataPagerThemeData = value;
    }
    static new(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let pdfViewerThemeData = opts && 'pdfViewerThemeData' in opts ? opts.pdfViewerThemeData : null;
      let chartThemeData = opts && 'chartThemeData' in opts ? opts.chartThemeData : null;
      let calendarThemeData = opts && 'calendarThemeData' in opts ? opts.calendarThemeData : null;
      let dataGridThemeData = opts && 'dataGridThemeData' in opts ? opts.dataGridThemeData : null;
      let dataPagerThemeData = opts && 'dataPagerThemeData' in opts ? opts.dataPagerThemeData : null;
      let dateRangePickerThemeData = opts && 'dateRangePickerThemeData' in opts ? opts.dateRangePickerThemeData : null;
      let barcodeThemeData = opts && 'barcodeThemeData' in opts ? opts.barcodeThemeData : null;
      let gaugeThemeData = opts && 'gaugeThemeData' in opts ? opts.gaugeThemeData : null;
      let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
      let rangeSliderThemeData = opts && 'rangeSliderThemeData' in opts ? opts.rangeSliderThemeData : null;
      let rangeSelectorThemeData = opts && 'rangeSelectorThemeData' in opts ? opts.rangeSelectorThemeData : null;
      let mapsThemeData = opts && 'mapsThemeData' in opts ? opts.mapsThemeData : null;
      brightness == null ? brightness = ui.Brightness.light : null;
      pdfViewerThemeData = (t0 = pdfViewerThemeData, t0 == null ? pdfviewer_theme.SfPdfViewerThemeData.new({brightness: brightness}) : t0);
      chartThemeData = (t0$ = chartThemeData, t0$ == null ? charts_theme.SfChartThemeData.new({brightness: brightness}) : t0$);
      calendarThemeData = (t0$0 = calendarThemeData, t0$0 == null ? calendar_theme.SfCalendarThemeData.new({brightness: brightness}) : t0$0);
      dataGridThemeData = (t0$1 = dataGridThemeData, t0$1 == null ? datagrid_theme.SfDataGridThemeData.new({brightness: brightness}) : t0$1);
      dateRangePickerThemeData = (t0$2 = dateRangePickerThemeData, t0$2 == null ? daterangepicker_theme.SfDateRangePickerThemeData.new({brightness: brightness}) : t0$2);
      barcodeThemeData = (t0$3 = barcodeThemeData, t0$3 == null ? barcodes_theme.SfBarcodeThemeData.new({brightness: brightness}) : t0$3);
      gaugeThemeData = (t0$4 = gaugeThemeData, t0$4 == null ? gauges_theme.SfGaugeThemeData.new({brightness: brightness}) : t0$4);
      sliderThemeData = (t0$5 = sliderThemeData, t0$5 == null ? slider_theme.SfSliderThemeData.new({brightness: brightness}) : t0$5);
      rangeSelectorThemeData = (t0$6 = rangeSelectorThemeData, t0$6 == null ? range_selector_theme.SfRangeSelectorThemeData.new({brightness: brightness}) : t0$6);
      rangeSliderThemeData = (t0$7 = rangeSliderThemeData, t0$7 == null ? range_slider_theme.SfRangeSliderThemeData.new({brightness: brightness}) : t0$7);
      mapsThemeData = (t0$8 = mapsThemeData, t0$8 == null ? maps_theme.SfMapsThemeData.new({brightness: brightness}) : t0$8);
      dataPagerThemeData = (t0$9 = dataPagerThemeData, t0$9 == null ? datapager_theme.SfDataPagerThemeData.new({brightness: brightness}) : t0$9);
      return new theme_widget.SfThemeData.raw({brightness: brightness, pdfViewerThemeData: pdfViewerThemeData, chartThemeData: chartThemeData, calendarThemeData: calendarThemeData, dataGridThemeData: dataGridThemeData, dataPagerThemeData: dataPagerThemeData, dateRangePickerThemeData: dateRangePickerThemeData, barcodeThemeData: barcodeThemeData, gaugeThemeData: gaugeThemeData, sliderThemeData: sliderThemeData, rangeSelectorThemeData: rangeSelectorThemeData, rangeSliderThemeData: rangeSliderThemeData, mapsThemeData: mapsThemeData});
    }
    static light() {
      return theme_widget.SfThemeData.new({brightness: ui.Brightness.light});
    }
    static dark() {
      return theme_widget.SfThemeData.new({brightness: ui.Brightness.dark});
    }
    static fallback() {
      return theme_widget.SfThemeData.light();
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let pdfViewerThemeData = opts && 'pdfViewerThemeData' in opts ? opts.pdfViewerThemeData : null;
      let chartThemeData = opts && 'chartThemeData' in opts ? opts.chartThemeData : null;
      let calendarThemeData = opts && 'calendarThemeData' in opts ? opts.calendarThemeData : null;
      let dataGridThemeData = opts && 'dataGridThemeData' in opts ? opts.dataGridThemeData : null;
      let dateRangePickerThemeData = opts && 'dateRangePickerThemeData' in opts ? opts.dateRangePickerThemeData : null;
      let barcodeThemeData = opts && 'barcodeThemeData' in opts ? opts.barcodeThemeData : null;
      let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
      let rangeSelectorThemeData = opts && 'rangeSelectorThemeData' in opts ? opts.rangeSelectorThemeData : null;
      let rangeSliderThemeData = opts && 'rangeSliderThemeData' in opts ? opts.rangeSliderThemeData : null;
      let mapsThemeData = opts && 'mapsThemeData' in opts ? opts.mapsThemeData : null;
      let dataPagerThemeData = opts && 'dataPagerThemeData' in opts ? opts.dataPagerThemeData : null;
      return new theme_widget.SfThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), pdfViewerThemeData: (t0$ = pdfViewerThemeData, t0$ == null ? this.pdfViewerThemeData : t0$), chartThemeData: (t0$0 = chartThemeData, t0$0 == null ? this.chartThemeData : t0$0), calendarThemeData: (t0$1 = calendarThemeData, t0$1 == null ? this.calendarThemeData : t0$1), dataGridThemeData: (t0$2 = dataGridThemeData, t0$2 == null ? this.dataGridThemeData : t0$2), dataPagerThemeData: (t0$3 = dataPagerThemeData, t0$3 == null ? this.dataPagerThemeData : t0$3), dateRangePickerThemeData: (t0$4 = dateRangePickerThemeData, t0$4 == null ? this.dateRangePickerThemeData : t0$4), barcodeThemeData: (t0$5 = barcodeThemeData, t0$5 == null ? this.barcodeThemeData : t0$5), gaugeThemeData: T.SfGaugeThemeDataL().as((t0$6 = this.gaugeThemeData, t0$6 == null ? this.barcodeThemeData : t0$6)), sliderThemeData: (t0$7 = sliderThemeData, t0$7 == null ? this.sliderThemeData : t0$7), rangeSelectorThemeData: (t0$8 = rangeSelectorThemeData, t0$8 == null ? this.rangeSelectorThemeData : t0$8), rangeSliderThemeData: (t0$9 = rangeSliderThemeData, t0$9 == null ? this.rangeSliderThemeData : t0$9), mapsThemeData: (t0$10 = mapsThemeData, t0$10 == null ? this.mapsThemeData : t0$10)});
    }
    static lerp(a, b, t) {
      if (!(a != null)) dart.assertFailed(null, I[1], 534, 12, "a != null");
      if (!(b != null)) dart.assertFailed(null, I[1], 535, 12, "b != null");
      if (!(t != null)) dart.assertFailed(null, I[1], 536, 12, "t != null");
      return new theme_widget.SfThemeData.raw({brightness: dart.notNull(t) < 0.5 ? a.brightness : b.brightness, pdfViewerThemeData: pdfviewer_theme.SfPdfViewerThemeData.lerp(a.pdfViewerThemeData, b.pdfViewerThemeData, t), chartThemeData: charts_theme.SfChartThemeData.lerp(a.chartThemeData, b.chartThemeData, t), calendarThemeData: calendar_theme.SfCalendarThemeData.lerp(a.calendarThemeData, b.calendarThemeData, t), dataGridThemeData: datagrid_theme.SfDataGridThemeData.lerp(a.dataGridThemeData, b.dataGridThemeData, t), dataPagerThemeData: datapager_theme.SfDataPagerThemeData.lerp(a.dataPagerThemeData, b.dataPagerThemeData, t), dateRangePickerThemeData: daterangepicker_theme.SfDateRangePickerThemeData.lerp(a.dateRangePickerThemeData, b.dateRangePickerThemeData, t), barcodeThemeData: barcodes_theme.SfBarcodeThemeData.lerp(a.barcodeThemeData, b.barcodeThemeData, t), gaugeThemeData: gauges_theme.SfGaugeThemeData.lerp(a.gaugeThemeData, b.gaugeThemeData, t), sliderThemeData: slider_theme.SfSliderThemeData.lerp(a.sliderThemeData, b.sliderThemeData, t), rangeSelectorThemeData: range_selector_theme.SfRangeSelectorThemeData.lerp(a.rangeSelectorThemeData, b.rangeSelectorThemeData, t), rangeSliderThemeData: range_slider_theme.SfRangeSliderThemeData.lerp(a.rangeSliderThemeData, b.rangeSliderThemeData, t), mapsThemeData: maps_theme.SfMapsThemeData.lerp(a.mapsThemeData, b.mapsThemeData, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let otherData = T.SfThemeDataL().as(other);
      return otherData.brightness == this.brightness && dart.equals(otherData.pdfViewerThemeData, this.pdfViewerThemeData) && dart.equals(otherData.chartThemeData, this.chartThemeData) && dart.equals(otherData.calendarThemeData, this.calendarThemeData) && dart.equals(otherData.dataGridThemeData, this.dataGridThemeData) && dart.equals(otherData.dataPagerThemeData, this.dataPagerThemeData) && dart.equals(otherData.dateRangePickerThemeData, this.dateRangePickerThemeData) && dart.equals(otherData.barcodeThemeData, this.barcodeThemeData) && dart.equals(otherData.gaugeThemeData, this.gaugeThemeData) && dart.equals(otherData.sliderThemeData, this.sliderThemeData) && dart.equals(otherData.rangeSelectorThemeData, this.rangeSelectorThemeData) && dart.equals(otherData.rangeSliderThemeData, this.rangeSliderThemeData) && dart.equals(otherData.mapsThemeData, this.mapsThemeData);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.brightness, this.pdfViewerThemeData, this.chartThemeData, this.calendarThemeData, this.dataGridThemeData, this.dataPagerThemeData, this.dateRangePickerThemeData, this.barcodeThemeData, this.gaugeThemeData, this.sliderThemeData, this.rangeSelectorThemeData, this.rangeSliderThemeData, this.mapsThemeData]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = theme_widget.SfThemeData.fallback();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new (T.DiagnosticsPropertyOfSfPdfViewerThemeDataL()).new("pdfViewerThemeData", this.pdfViewerThemeData, {defaultValue: defaultData.pdfViewerThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfChartThemeDataL()).new("chartThemeData", this.chartThemeData, {defaultValue: defaultData.chartThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfCalendarThemeDataL()).new("calendarThemeData", this.calendarThemeData, {defaultValue: defaultData.calendarThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfDataGridThemeDataL()).new("dataGridThemeData", this.dataGridThemeData, {defaultValue: defaultData.dataGridThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfDataPagerThemeDataL()).new("dataPagerThemeData", this.dataPagerThemeData, {defaultValue: defaultData.dataPagerThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfDateRangePickerThemeDataL()).new("dateRangePickerThemeData", this.dateRangePickerThemeData, {defaultValue: defaultData.dateRangePickerThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfBarcodeThemeDataL()).new("barcodeThemeData", this.barcodeThemeData, {defaultValue: defaultData.barcodeThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfGaugeThemeDataL()).new("gaugeThemeData", this.gaugeThemeData, {defaultValue: defaultData.gaugeThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfRangeSelectorThemeDataL()).new("rangeSelectorThemeData", this.rangeSelectorThemeData, {defaultValue: defaultData.rangeSelectorThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfRangeSliderThemeDataL()).new("rangeSliderThemeData", this.rangeSliderThemeData, {defaultValue: defaultData.rangeSliderThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfSliderThemeDataL()).new("sliderThemeData", this.sliderThemeData, {defaultValue: defaultData.sliderThemeData}));
      properties.add(new (T.DiagnosticsPropertyOfSfMapsThemeDataL()).new("mapsThemeData", this.mapsThemeData, {defaultValue: defaultData.mapsThemeData}));
    }
  };
  (theme_widget.SfThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let pdfViewerThemeData = opts && 'pdfViewerThemeData' in opts ? opts.pdfViewerThemeData : null;
    let chartThemeData = opts && 'chartThemeData' in opts ? opts.chartThemeData : null;
    let calendarThemeData = opts && 'calendarThemeData' in opts ? opts.calendarThemeData : null;
    let dataGridThemeData = opts && 'dataGridThemeData' in opts ? opts.dataGridThemeData : null;
    let dateRangePickerThemeData = opts && 'dateRangePickerThemeData' in opts ? opts.dateRangePickerThemeData : null;
    let barcodeThemeData = opts && 'barcodeThemeData' in opts ? opts.barcodeThemeData : null;
    let gaugeThemeData = opts && 'gaugeThemeData' in opts ? opts.gaugeThemeData : null;
    let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
    let rangeSelectorThemeData = opts && 'rangeSelectorThemeData' in opts ? opts.rangeSelectorThemeData : null;
    let rangeSliderThemeData = opts && 'rangeSliderThemeData' in opts ? opts.rangeSliderThemeData : null;
    let mapsThemeData = opts && 'mapsThemeData' in opts ? opts.mapsThemeData : null;
    let dataPagerThemeData = opts && 'dataPagerThemeData' in opts ? opts.dataPagerThemeData : null;
    this[brightness$] = brightness;
    this[pdfViewerThemeData$] = pdfViewerThemeData;
    this[chartThemeData$] = chartThemeData;
    this[calendarThemeData$] = calendarThemeData;
    this[dataGridThemeData$] = dataGridThemeData;
    this[dateRangePickerThemeData$] = dateRangePickerThemeData;
    this[barcodeThemeData$] = barcodeThemeData;
    this[gaugeThemeData$] = gaugeThemeData;
    this[sliderThemeData$] = sliderThemeData;
    this[rangeSelectorThemeData$] = rangeSelectorThemeData;
    this[rangeSliderThemeData$] = rangeSliderThemeData;
    this[mapsThemeData$] = mapsThemeData;
    this[dataPagerThemeData$] = dataPagerThemeData;
    if (!(brightness != null)) dart.assertFailed(null, I[1], 234, 16, "brightness != null");
    if (!(pdfViewerThemeData != null)) dart.assertFailed(null, I[1], 235, 16, "pdfViewerThemeData != null");
    if (!(chartThemeData != null)) dart.assertFailed(null, I[1], 236, 16, "chartThemeData != null");
    if (!(calendarThemeData != null)) dart.assertFailed(null, I[1], 237, 16, "calendarThemeData != null");
    if (!(dateRangePickerThemeData != null)) dart.assertFailed(null, I[1], 238, 16, "dateRangePickerThemeData != null");
    if (!(barcodeThemeData != null)) dart.assertFailed(null, I[1], 239, 16, "barcodeThemeData != null");
    if (!(gaugeThemeData != null)) dart.assertFailed(null, I[1], 240, 16, "gaugeThemeData != null");
    if (!(sliderThemeData != null)) dart.assertFailed(null, I[1], 241, 16, "sliderThemeData != null");
    if (!(rangeSelectorThemeData != null)) dart.assertFailed(null, I[1], 242, 16, "rangeSelectorThemeData != null");
    if (!(rangeSliderThemeData != null)) dart.assertFailed(null, I[1], 243, 16, "rangeSliderThemeData != null");
    if (!(mapsThemeData != null)) dart.assertFailed(null, I[1], 244, 16, "mapsThemeData != null");
    if (!(dataGridThemeData != null)) dart.assertFailed(null, I[1], 245, 16, "dataGridThemeData != null");
    if (!(dataPagerThemeData != null)) dart.assertFailed(null, I[1], 246, 16, "dataPagerThemeData != null");
    ;
  }).prototype = theme_widget.SfThemeData.prototype;
  dart.addTypeTests(theme_widget.SfThemeData);
  dart.addTypeCaches(theme_widget.SfThemeData);
  dart.setMethodSignature(theme_widget.SfThemeData, () => ({
    __proto__: dart.getMethods(theme_widget.SfThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(theme_widget.SfThemeData), [], {barcodeThemeData: dart.legacy(barcodes_theme.SfBarcodeThemeData), brightness: dart.legacy(ui.Brightness), calendarThemeData: dart.legacy(calendar_theme.SfCalendarThemeData), chartThemeData: dart.legacy(charts_theme.SfChartThemeData), dataGridThemeData: dart.legacy(datagrid_theme.SfDataGridThemeData), dataPagerThemeData: dart.legacy(datapager_theme.SfDataPagerThemeData), dateRangePickerThemeData: dart.legacy(daterangepicker_theme.SfDateRangePickerThemeData), mapsThemeData: dart.legacy(maps_theme.SfMapsThemeData), pdfViewerThemeData: dart.legacy(pdfviewer_theme.SfPdfViewerThemeData), rangeSelectorThemeData: dart.legacy(range_selector_theme.SfRangeSelectorThemeData), rangeSliderThemeData: dart.legacy(range_slider_theme.SfRangeSliderThemeData), sliderThemeData: dart.legacy(slider_theme.SfSliderThemeData)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(theme_widget.SfThemeData, () => ({
    __proto__: dart.getGetters(theme_widget.SfThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(theme_widget.SfThemeData, I[0]);
  dart.setFieldSignature(theme_widget.SfThemeData, () => ({
    __proto__: dart.getFields(theme_widget.SfThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    pdfViewerThemeData: dart.finalFieldType(dart.legacy(pdfviewer_theme.SfPdfViewerThemeData)),
    chartThemeData: dart.finalFieldType(dart.legacy(charts_theme.SfChartThemeData)),
    dataGridThemeData: dart.finalFieldType(dart.legacy(datagrid_theme.SfDataGridThemeData)),
    dateRangePickerThemeData: dart.finalFieldType(dart.legacy(daterangepicker_theme.SfDateRangePickerThemeData)),
    calendarThemeData: dart.finalFieldType(dart.legacy(calendar_theme.SfCalendarThemeData)),
    barcodeThemeData: dart.finalFieldType(dart.legacy(barcodes_theme.SfBarcodeThemeData)),
    gaugeThemeData: dart.finalFieldType(dart.legacy(gauges_theme.SfGaugeThemeData)),
    rangeSelectorThemeData: dart.finalFieldType(dart.legacy(range_selector_theme.SfRangeSelectorThemeData)),
    rangeSliderThemeData: dart.finalFieldType(dart.legacy(range_slider_theme.SfRangeSliderThemeData)),
    sliderThemeData: dart.finalFieldType(dart.legacy(slider_theme.SfSliderThemeData)),
    mapsThemeData: dart.finalFieldType(dart.legacy(maps_theme.SfMapsThemeData)),
    dataPagerThemeData: dart.finalFieldType(dart.legacy(datapager_theme.SfDataPagerThemeData))
  }));
  dart.defineExtensionMethods(theme_widget.SfThemeData, ['_equals']);
  dart.defineExtensionAccessors(theme_widget.SfThemeData, ['hashCode']);
  var data$1 = dart.privateName(slider_theme, "SfSliderTheme.data");
  var child$0 = dart.privateName(slider_theme, "SfSliderTheme.child");
  slider_theme.SfSliderTheme = class SfSliderTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$1];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sliderTheme = context.dependOnInheritedWidgetOfExactType(T.SfSliderThemeL());
      t0$ = (t0 = sliderTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).sliderThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfSliderThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfSliderThemeL());
      return this === ancestorTheme ? child : new slider_theme.SfSliderTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[8] || CT.C8});
    }
  };
  (slider_theme.SfSliderTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$1] = data;
    this[child$0] = child;
    slider_theme.SfSliderTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = slider_theme.SfSliderTheme.prototype;
  dart.addTypeTests(slider_theme.SfSliderTheme);
  dart.addTypeCaches(slider_theme.SfSliderTheme);
  dart.setMethodSignature(slider_theme.SfSliderTheme, () => ({
    __proto__: dart.getMethods(slider_theme.SfSliderTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(slider_theme.SfSliderTheme, I[2]);
  dart.setFieldSignature(slider_theme.SfSliderTheme, () => ({
    __proto__: dart.getFields(slider_theme.SfSliderTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(slider_theme.SfSliderThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$0 = dart.privateName(slider_theme, "SfSliderThemeData.brightness");
  var activeTrackHeight$ = dart.privateName(slider_theme, "SfSliderThemeData.activeTrackHeight");
  var inactiveTrackHeight$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveTrackHeight");
  var activeDivisorRadius$ = dart.privateName(slider_theme, "SfSliderThemeData.activeDivisorRadius");
  var inactiveDivisorRadius$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveDivisorRadius");
  var thumbStrokeWidth$ = dart.privateName(slider_theme, "SfSliderThemeData.thumbStrokeWidth");
  var activeDivisorStrokeWidth$ = dart.privateName(slider_theme, "SfSliderThemeData.activeDivisorStrokeWidth");
  var inactiveDivisorStrokeWidth$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveDivisorStrokeWidth");
  var tickSize$ = dart.privateName(slider_theme, "SfSliderThemeData.tickSize");
  var minorTickSize$ = dart.privateName(slider_theme, "SfSliderThemeData.minorTickSize");
  var tickOffset$ = dart.privateName(slider_theme, "SfSliderThemeData.tickOffset");
  var labelOffset$ = dart.privateName(slider_theme, "SfSliderThemeData.labelOffset");
  var inactiveLabelStyle$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveLabelStyle");
  var activeLabelStyle$ = dart.privateName(slider_theme, "SfSliderThemeData.activeLabelStyle");
  var tooltipTextStyle$ = dart.privateName(slider_theme, "SfSliderThemeData.tooltipTextStyle");
  var inactiveTrackColor$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveTrackColor");
  var activeTrackColor$ = dart.privateName(slider_theme, "SfSliderThemeData.activeTrackColor");
  var thumbColor$ = dart.privateName(slider_theme, "SfSliderThemeData.thumbColor");
  var thumbStrokeColor$ = dart.privateName(slider_theme, "SfSliderThemeData.thumbStrokeColor");
  var activeDivisorStrokeColor$ = dart.privateName(slider_theme, "SfSliderThemeData.activeDivisorStrokeColor");
  var inactiveDivisorStrokeColor$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveDivisorStrokeColor");
  var activeTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.activeTickColor");
  var inactiveTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveTickColor");
  var disabledActiveTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledActiveTickColor");
  var disabledInactiveTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledInactiveTickColor");
  var activeMinorTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.activeMinorTickColor");
  var inactiveMinorTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveMinorTickColor");
  var disabledActiveMinorTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledActiveMinorTickColor");
  var disabledInactiveMinorTickColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledInactiveMinorTickColor");
  var overlayColor$ = dart.privateName(slider_theme, "SfSliderThemeData.overlayColor");
  var inactiveDivisorColor$ = dart.privateName(slider_theme, "SfSliderThemeData.inactiveDivisorColor");
  var activeDivisorColor$ = dart.privateName(slider_theme, "SfSliderThemeData.activeDivisorColor");
  var disabledActiveTrackColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledActiveTrackColor");
  var disabledInactiveTrackColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledInactiveTrackColor");
  var disabledActiveDivisorColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledActiveDivisorColor");
  var disabledInactiveDivisorColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledInactiveDivisorColor");
  var disabledThumbColor$ = dart.privateName(slider_theme, "SfSliderThemeData.disabledThumbColor");
  var tooltipBackgroundColor$ = dart.privateName(slider_theme, "SfSliderThemeData.tooltipBackgroundColor");
  var trackCornerRadius$ = dart.privateName(slider_theme, "SfSliderThemeData.trackCornerRadius");
  var overlayRadius$ = dart.privateName(slider_theme, "SfSliderThemeData.overlayRadius");
  var thumbRadius$ = dart.privateName(slider_theme, "SfSliderThemeData.thumbRadius");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var Color_value = dart.privateName(ui, "Color.value");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  slider_theme.SfSliderThemeData = class SfSliderThemeData extends Object_Diagnosticable$36$ {
    get brightness() {
      return this[brightness$0];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get activeTrackHeight() {
      return this[activeTrackHeight$];
    }
    set activeTrackHeight(value) {
      super.activeTrackHeight = value;
    }
    get inactiveTrackHeight() {
      return this[inactiveTrackHeight$];
    }
    set inactiveTrackHeight(value) {
      super.inactiveTrackHeight = value;
    }
    get activeDivisorRadius() {
      return this[activeDivisorRadius$];
    }
    set activeDivisorRadius(value) {
      super.activeDivisorRadius = value;
    }
    get inactiveDivisorRadius() {
      return this[inactiveDivisorRadius$];
    }
    set inactiveDivisorRadius(value) {
      super.inactiveDivisorRadius = value;
    }
    get thumbStrokeWidth() {
      return this[thumbStrokeWidth$];
    }
    set thumbStrokeWidth(value) {
      super.thumbStrokeWidth = value;
    }
    get activeDivisorStrokeWidth() {
      return this[activeDivisorStrokeWidth$];
    }
    set activeDivisorStrokeWidth(value) {
      super.activeDivisorStrokeWidth = value;
    }
    get inactiveDivisorStrokeWidth() {
      return this[inactiveDivisorStrokeWidth$];
    }
    set inactiveDivisorStrokeWidth(value) {
      super.inactiveDivisorStrokeWidth = value;
    }
    get tickSize() {
      return this[tickSize$];
    }
    set tickSize(value) {
      super.tickSize = value;
    }
    get minorTickSize() {
      return this[minorTickSize$];
    }
    set minorTickSize(value) {
      super.minorTickSize = value;
    }
    get tickOffset() {
      return this[tickOffset$];
    }
    set tickOffset(value) {
      super.tickOffset = value;
    }
    get labelOffset() {
      return this[labelOffset$];
    }
    set labelOffset(value) {
      super.labelOffset = value;
    }
    get inactiveLabelStyle() {
      return this[inactiveLabelStyle$];
    }
    set inactiveLabelStyle(value) {
      super.inactiveLabelStyle = value;
    }
    get activeLabelStyle() {
      return this[activeLabelStyle$];
    }
    set activeLabelStyle(value) {
      super.activeLabelStyle = value;
    }
    get tooltipTextStyle() {
      return this[tooltipTextStyle$];
    }
    set tooltipTextStyle(value) {
      super.tooltipTextStyle = value;
    }
    get inactiveTrackColor() {
      return this[inactiveTrackColor$];
    }
    set inactiveTrackColor(value) {
      super.inactiveTrackColor = value;
    }
    get activeTrackColor() {
      return this[activeTrackColor$];
    }
    set activeTrackColor(value) {
      super.activeTrackColor = value;
    }
    get thumbColor() {
      return this[thumbColor$];
    }
    set thumbColor(value) {
      super.thumbColor = value;
    }
    get thumbStrokeColor() {
      return this[thumbStrokeColor$];
    }
    set thumbStrokeColor(value) {
      super.thumbStrokeColor = value;
    }
    get activeDivisorStrokeColor() {
      return this[activeDivisorStrokeColor$];
    }
    set activeDivisorStrokeColor(value) {
      super.activeDivisorStrokeColor = value;
    }
    get inactiveDivisorStrokeColor() {
      return this[inactiveDivisorStrokeColor$];
    }
    set inactiveDivisorStrokeColor(value) {
      super.inactiveDivisorStrokeColor = value;
    }
    get activeTickColor() {
      return this[activeTickColor$];
    }
    set activeTickColor(value) {
      super.activeTickColor = value;
    }
    get inactiveTickColor() {
      return this[inactiveTickColor$];
    }
    set inactiveTickColor(value) {
      super.inactiveTickColor = value;
    }
    get disabledActiveTickColor() {
      return this[disabledActiveTickColor$];
    }
    set disabledActiveTickColor(value) {
      super.disabledActiveTickColor = value;
    }
    get disabledInactiveTickColor() {
      return this[disabledInactiveTickColor$];
    }
    set disabledInactiveTickColor(value) {
      super.disabledInactiveTickColor = value;
    }
    get activeMinorTickColor() {
      return this[activeMinorTickColor$];
    }
    set activeMinorTickColor(value) {
      super.activeMinorTickColor = value;
    }
    get inactiveMinorTickColor() {
      return this[inactiveMinorTickColor$];
    }
    set inactiveMinorTickColor(value) {
      super.inactiveMinorTickColor = value;
    }
    get disabledActiveMinorTickColor() {
      return this[disabledActiveMinorTickColor$];
    }
    set disabledActiveMinorTickColor(value) {
      super.disabledActiveMinorTickColor = value;
    }
    get disabledInactiveMinorTickColor() {
      return this[disabledInactiveMinorTickColor$];
    }
    set disabledInactiveMinorTickColor(value) {
      super.disabledInactiveMinorTickColor = value;
    }
    get overlayColor() {
      return this[overlayColor$];
    }
    set overlayColor(value) {
      super.overlayColor = value;
    }
    get inactiveDivisorColor() {
      return this[inactiveDivisorColor$];
    }
    set inactiveDivisorColor(value) {
      super.inactiveDivisorColor = value;
    }
    get activeDivisorColor() {
      return this[activeDivisorColor$];
    }
    set activeDivisorColor(value) {
      super.activeDivisorColor = value;
    }
    get disabledActiveTrackColor() {
      return this[disabledActiveTrackColor$];
    }
    set disabledActiveTrackColor(value) {
      super.disabledActiveTrackColor = value;
    }
    get disabledInactiveTrackColor() {
      return this[disabledInactiveTrackColor$];
    }
    set disabledInactiveTrackColor(value) {
      super.disabledInactiveTrackColor = value;
    }
    get disabledActiveDivisorColor() {
      return this[disabledActiveDivisorColor$];
    }
    set disabledActiveDivisorColor(value) {
      super.disabledActiveDivisorColor = value;
    }
    get disabledInactiveDivisorColor() {
      return this[disabledInactiveDivisorColor$];
    }
    set disabledInactiveDivisorColor(value) {
      super.disabledInactiveDivisorColor = value;
    }
    get disabledThumbColor() {
      return this[disabledThumbColor$];
    }
    set disabledThumbColor(value) {
      super.disabledThumbColor = value;
    }
    get tooltipBackgroundColor() {
      return this[tooltipBackgroundColor$];
    }
    set tooltipBackgroundColor(value) {
      super.tooltipBackgroundColor = value;
    }
    get trackCornerRadius() {
      return this[trackCornerRadius$];
    }
    set trackCornerRadius(value) {
      super.trackCornerRadius = value;
    }
    get overlayRadius() {
      return this[overlayRadius$];
    }
    set overlayRadius(value) {
      super.overlayRadius = value;
    }
    get thumbRadius() {
      return this[thumbRadius$];
    }
    set thumbRadius(value) {
      super.thumbRadius = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
      let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
      let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
      let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
      let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
      let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
      let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
      let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
      let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
      let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
      let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
      let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
      let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
      let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
      let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
      let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
      let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
      let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
      let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
      let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
      let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
      let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
      let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
      let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
      let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
      let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
      let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
      let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
      let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
      let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
      let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
      let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
      let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
      let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
      let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
      let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      activeTrackHeight == null ? activeTrackHeight = 6.0 : null;
      inactiveTrackHeight == null ? inactiveTrackHeight = 4.0 : null;
      tickSize == null ? tickSize = C[12] || CT.C12 : null;
      minorTickSize == null ? minorTickSize = C[13] || CT.C13 : null;
      overlayRadius == null ? overlayRadius = 24.0 : null;
      thumbRadius == null ? thumbRadius = 10.0 : null;
      activeTickColor == null ? activeTickColor = C[14] || CT.C14 : null;
      inactiveTickColor == null ? inactiveTickColor = C[14] || CT.C14 : null;
      activeMinorTickColor == null ? activeMinorTickColor = C[14] || CT.C14 : null;
      inactiveMinorTickColor == null ? inactiveMinorTickColor = C[14] || CT.C14 : null;
      disabledActiveTickColor == null ? disabledActiveTickColor = C[15] || CT.C15 : null;
      disabledInactiveTickColor == null ? disabledInactiveTickColor = C[15] || CT.C15 : null;
      disabledActiveMinorTickColor == null ? disabledActiveMinorTickColor = C[15] || CT.C15 : null;
      disabledInactiveMinorTickColor == null ? disabledInactiveMinorTickColor = C[15] || CT.C15 : null;
      disabledThumbColor == null ? disabledThumbColor = C[14] || CT.C14 : null;
      return new slider_theme.SfSliderThemeData.raw({brightness: brightness, activeTrackHeight: activeTrackHeight, inactiveTrackHeight: inactiveTrackHeight, tickSize: tickSize, minorTickSize: minorTickSize, tickOffset: tickOffset, labelOffset: labelOffset, inactiveLabelStyle: inactiveLabelStyle, activeLabelStyle: activeLabelStyle, tooltipTextStyle: tooltipTextStyle, inactiveTrackColor: inactiveTrackColor, activeTrackColor: activeTrackColor, inactiveDivisorColor: inactiveDivisorColor, activeDivisorColor: activeDivisorColor, thumbColor: thumbColor, thumbStrokeColor: thumbStrokeColor, activeDivisorStrokeColor: activeDivisorStrokeColor, inactiveDivisorStrokeColor: inactiveDivisorStrokeColor, overlayColor: overlayColor, activeTickColor: activeTickColor, inactiveTickColor: inactiveTickColor, disabledActiveTickColor: disabledActiveTickColor, disabledInactiveTickColor: disabledInactiveTickColor, activeMinorTickColor: activeMinorTickColor, inactiveMinorTickColor: inactiveMinorTickColor, disabledActiveMinorTickColor: disabledActiveMinorTickColor, disabledInactiveMinorTickColor: disabledInactiveMinorTickColor, disabledActiveTrackColor: disabledActiveTrackColor, disabledInactiveTrackColor: disabledInactiveTrackColor, disabledActiveDivisorColor: disabledActiveDivisorColor, disabledInactiveDivisorColor: disabledInactiveDivisorColor, disabledThumbColor: disabledThumbColor, tooltipBackgroundColor: tooltipBackgroundColor, overlayRadius: overlayRadius, thumbRadius: thumbRadius, activeDivisorRadius: activeDivisorRadius, inactiveDivisorRadius: inactiveDivisorRadius, thumbStrokeWidth: thumbStrokeWidth, activeDivisorStrokeWidth: activeDivisorStrokeWidth, inactiveDivisorStrokeWidth: inactiveDivisorStrokeWidth, trackCornerRadius: trackCornerRadius});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21, t0$22, t0$23, t0$24, t0$25, t0$26, t0$27, t0$28, t0$29, t0$30, t0$31, t0$32, t0$33, t0$34, t0$35, t0$36, t0$37, t0$38;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
      let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
      let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
      let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
      let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
      let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
      let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
      let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
      let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
      let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
      let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
      let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
      let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
      let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
      let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
      let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
      let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
      let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
      let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
      let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
      let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
      let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
      let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
      let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
      let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
      let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
      let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
      let activeRegionColor = opts && 'activeRegionColor' in opts ? opts.activeRegionColor : null;
      let inactiveRegionColor = opts && 'inactiveRegionColor' in opts ? opts.inactiveRegionColor : null;
      let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
      let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
      let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
      let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
      let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
      let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
      let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
      let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
      let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
      return new slider_theme.SfSliderThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), activeTrackHeight: (t0$ = activeTrackHeight, t0$ == null ? this.activeTrackHeight : t0$), inactiveTrackHeight: (t0$0 = inactiveTrackHeight, t0$0 == null ? this.inactiveTrackHeight : t0$0), tickSize: (t0$1 = tickSize, t0$1 == null ? this.tickSize : t0$1), minorTickSize: (t0$2 = minorTickSize, t0$2 == null ? this.minorTickSize : t0$2), tickOffset: (t0$3 = tickOffset, t0$3 == null ? this.tickOffset : t0$3), labelOffset: (t0$4 = labelOffset, t0$4 == null ? this.labelOffset : t0$4), inactiveLabelStyle: (t0$5 = inactiveLabelStyle, t0$5 == null ? this.inactiveLabelStyle : t0$5), activeLabelStyle: (t0$6 = activeLabelStyle, t0$6 == null ? this.activeLabelStyle : t0$6), tooltipTextStyle: (t0$7 = tooltipTextStyle, t0$7 == null ? this.tooltipTextStyle : t0$7), inactiveTrackColor: (t0$8 = inactiveTrackColor, t0$8 == null ? this.inactiveTrackColor : t0$8), activeTrackColor: (t0$9 = activeTrackColor, t0$9 == null ? this.activeTrackColor : t0$9), thumbColor: (t0$10 = thumbColor, t0$10 == null ? this.thumbColor : t0$10), thumbStrokeColor: (t0$11 = thumbStrokeColor, t0$11 == null ? this.thumbStrokeColor : t0$11), activeDivisorStrokeColor: (t0$12 = activeDivisorStrokeColor, t0$12 == null ? this.activeDivisorStrokeColor : t0$12), inactiveDivisorStrokeColor: (t0$13 = inactiveDivisorStrokeColor, t0$13 == null ? this.inactiveDivisorStrokeColor : t0$13), activeTickColor: (t0$14 = activeTickColor, t0$14 == null ? this.activeTickColor : t0$14), inactiveTickColor: (t0$15 = inactiveTickColor, t0$15 == null ? this.inactiveTickColor : t0$15), disabledActiveTickColor: (t0$16 = disabledActiveTickColor, t0$16 == null ? this.disabledActiveTickColor : t0$16), disabledInactiveTickColor: (t0$17 = disabledInactiveTickColor, t0$17 == null ? this.disabledInactiveTickColor : t0$17), activeMinorTickColor: (t0$18 = activeMinorTickColor, t0$18 == null ? this.activeMinorTickColor : t0$18), inactiveMinorTickColor: (t0$19 = inactiveMinorTickColor, t0$19 == null ? this.inactiveMinorTickColor : t0$19), disabledActiveMinorTickColor: (t0$20 = disabledActiveMinorTickColor, t0$20 == null ? this.disabledActiveMinorTickColor : t0$20), disabledInactiveMinorTickColor: (t0$21 = disabledInactiveMinorTickColor, t0$21 == null ? this.disabledInactiveMinorTickColor : t0$21), overlayColor: (t0$22 = overlayColor, t0$22 == null ? this.overlayColor : t0$22), inactiveDivisorColor: (t0$23 = inactiveDivisorColor, t0$23 == null ? this.inactiveDivisorColor : t0$23), activeDivisorColor: (t0$24 = activeDivisorColor, t0$24 == null ? this.activeDivisorColor : t0$24), disabledActiveTrackColor: (t0$25 = disabledActiveTrackColor, t0$25 == null ? this.disabledActiveTrackColor : t0$25), disabledInactiveTrackColor: (t0$26 = disabledInactiveTrackColor, t0$26 == null ? this.disabledInactiveTrackColor : t0$26), disabledActiveDivisorColor: (t0$27 = disabledActiveDivisorColor, t0$27 == null ? this.disabledActiveDivisorColor : t0$27), disabledInactiveDivisorColor: (t0$28 = disabledInactiveDivisorColor, t0$28 == null ? this.disabledInactiveDivisorColor : t0$28), disabledThumbColor: (t0$29 = disabledThumbColor, t0$29 == null ? this.disabledThumbColor : t0$29), tooltipBackgroundColor: (t0$30 = tooltipBackgroundColor, t0$30 == null ? this.tooltipBackgroundColor : t0$30), trackCornerRadius: (t0$31 = trackCornerRadius, t0$31 == null ? this.trackCornerRadius : t0$31), overlayRadius: (t0$32 = overlayRadius, t0$32 == null ? this.overlayRadius : t0$32), thumbRadius: (t0$33 = thumbRadius, t0$33 == null ? this.thumbRadius : t0$33), activeDivisorRadius: (t0$34 = activeDivisorRadius, t0$34 == null ? this.activeDivisorRadius : t0$34), inactiveDivisorRadius: (t0$35 = inactiveDivisorRadius, t0$35 == null ? this.inactiveDivisorRadius : t0$35), thumbStrokeWidth: (t0$36 = thumbStrokeWidth, t0$36 == null ? this.thumbStrokeWidth : t0$36), activeDivisorStrokeWidth: (t0$37 = activeDivisorStrokeWidth, t0$37 == null ? this.activeDivisorStrokeWidth : t0$37), inactiveDivisorStrokeWidth: (t0$38 = inactiveDivisorStrokeWidth, t0$38 == null ? this.inactiveDivisorStrokeWidth : t0$38)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[3], 349, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return slider_theme.SfSliderThemeData.new({activeTrackHeight: ui.lerpDouble(a.activeTrackHeight, b.activeTrackHeight, t), inactiveTrackHeight: ui.lerpDouble(a.inactiveTrackHeight, b.inactiveTrackHeight, t), tickSize: ui.Size.lerp(a.tickSize, b.tickSize, t), minorTickSize: ui.Size.lerp(a.minorTickSize, b.minorTickSize, t), tickOffset: ui.Offset.lerp(a.tickOffset, b.tickOffset, t), labelOffset: ui.Offset.lerp(a.labelOffset, b.labelOffset, t), inactiveLabelStyle: text_style.TextStyle.lerp(a.inactiveLabelStyle, b.inactiveLabelStyle, t), activeLabelStyle: text_style.TextStyle.lerp(a.activeLabelStyle, b.activeLabelStyle, t), tooltipTextStyle: text_style.TextStyle.lerp(a.tooltipTextStyle, b.tooltipTextStyle, t), inactiveTrackColor: ui.Color.lerp(a.inactiveTrackColor, b.inactiveTrackColor, t), activeTrackColor: ui.Color.lerp(a.activeTrackColor, b.activeTrackColor, t), thumbColor: ui.Color.lerp(a.thumbColor, b.thumbColor, t), thumbStrokeColor: ui.Color.lerp(a.thumbStrokeColor, b.thumbStrokeColor, t), activeDivisorStrokeColor: ui.Color.lerp(a.activeDivisorStrokeColor, b.activeDivisorStrokeColor, t), inactiveDivisorStrokeColor: ui.Color.lerp(a.inactiveDivisorStrokeColor, b.inactiveDivisorStrokeColor, t), activeTickColor: ui.Color.lerp(a.activeTickColor, b.activeTickColor, t), inactiveTickColor: ui.Color.lerp(a.inactiveTickColor, b.inactiveTickColor, t), disabledActiveTickColor: ui.Color.lerp(a.disabledActiveTickColor, b.disabledActiveTickColor, t), disabledInactiveTickColor: ui.Color.lerp(a.disabledInactiveTickColor, b.disabledInactiveTickColor, t), activeMinorTickColor: ui.Color.lerp(a.activeMinorTickColor, b.activeMinorTickColor, t), inactiveMinorTickColor: ui.Color.lerp(a.inactiveMinorTickColor, b.inactiveMinorTickColor, t), disabledActiveMinorTickColor: ui.Color.lerp(a.disabledActiveMinorTickColor, b.disabledActiveMinorTickColor, t), disabledInactiveMinorTickColor: ui.Color.lerp(a.disabledInactiveMinorTickColor, b.disabledInactiveMinorTickColor, t), overlayColor: ui.Color.lerp(a.overlayColor, b.overlayColor, t), inactiveDivisorColor: ui.Color.lerp(a.inactiveDivisorColor, b.inactiveDivisorColor, t), activeDivisorColor: ui.Color.lerp(a.activeDivisorColor, b.activeDivisorColor, t), disabledActiveTrackColor: ui.Color.lerp(a.disabledActiveTrackColor, b.disabledActiveTrackColor, t), disabledInactiveTrackColor: ui.Color.lerp(a.disabledInactiveTrackColor, b.disabledInactiveTrackColor, t), disabledActiveDivisorColor: ui.Color.lerp(a.disabledActiveDivisorColor, b.disabledActiveDivisorColor, t), disabledInactiveDivisorColor: ui.Color.lerp(a.disabledInactiveDivisorColor, b.disabledInactiveDivisorColor, t), disabledThumbColor: ui.Color.lerp(a.disabledThumbColor, b.disabledThumbColor, t), tooltipBackgroundColor: ui.Color.lerp(a.tooltipBackgroundColor, b.tooltipBackgroundColor, t), trackCornerRadius: ui.lerpDouble(a.trackCornerRadius, b.trackCornerRadius, t), overlayRadius: ui.lerpDouble(a.overlayRadius, b.overlayRadius, t), thumbRadius: ui.lerpDouble(a.thumbRadius, b.thumbRadius, t), activeDivisorRadius: ui.lerpDouble(a.activeDivisorRadius, b.activeDivisorRadius, t), inactiveDivisorRadius: ui.lerpDouble(a.inactiveDivisorRadius, b.inactiveDivisorRadius, t), thumbStrokeWidth: ui.lerpDouble(a.thumbStrokeWidth, b.thumbStrokeWidth, t), activeDivisorStrokeWidth: ui.lerpDouble(a.activeDivisorStrokeWidth, b.activeDivisorStrokeWidth, t), inactiveDivisorStrokeWidth: ui.lerpDouble(a.inactiveDivisorStrokeWidth, b.inactiveDivisorStrokeWidth, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let otherData = T.SfSliderThemeDataL().as(other);
      return otherData.brightness == this.brightness && otherData.activeTrackHeight == this.activeTrackHeight && otherData.inactiveTrackHeight == this.inactiveTrackHeight && dart.equals(otherData.tickSize, this.tickSize) && dart.equals(otherData.minorTickSize, this.minorTickSize) && dart.equals(otherData.tickOffset, this.tickOffset) && dart.equals(otherData.labelOffset, this.labelOffset) && dart.equals(otherData.inactiveLabelStyle, this.inactiveLabelStyle) && dart.equals(otherData.activeLabelStyle, this.activeLabelStyle) && dart.equals(otherData.tooltipTextStyle, this.tooltipTextStyle) && dart.equals(otherData.inactiveTrackColor, this.inactiveTrackColor) && dart.equals(otherData.activeTrackColor, this.activeTrackColor) && dart.equals(otherData.thumbColor, this.thumbColor) && dart.equals(otherData.thumbStrokeColor, this.thumbStrokeColor) && dart.equals(otherData.activeDivisorStrokeColor, this.activeDivisorStrokeColor) && dart.equals(otherData.inactiveDivisorStrokeColor, this.inactiveDivisorStrokeColor) && dart.equals(otherData.activeTickColor, this.activeTickColor) && dart.equals(otherData.inactiveTickColor, this.inactiveTickColor) && dart.equals(otherData.disabledActiveTickColor, this.disabledActiveTickColor) && dart.equals(otherData.disabledInactiveTickColor, this.disabledInactiveTickColor) && dart.equals(otherData.activeMinorTickColor, this.activeMinorTickColor) && dart.equals(otherData.inactiveMinorTickColor, this.inactiveMinorTickColor) && dart.equals(otherData.disabledActiveMinorTickColor, this.disabledActiveMinorTickColor) && dart.equals(otherData.disabledInactiveMinorTickColor, this.disabledInactiveMinorTickColor) && dart.equals(otherData.overlayColor, this.overlayColor) && dart.equals(otherData.inactiveDivisorColor, this.inactiveDivisorColor) && dart.equals(otherData.activeDivisorColor, this.activeDivisorColor) && dart.equals(otherData.disabledActiveTrackColor, this.disabledActiveTrackColor) && dart.equals(otherData.disabledInactiveTrackColor, this.disabledInactiveTrackColor) && dart.equals(otherData.disabledActiveDivisorColor, this.disabledActiveDivisorColor) && dart.equals(otherData.disabledInactiveDivisorColor, this.disabledInactiveDivisorColor) && dart.equals(otherData.disabledThumbColor, this.disabledThumbColor) && dart.equals(otherData.tooltipBackgroundColor, this.tooltipBackgroundColor) && otherData.trackCornerRadius == this.trackCornerRadius && otherData.overlayRadius == this.overlayRadius && otherData.thumbRadius == this.thumbRadius && otherData.activeDivisorRadius == this.activeDivisorRadius && otherData.inactiveDivisorRadius == this.inactiveDivisorRadius && otherData.thumbStrokeWidth == this.thumbStrokeWidth && otherData.activeDivisorStrokeWidth == this.activeDivisorStrokeWidth && otherData.inactiveDivisorStrokeWidth == this.inactiveDivisorStrokeWidth;
    }
    get hashCode() {
      return ui.hashList(T.JSArrayOfObjectL().of([this.brightness, this.activeTrackHeight, this.inactiveTrackHeight, this.tickSize, this.minorTickSize, this.tickOffset, this.labelOffset, this.inactiveLabelStyle, this.activeLabelStyle, this.tooltipTextStyle, this.inactiveTrackColor, this.activeTrackColor, this.thumbColor, this.thumbStrokeColor, this.activeDivisorStrokeColor, this.inactiveDivisorStrokeColor, this.activeTickColor, this.inactiveTickColor, this.disabledActiveTickColor, this.disabledInactiveTickColor, this.activeMinorTickColor, this.inactiveMinorTickColor, this.disabledActiveMinorTickColor, this.disabledInactiveMinorTickColor, this.overlayColor, this.inactiveDivisorColor, this.activeDivisorColor, this.disabledActiveTrackColor, this.disabledInactiveTrackColor, this.disabledActiveDivisorColor, this.disabledInactiveDivisorColor, this.disabledThumbColor, this.tooltipBackgroundColor, this.trackCornerRadius, this.overlayRadius, this.activeDivisorRadius, this.inactiveDivisorRadius, this.thumbRadius, this.thumbStrokeWidth, this.activeDivisorStrokeWidth, this.inactiveDivisorStrokeWidth]));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = slider_theme.SfSliderThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new diagnostics.DoubleProperty.new("activeTrackHeight", this.activeTrackHeight, {defaultValue: defaultData.activeTrackHeight}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveTrackHeight", this.inactiveTrackHeight, {defaultValue: defaultData.inactiveTrackHeight}));
      properties.add(new (T.DiagnosticsPropertyOfSizeL()).new("tickSize", this.tickSize, {defaultValue: defaultData.tickSize}));
      properties.add(new (T.DiagnosticsPropertyOfSizeL()).new("minorTickSize", this.minorTickSize, {defaultValue: defaultData.minorTickSize}));
      properties.add(new (T.DiagnosticsPropertyOfOffsetL()).new("tickOffset", this.tickOffset, {defaultValue: defaultData.tickOffset}));
      properties.add(new (T.DiagnosticsPropertyOfOffsetL()).new("labelOffset", this.labelOffset, {defaultValue: defaultData.labelOffset}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("inactiveLabelStyle", this.inactiveLabelStyle, {defaultValue: defaultData.inactiveLabelStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("activeLabelStyle", this.activeLabelStyle, {defaultValue: defaultData.activeLabelStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("tooltipTextStyle", this.tooltipTextStyle, {defaultValue: defaultData.tooltipTextStyle}));
      properties.add(new colors.ColorProperty.new("inactiveTrackColor", this.inactiveTrackColor, {defaultValue: defaultData.inactiveTrackColor}));
      properties.add(new colors.ColorProperty.new("activeTrackColor", this.activeTrackColor, {defaultValue: defaultData.activeTrackColor}));
      properties.add(new colors.ColorProperty.new("thumbColor", this.thumbColor, {defaultValue: defaultData.thumbColor}));
      properties.add(new colors.ColorProperty.new("thumbStrokeColor", this.thumbStrokeColor, {defaultValue: defaultData.thumbStrokeColor}));
      properties.add(new colors.ColorProperty.new("activeDivisorStrokeColor", this.activeDivisorStrokeColor, {defaultValue: defaultData.activeDivisorStrokeColor}));
      properties.add(new colors.ColorProperty.new("inactiveDivisorStrokeColor", this.inactiveDivisorStrokeColor, {defaultValue: defaultData.inactiveDivisorStrokeColor}));
      properties.add(new colors.ColorProperty.new("activeTickColor", this.activeTickColor, {defaultValue: defaultData.activeTickColor}));
      properties.add(new colors.ColorProperty.new("inactiveTickColor", this.inactiveTickColor, {defaultValue: defaultData.inactiveTickColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveTickColor", this.disabledActiveTickColor, {defaultValue: defaultData.disabledActiveTickColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveTickColor", this.disabledInactiveTickColor, {defaultValue: defaultData.disabledInactiveTickColor}));
      properties.add(new colors.ColorProperty.new("activeMinorTickColor", this.activeMinorTickColor, {defaultValue: defaultData.activeMinorTickColor}));
      properties.add(new colors.ColorProperty.new("inactiveMinorTickColor", this.inactiveMinorTickColor, {defaultValue: defaultData.inactiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveMinorTickColor", this.disabledActiveMinorTickColor, {defaultValue: defaultData.disabledActiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveMinorTickColor", this.disabledInactiveMinorTickColor, {defaultValue: defaultData.disabledInactiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("overlayColor", this.overlayColor, {defaultValue: defaultData.overlayColor}));
      properties.add(new colors.ColorProperty.new("inactiveDivisorColor", this.inactiveDivisorColor, {defaultValue: defaultData.inactiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("activeDivisorColor", this.activeDivisorColor, {defaultValue: defaultData.activeDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveTrackColor", this.disabledActiveTrackColor, {defaultValue: defaultData.disabledActiveTrackColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveTrackColor", this.disabledInactiveTrackColor, {defaultValue: defaultData.disabledInactiveTrackColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveDivisorColor", this.disabledActiveDivisorColor, {defaultValue: defaultData.disabledActiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveDivisorColor", this.disabledInactiveDivisorColor, {defaultValue: defaultData.disabledInactiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledThumbColor", this.disabledThumbColor, {defaultValue: defaultData.disabledThumbColor}));
      properties.add(new colors.ColorProperty.new("tooltipBackgroundColor", this.tooltipBackgroundColor, {defaultValue: defaultData.tooltipBackgroundColor}));
      properties.add(new diagnostics.DoubleProperty.new("trackCornerRadius", this.trackCornerRadius, {defaultValue: defaultData.trackCornerRadius}));
      properties.add(new diagnostics.DoubleProperty.new("overlayRadius", this.overlayRadius, {defaultValue: defaultData.overlayRadius}));
      properties.add(new diagnostics.DoubleProperty.new("thumbRadius", this.thumbRadius, {defaultValue: defaultData.thumbRadius}));
      properties.add(new diagnostics.DoubleProperty.new("activeDivisorRadius", this.activeDivisorRadius, {defaultValue: defaultData.activeDivisorRadius}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveDivisorRadius", this.inactiveDivisorRadius, {defaultValue: defaultData.inactiveDivisorRadius}));
      properties.add(new diagnostics.DoubleProperty.new("thumbStrokeWidth", this.thumbStrokeWidth, {defaultValue: defaultData.thumbStrokeWidth}));
      properties.add(new diagnostics.DoubleProperty.new("activeDivisorStrokeWidth", this.activeDivisorStrokeWidth, {defaultValue: defaultData.activeDivisorStrokeWidth}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveDivisorStrokeWidth", this.inactiveDivisorStrokeWidth, {defaultValue: defaultData.inactiveDivisorStrokeWidth}));
    }
  };
  (slider_theme.SfSliderThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
    let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
    let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
    let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
    let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
    let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
    let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
    let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
    let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
    let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
    let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
    let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
    let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
    let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
    let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
    let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
    let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
    let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
    let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
    let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
    let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
    let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
    let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
    let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
    let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
    let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
    let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
    let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
    let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
    let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
    let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
    let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
    let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
    let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
    let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
    let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
    let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
    this[brightness$0] = brightness;
    this[activeTrackHeight$] = activeTrackHeight;
    this[inactiveTrackHeight$] = inactiveTrackHeight;
    this[tickSize$] = tickSize;
    this[minorTickSize$] = minorTickSize;
    this[tickOffset$] = tickOffset;
    this[labelOffset$] = labelOffset;
    this[inactiveLabelStyle$] = inactiveLabelStyle;
    this[activeLabelStyle$] = activeLabelStyle;
    this[tooltipTextStyle$] = tooltipTextStyle;
    this[inactiveTrackColor$] = inactiveTrackColor;
    this[activeTrackColor$] = activeTrackColor;
    this[thumbColor$] = thumbColor;
    this[thumbStrokeColor$] = thumbStrokeColor;
    this[activeDivisorStrokeColor$] = activeDivisorStrokeColor;
    this[inactiveDivisorStrokeColor$] = inactiveDivisorStrokeColor;
    this[activeTickColor$] = activeTickColor;
    this[inactiveTickColor$] = inactiveTickColor;
    this[disabledActiveTickColor$] = disabledActiveTickColor;
    this[disabledInactiveTickColor$] = disabledInactiveTickColor;
    this[activeMinorTickColor$] = activeMinorTickColor;
    this[inactiveMinorTickColor$] = inactiveMinorTickColor;
    this[disabledActiveMinorTickColor$] = disabledActiveMinorTickColor;
    this[disabledInactiveMinorTickColor$] = disabledInactiveMinorTickColor;
    this[overlayColor$] = overlayColor;
    this[inactiveDivisorColor$] = inactiveDivisorColor;
    this[activeDivisorColor$] = activeDivisorColor;
    this[disabledActiveTrackColor$] = disabledActiveTrackColor;
    this[disabledInactiveTrackColor$] = disabledInactiveTrackColor;
    this[disabledActiveDivisorColor$] = disabledActiveDivisorColor;
    this[disabledInactiveDivisorColor$] = disabledInactiveDivisorColor;
    this[disabledThumbColor$] = disabledThumbColor;
    this[tooltipBackgroundColor$] = tooltipBackgroundColor;
    this[trackCornerRadius$] = trackCornerRadius;
    this[overlayRadius$] = overlayRadius;
    this[thumbRadius$] = thumbRadius;
    this[activeDivisorRadius$] = activeDivisorRadius;
    this[inactiveDivisorRadius$] = inactiveDivisorRadius;
    this[thumbStrokeWidth$] = thumbStrokeWidth;
    this[activeDivisorStrokeWidth$] = activeDivisorStrokeWidth;
    this[inactiveDivisorStrokeWidth$] = inactiveDivisorStrokeWidth;
    ;
  }).prototype = slider_theme.SfSliderThemeData.prototype;
  dart.addTypeTests(slider_theme.SfSliderThemeData);
  dart.addTypeCaches(slider_theme.SfSliderThemeData);
  dart.setMethodSignature(slider_theme.SfSliderThemeData, () => ({
    __proto__: dart.getMethods(slider_theme.SfSliderThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(slider_theme.SfSliderThemeData), [], {activeDivisorColor: dart.legacy(ui.Color), activeDivisorRadius: dart.legacy(core.double), activeDivisorStrokeColor: dart.legacy(ui.Color), activeDivisorStrokeWidth: dart.legacy(core.double), activeLabelStyle: dart.legacy(text_style.TextStyle), activeMinorTickColor: dart.legacy(ui.Color), activeRegionColor: dart.legacy(ui.Color), activeTickColor: dart.legacy(ui.Color), activeTrackColor: dart.legacy(ui.Color), activeTrackHeight: dart.legacy(core.double), brightness: dart.legacy(ui.Brightness), disabledActiveDivisorColor: dart.legacy(ui.Color), disabledActiveMinorTickColor: dart.legacy(ui.Color), disabledActiveTickColor: dart.legacy(ui.Color), disabledActiveTrackColor: dart.legacy(ui.Color), disabledInactiveDivisorColor: dart.legacy(ui.Color), disabledInactiveMinorTickColor: dart.legacy(ui.Color), disabledInactiveTickColor: dart.legacy(ui.Color), disabledInactiveTrackColor: dart.legacy(ui.Color), disabledThumbColor: dart.legacy(ui.Color), inactiveDivisorColor: dart.legacy(ui.Color), inactiveDivisorRadius: dart.legacy(core.double), inactiveDivisorStrokeColor: dart.legacy(ui.Color), inactiveDivisorStrokeWidth: dart.legacy(core.double), inactiveLabelStyle: dart.legacy(text_style.TextStyle), inactiveMinorTickColor: dart.legacy(ui.Color), inactiveRegionColor: dart.legacy(ui.Color), inactiveTickColor: dart.legacy(ui.Color), inactiveTrackColor: dart.legacy(ui.Color), inactiveTrackHeight: dart.legacy(core.double), labelOffset: dart.legacy(ui.Offset), minorTickSize: dart.legacy(ui.Size), overlayColor: dart.legacy(ui.Color), overlayRadius: dart.legacy(core.double), thumbColor: dart.legacy(ui.Color), thumbRadius: dart.legacy(core.double), thumbStrokeColor: dart.legacy(ui.Color), thumbStrokeWidth: dart.legacy(core.double), tickOffset: dart.legacy(ui.Offset), tickSize: dart.legacy(ui.Size), tooltipBackgroundColor: dart.legacy(ui.Color), tooltipTextStyle: dart.legacy(text_style.TextStyle), trackCornerRadius: dart.legacy(core.double)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(slider_theme.SfSliderThemeData, () => ({
    __proto__: dart.getGetters(slider_theme.SfSliderThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(slider_theme.SfSliderThemeData, I[2]);
  dart.setFieldSignature(slider_theme.SfSliderThemeData, () => ({
    __proto__: dart.getFields(slider_theme.SfSliderThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    activeTrackHeight: dart.finalFieldType(dart.legacy(core.double)),
    inactiveTrackHeight: dart.finalFieldType(dart.legacy(core.double)),
    activeDivisorRadius: dart.finalFieldType(dart.legacy(core.double)),
    inactiveDivisorRadius: dart.finalFieldType(dart.legacy(core.double)),
    thumbStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    activeDivisorStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    inactiveDivisorStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    tickSize: dart.finalFieldType(dart.legacy(ui.Size)),
    minorTickSize: dart.finalFieldType(dart.legacy(ui.Size)),
    tickOffset: dart.finalFieldType(dart.legacy(ui.Offset)),
    labelOffset: dart.finalFieldType(dart.legacy(ui.Offset)),
    inactiveLabelStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    activeLabelStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    tooltipTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    inactiveTrackColor: dart.finalFieldType(dart.legacy(ui.Color)),
    activeTrackColor: dart.finalFieldType(dart.legacy(ui.Color)),
    thumbColor: dart.finalFieldType(dart.legacy(ui.Color)),
    thumbStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    activeDivisorStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    inactiveDivisorStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    activeTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    inactiveTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledActiveTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledInactiveTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    activeMinorTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    inactiveMinorTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledActiveMinorTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledInactiveMinorTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    overlayColor: dart.finalFieldType(dart.legacy(ui.Color)),
    inactiveDivisorColor: dart.finalFieldType(dart.legacy(ui.Color)),
    activeDivisorColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledActiveTrackColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledInactiveTrackColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledActiveDivisorColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledInactiveDivisorColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledThumbColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    trackCornerRadius: dart.finalFieldType(dart.legacy(core.double)),
    overlayRadius: dart.finalFieldType(dart.legacy(core.double)),
    thumbRadius: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(slider_theme.SfSliderThemeData, ['_equals']);
  dart.defineExtensionAccessors(slider_theme.SfSliderThemeData, ['hashCode']);
  var data$2 = dart.privateName(range_slider_theme, "SfRangeSliderTheme.data");
  var child$1 = dart.privateName(range_slider_theme, "SfRangeSliderTheme.child");
  range_slider_theme.SfRangeSliderTheme = class SfRangeSliderTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$2];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$1];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let rangeSliderTheme = context.dependOnInheritedWidgetOfExactType(T.SfRangeSliderThemeL());
      t0$ = (t0 = rangeSliderTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).rangeSliderThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfRangeSliderThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfRangeSliderThemeL());
      return this === ancestorTheme ? child : new range_slider_theme.SfRangeSliderTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[16] || CT.C16});
    }
  };
  (range_slider_theme.SfRangeSliderTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$2] = data;
    this[child$1] = child;
    range_slider_theme.SfRangeSliderTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = range_slider_theme.SfRangeSliderTheme.prototype;
  dart.addTypeTests(range_slider_theme.SfRangeSliderTheme);
  dart.addTypeCaches(range_slider_theme.SfRangeSliderTheme);
  dart.setMethodSignature(range_slider_theme.SfRangeSliderTheme, () => ({
    __proto__: dart.getMethods(range_slider_theme.SfRangeSliderTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(range_slider_theme.SfRangeSliderTheme, I[4]);
  dart.setFieldSignature(range_slider_theme.SfRangeSliderTheme, () => ({
    __proto__: dart.getFields(range_slider_theme.SfRangeSliderTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(range_slider_theme.SfRangeSliderThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var overlappingThumbStrokeColor$ = dart.privateName(range_slider_theme, "SfRangeSliderThemeData.overlappingThumbStrokeColor");
  var overlappingTooltipStrokeColor$ = dart.privateName(range_slider_theme, "SfRangeSliderThemeData.overlappingTooltipStrokeColor");
  range_slider_theme.SfRangeSliderThemeData = class SfRangeSliderThemeData extends slider_theme.SfSliderThemeData {
    get overlappingThumbStrokeColor() {
      return this[overlappingThumbStrokeColor$];
    }
    set overlappingThumbStrokeColor(value) {
      super.overlappingThumbStrokeColor = value;
    }
    get overlappingTooltipStrokeColor() {
      return this[overlappingTooltipStrokeColor$];
    }
    set overlappingTooltipStrokeColor(value) {
      super.overlappingTooltipStrokeColor = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
      let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
      let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
      let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
      let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
      let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
      let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
      let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
      let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
      let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
      let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
      let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
      let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
      let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
      let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
      let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
      let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
      let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
      let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
      let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
      let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
      let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
      let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
      let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
      let activeRegionColor = opts && 'activeRegionColor' in opts ? opts.activeRegionColor : null;
      let inactiveRegionColor = opts && 'inactiveRegionColor' in opts ? opts.inactiveRegionColor : null;
      let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
      let overlappingTooltipStrokeColor = opts && 'overlappingTooltipStrokeColor' in opts ? opts.overlappingTooltipStrokeColor : null;
      let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
      let overlappingThumbStrokeColor = opts && 'overlappingThumbStrokeColor' in opts ? opts.overlappingThumbStrokeColor : null;
      let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
      let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
      let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
      let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
      let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
      let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
      let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
      let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
      let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
      let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      activeTrackHeight == null ? activeTrackHeight = 6.0 : null;
      inactiveTrackHeight == null ? inactiveTrackHeight = 4.0 : null;
      tickSize == null ? tickSize = C[12] || CT.C12 : null;
      minorTickSize == null ? minorTickSize = C[13] || CT.C13 : null;
      overlayRadius == null ? overlayRadius = 24.0 : null;
      thumbRadius == null ? thumbRadius = 10.0 : null;
      activeTickColor == null ? activeTickColor = C[14] || CT.C14 : null;
      inactiveTickColor == null ? inactiveTickColor = C[14] || CT.C14 : null;
      activeMinorTickColor == null ? activeMinorTickColor = C[14] || CT.C14 : null;
      inactiveMinorTickColor == null ? inactiveMinorTickColor = C[14] || CT.C14 : null;
      disabledActiveTickColor == null ? disabledActiveTickColor = C[15] || CT.C15 : null;
      disabledInactiveTickColor == null ? disabledInactiveTickColor = C[15] || CT.C15 : null;
      disabledActiveMinorTickColor == null ? disabledActiveMinorTickColor = C[15] || CT.C15 : null;
      disabledInactiveMinorTickColor == null ? disabledInactiveMinorTickColor = C[15] || CT.C15 : null;
      disabledThumbColor == null ? disabledThumbColor = C[14] || CT.C14 : null;
      activeRegionColor == null ? activeRegionColor = isLight ? (C[20] || CT.C20).withOpacity(0.0) : (C[20] || CT.C20).withOpacity(0.0) : null;
      inactiveRegionColor == null ? inactiveRegionColor = isLight ? (C[20] || CT.C20).withOpacity(0.75) : (C[21] || CT.C21).withOpacity(0.75) : null;
      return new range_slider_theme.SfRangeSliderThemeData.raw({brightness: brightness, activeTrackHeight: activeTrackHeight, inactiveTrackHeight: inactiveTrackHeight, tickSize: tickSize, minorTickSize: minorTickSize, tickOffset: tickOffset, labelOffset: labelOffset, inactiveLabelStyle: inactiveLabelStyle, activeLabelStyle: activeLabelStyle, tooltipTextStyle: tooltipTextStyle, inactiveTrackColor: inactiveTrackColor, activeTrackColor: activeTrackColor, inactiveDivisorColor: inactiveDivisorColor, activeDivisorColor: activeDivisorColor, thumbColor: thumbColor, thumbStrokeColor: thumbStrokeColor, overlappingThumbStrokeColor: overlappingThumbStrokeColor, activeDivisorStrokeColor: activeDivisorStrokeColor, inactiveDivisorStrokeColor: inactiveDivisorStrokeColor, overlayColor: overlayColor, activeTickColor: activeTickColor, inactiveTickColor: inactiveTickColor, disabledActiveTickColor: disabledActiveTickColor, disabledInactiveTickColor: disabledInactiveTickColor, activeMinorTickColor: activeMinorTickColor, inactiveMinorTickColor: inactiveMinorTickColor, disabledActiveMinorTickColor: disabledActiveMinorTickColor, disabledInactiveMinorTickColor: disabledInactiveMinorTickColor, disabledActiveTrackColor: disabledActiveTrackColor, disabledInactiveTrackColor: disabledInactiveTrackColor, disabledActiveDivisorColor: disabledActiveDivisorColor, disabledInactiveDivisorColor: disabledInactiveDivisorColor, disabledThumbColor: disabledThumbColor, tooltipBackgroundColor: tooltipBackgroundColor, overlappingTooltipStrokeColor: overlappingTooltipStrokeColor, overlayRadius: overlayRadius, thumbRadius: thumbRadius, activeDivisorRadius: activeDivisorRadius, inactiveDivisorRadius: inactiveDivisorRadius, thumbStrokeWidth: thumbStrokeWidth, activeDivisorStrokeWidth: activeDivisorStrokeWidth, inactiveDivisorStrokeWidth: inactiveDivisorStrokeWidth, trackCornerRadius: trackCornerRadius});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21, t0$22, t0$23, t0$24, t0$25, t0$26, t0$27, t0$28, t0$29, t0$30, t0$31, t0$32, t0$33, t0$34, t0$35, t0$36, t0$37, t0$38, t0$39, t0$40;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
      let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
      let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
      let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
      let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
      let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
      let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
      let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
      let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
      let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
      let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
      let overlappingThumbStrokeColor = opts && 'overlappingThumbStrokeColor' in opts ? opts.overlappingThumbStrokeColor : null;
      let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
      let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
      let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
      let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
      let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
      let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
      let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
      let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
      let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
      let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
      let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
      let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
      let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
      let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
      let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
      let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
      let activeRegionColor = opts && 'activeRegionColor' in opts ? opts.activeRegionColor : null;
      let inactiveRegionColor = opts && 'inactiveRegionColor' in opts ? opts.inactiveRegionColor : null;
      let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
      let overlappingTooltipStrokeColor = opts && 'overlappingTooltipStrokeColor' in opts ? opts.overlappingTooltipStrokeColor : null;
      let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
      let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
      let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
      let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
      let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
      let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
      let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
      let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
      return new range_slider_theme.SfRangeSliderThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), activeTrackHeight: (t0$ = activeTrackHeight, t0$ == null ? this.activeTrackHeight : t0$), inactiveTrackHeight: (t0$0 = inactiveTrackHeight, t0$0 == null ? this.inactiveTrackHeight : t0$0), tickSize: (t0$1 = tickSize, t0$1 == null ? this.tickSize : t0$1), minorTickSize: (t0$2 = minorTickSize, t0$2 == null ? this.minorTickSize : t0$2), tickOffset: (t0$3 = tickOffset, t0$3 == null ? this.tickOffset : t0$3), labelOffset: (t0$4 = labelOffset, t0$4 == null ? this.labelOffset : t0$4), inactiveLabelStyle: (t0$5 = inactiveLabelStyle, t0$5 == null ? this.inactiveLabelStyle : t0$5), activeLabelStyle: (t0$6 = activeLabelStyle, t0$6 == null ? this.activeLabelStyle : t0$6), tooltipTextStyle: (t0$7 = tooltipTextStyle, t0$7 == null ? this.tooltipTextStyle : t0$7), inactiveTrackColor: (t0$8 = inactiveTrackColor, t0$8 == null ? this.inactiveTrackColor : t0$8), activeTrackColor: (t0$9 = activeTrackColor, t0$9 == null ? this.activeTrackColor : t0$9), thumbColor: (t0$10 = thumbColor, t0$10 == null ? this.thumbColor : t0$10), thumbStrokeColor: (t0$11 = thumbStrokeColor, t0$11 == null ? this.thumbStrokeColor : t0$11), overlappingThumbStrokeColor: (t0$12 = overlappingThumbStrokeColor, t0$12 == null ? this.overlappingThumbStrokeColor : t0$12), activeDivisorStrokeColor: (t0$13 = activeDivisorStrokeColor, t0$13 == null ? this.activeDivisorStrokeColor : t0$13), inactiveDivisorStrokeColor: (t0$14 = inactiveDivisorStrokeColor, t0$14 == null ? this.inactiveDivisorStrokeColor : t0$14), activeTickColor: (t0$15 = activeTickColor, t0$15 == null ? this.activeTickColor : t0$15), inactiveTickColor: (t0$16 = inactiveTickColor, t0$16 == null ? this.inactiveTickColor : t0$16), disabledActiveTickColor: (t0$17 = disabledActiveTickColor, t0$17 == null ? this.disabledActiveTickColor : t0$17), disabledInactiveTickColor: (t0$18 = disabledInactiveTickColor, t0$18 == null ? this.disabledInactiveTickColor : t0$18), activeMinorTickColor: (t0$19 = activeMinorTickColor, t0$19 == null ? this.activeMinorTickColor : t0$19), inactiveMinorTickColor: (t0$20 = inactiveMinorTickColor, t0$20 == null ? this.inactiveMinorTickColor : t0$20), disabledActiveMinorTickColor: (t0$21 = disabledActiveMinorTickColor, t0$21 == null ? this.disabledActiveMinorTickColor : t0$21), disabledInactiveMinorTickColor: (t0$22 = disabledInactiveMinorTickColor, t0$22 == null ? this.disabledInactiveMinorTickColor : t0$22), overlayColor: (t0$23 = overlayColor, t0$23 == null ? this.overlayColor : t0$23), inactiveDivisorColor: (t0$24 = inactiveDivisorColor, t0$24 == null ? this.inactiveDivisorColor : t0$24), activeDivisorColor: (t0$25 = activeDivisorColor, t0$25 == null ? this.activeDivisorColor : t0$25), disabledActiveTrackColor: (t0$26 = disabledActiveTrackColor, t0$26 == null ? this.disabledActiveTrackColor : t0$26), disabledInactiveTrackColor: (t0$27 = disabledInactiveTrackColor, t0$27 == null ? this.disabledInactiveTrackColor : t0$27), disabledActiveDivisorColor: (t0$28 = disabledActiveDivisorColor, t0$28 == null ? this.disabledActiveDivisorColor : t0$28), disabledInactiveDivisorColor: (t0$29 = disabledInactiveDivisorColor, t0$29 == null ? this.disabledInactiveDivisorColor : t0$29), disabledThumbColor: (t0$30 = disabledThumbColor, t0$30 == null ? this.disabledThumbColor : t0$30), tooltipBackgroundColor: (t0$31 = tooltipBackgroundColor, t0$31 == null ? this.tooltipBackgroundColor : t0$31), overlappingTooltipStrokeColor: (t0$32 = overlappingTooltipStrokeColor, t0$32 == null ? this.overlappingTooltipStrokeColor : t0$32), trackCornerRadius: (t0$33 = trackCornerRadius, t0$33 == null ? this.trackCornerRadius : t0$33), overlayRadius: (t0$34 = overlayRadius, t0$34 == null ? this.overlayRadius : t0$34), thumbRadius: (t0$35 = thumbRadius, t0$35 == null ? this.thumbRadius : t0$35), activeDivisorRadius: (t0$36 = activeDivisorRadius, t0$36 == null ? this.activeDivisorRadius : t0$36), inactiveDivisorRadius: (t0$37 = inactiveDivisorRadius, t0$37 == null ? this.inactiveDivisorRadius : t0$37), thumbStrokeWidth: (t0$38 = thumbStrokeWidth, t0$38 == null ? this.thumbStrokeWidth : t0$38), activeDivisorStrokeWidth: (t0$39 = activeDivisorStrokeWidth, t0$39 == null ? this.activeDivisorStrokeWidth : t0$39), inactiveDivisorStrokeWidth: (t0$40 = inactiveDivisorStrokeWidth, t0$40 == null ? this.inactiveDivisorStrokeWidth : t0$40)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[5], 480, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return range_slider_theme.SfRangeSliderThemeData.new({activeTrackHeight: ui.lerpDouble(a.activeTrackHeight, b.activeTrackHeight, t), inactiveTrackHeight: ui.lerpDouble(a.inactiveTrackHeight, b.inactiveTrackHeight, t), tickSize: ui.Size.lerp(a.tickSize, b.tickSize, t), minorTickSize: ui.Size.lerp(a.minorTickSize, b.minorTickSize, t), tickOffset: ui.Offset.lerp(a.tickOffset, b.tickOffset, t), labelOffset: ui.Offset.lerp(a.labelOffset, b.labelOffset, t), inactiveLabelStyle: text_style.TextStyle.lerp(a.inactiveLabelStyle, b.inactiveLabelStyle, t), activeLabelStyle: text_style.TextStyle.lerp(a.activeLabelStyle, b.activeLabelStyle, t), tooltipTextStyle: text_style.TextStyle.lerp(a.tooltipTextStyle, b.tooltipTextStyle, t), inactiveTrackColor: ui.Color.lerp(a.inactiveTrackColor, b.inactiveTrackColor, t), activeTrackColor: ui.Color.lerp(a.activeTrackColor, b.activeTrackColor, t), thumbColor: ui.Color.lerp(a.thumbColor, b.thumbColor, t), thumbStrokeColor: ui.Color.lerp(a.thumbStrokeColor, b.thumbStrokeColor, t), overlappingThumbStrokeColor: ui.Color.lerp(a.overlappingThumbStrokeColor, b.overlappingThumbStrokeColor, t), activeDivisorStrokeColor: ui.Color.lerp(a.activeDivisorStrokeColor, b.activeDivisorStrokeColor, t), inactiveDivisorStrokeColor: ui.Color.lerp(a.inactiveDivisorStrokeColor, b.inactiveDivisorStrokeColor, t), activeTickColor: ui.Color.lerp(a.activeTickColor, b.activeTickColor, t), inactiveTickColor: ui.Color.lerp(a.inactiveTickColor, b.inactiveTickColor, t), disabledActiveTickColor: ui.Color.lerp(a.disabledActiveTickColor, b.disabledActiveTickColor, t), disabledInactiveTickColor: ui.Color.lerp(a.disabledInactiveTickColor, b.disabledInactiveTickColor, t), activeMinorTickColor: ui.Color.lerp(a.activeMinorTickColor, b.activeMinorTickColor, t), inactiveMinorTickColor: ui.Color.lerp(a.inactiveMinorTickColor, b.inactiveMinorTickColor, t), disabledActiveMinorTickColor: ui.Color.lerp(a.disabledActiveMinorTickColor, b.disabledActiveMinorTickColor, t), disabledInactiveMinorTickColor: ui.Color.lerp(a.disabledInactiveMinorTickColor, b.disabledInactiveMinorTickColor, t), overlayColor: ui.Color.lerp(a.overlayColor, b.overlayColor, t), inactiveDivisorColor: ui.Color.lerp(a.inactiveDivisorColor, b.inactiveDivisorColor, t), activeDivisorColor: ui.Color.lerp(a.activeDivisorColor, b.activeDivisorColor, t), disabledActiveTrackColor: ui.Color.lerp(a.disabledActiveTrackColor, b.disabledActiveTrackColor, t), disabledInactiveTrackColor: ui.Color.lerp(a.disabledInactiveTrackColor, b.disabledInactiveTrackColor, t), disabledActiveDivisorColor: ui.Color.lerp(a.disabledActiveDivisorColor, b.disabledActiveDivisorColor, t), disabledInactiveDivisorColor: ui.Color.lerp(a.disabledInactiveDivisorColor, b.disabledInactiveDivisorColor, t), disabledThumbColor: ui.Color.lerp(a.disabledThumbColor, b.disabledThumbColor, t), tooltipBackgroundColor: ui.Color.lerp(a.tooltipBackgroundColor, b.tooltipBackgroundColor, t), overlappingTooltipStrokeColor: ui.Color.lerp(a.overlappingTooltipStrokeColor, b.overlappingTooltipStrokeColor, t), trackCornerRadius: ui.lerpDouble(a.trackCornerRadius, b.trackCornerRadius, t), overlayRadius: ui.lerpDouble(a.overlayRadius, b.overlayRadius, t), thumbRadius: ui.lerpDouble(a.thumbRadius, b.thumbRadius, t), activeDivisorRadius: ui.lerpDouble(a.activeDivisorRadius, b.activeDivisorRadius, t), inactiveDivisorRadius: ui.lerpDouble(a.inactiveDivisorRadius, b.inactiveDivisorRadius, t), thumbStrokeWidth: ui.lerpDouble(a.thumbStrokeWidth, b.thumbStrokeWidth, t), activeDivisorStrokeWidth: ui.lerpDouble(a.activeDivisorStrokeWidth, b.activeDivisorStrokeWidth, t), inactiveDivisorStrokeWidth: ui.lerpDouble(a.inactiveDivisorStrokeWidth, b.inactiveDivisorStrokeWidth, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let otherData = T.SfRangeSliderThemeDataL().as(other);
      return otherData.brightness == this.brightness && otherData.activeTrackHeight == this.activeTrackHeight && otherData.inactiveTrackHeight == this.inactiveTrackHeight && dart.equals(otherData.tickSize, this.tickSize) && dart.equals(otherData.minorTickSize, this.minorTickSize) && dart.equals(otherData.tickOffset, this.tickOffset) && dart.equals(otherData.labelOffset, this.labelOffset) && dart.equals(otherData.inactiveLabelStyle, this.inactiveLabelStyle) && dart.equals(otherData.activeLabelStyle, this.activeLabelStyle) && dart.equals(otherData.tooltipTextStyle, this.tooltipTextStyle) && dart.equals(otherData.inactiveTrackColor, this.inactiveTrackColor) && dart.equals(otherData.activeTrackColor, this.activeTrackColor) && dart.equals(otherData.thumbColor, this.thumbColor) && dart.equals(otherData.thumbStrokeColor, this.thumbStrokeColor) && dart.equals(otherData.overlappingThumbStrokeColor, this.overlappingThumbStrokeColor) && dart.equals(otherData.activeDivisorStrokeColor, this.activeDivisorStrokeColor) && dart.equals(otherData.inactiveDivisorStrokeColor, this.inactiveDivisorStrokeColor) && dart.equals(otherData.activeTickColor, this.activeTickColor) && dart.equals(otherData.inactiveTickColor, this.inactiveTickColor) && dart.equals(otherData.disabledActiveTickColor, this.disabledActiveTickColor) && dart.equals(otherData.disabledInactiveTickColor, this.disabledInactiveTickColor) && dart.equals(otherData.activeMinorTickColor, this.activeMinorTickColor) && dart.equals(otherData.inactiveMinorTickColor, this.inactiveMinorTickColor) && dart.equals(otherData.disabledActiveMinorTickColor, this.disabledActiveMinorTickColor) && dart.equals(otherData.disabledInactiveMinorTickColor, this.disabledInactiveMinorTickColor) && dart.equals(otherData.overlayColor, this.overlayColor) && dart.equals(otherData.inactiveDivisorColor, this.inactiveDivisorColor) && dart.equals(otherData.activeDivisorColor, this.activeDivisorColor) && dart.equals(otherData.disabledActiveTrackColor, this.disabledActiveTrackColor) && dart.equals(otherData.disabledInactiveTrackColor, this.disabledInactiveTrackColor) && dart.equals(otherData.disabledActiveDivisorColor, this.disabledActiveDivisorColor) && dart.equals(otherData.disabledInactiveDivisorColor, this.disabledInactiveDivisorColor) && dart.equals(otherData.disabledThumbColor, this.disabledThumbColor) && dart.equals(otherData.tooltipBackgroundColor, this.tooltipBackgroundColor) && dart.equals(otherData.overlappingTooltipStrokeColor, this.overlappingTooltipStrokeColor) && otherData.trackCornerRadius == this.trackCornerRadius && otherData.overlayRadius == this.overlayRadius && otherData.thumbRadius == this.thumbRadius && otherData.activeDivisorRadius == this.activeDivisorRadius && otherData.inactiveDivisorRadius == this.inactiveDivisorRadius && otherData.thumbStrokeWidth == this.thumbStrokeWidth && otherData.activeDivisorStrokeWidth == this.activeDivisorStrokeWidth && otherData.inactiveDivisorStrokeWidth == this.inactiveDivisorStrokeWidth;
    }
    get hashCode() {
      return ui.hashList(T.JSArrayOfObjectL().of([this.brightness, this.activeTrackHeight, this.inactiveTrackHeight, this.tickSize, this.minorTickSize, this.tickOffset, this.labelOffset, this.inactiveLabelStyle, this.activeLabelStyle, this.tooltipTextStyle, this.inactiveTrackColor, this.activeTrackColor, this.thumbColor, this.thumbStrokeColor, this.overlappingThumbStrokeColor, this.activeDivisorStrokeColor, this.inactiveDivisorStrokeColor, this.activeTickColor, this.inactiveTickColor, this.disabledActiveTickColor, this.disabledInactiveTickColor, this.activeMinorTickColor, this.inactiveMinorTickColor, this.disabledActiveMinorTickColor, this.disabledInactiveMinorTickColor, this.overlayColor, this.inactiveDivisorColor, this.activeDivisorColor, this.disabledActiveTrackColor, this.disabledInactiveTrackColor, this.disabledActiveDivisorColor, this.disabledInactiveDivisorColor, this.disabledThumbColor, this.tooltipBackgroundColor, this.overlappingTooltipStrokeColor, this.trackCornerRadius, this.overlayRadius, this.activeDivisorRadius, this.inactiveDivisorRadius, this.thumbRadius, this.thumbStrokeWidth, this.activeDivisorStrokeWidth, this.inactiveDivisorStrokeWidth]));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = range_slider_theme.SfRangeSliderThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new diagnostics.DoubleProperty.new("activeTrackHeight", this.activeTrackHeight, {defaultValue: defaultData.activeTrackHeight}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveTrackHeight", this.inactiveTrackHeight, {defaultValue: defaultData.inactiveTrackHeight}));
      properties.add(new (T.DiagnosticsPropertyOfSizeL()).new("tickSize", this.tickSize, {defaultValue: defaultData.tickSize}));
      properties.add(new (T.DiagnosticsPropertyOfSizeL()).new("minorTickSize", this.minorTickSize, {defaultValue: defaultData.minorTickSize}));
      properties.add(new (T.DiagnosticsPropertyOfOffsetL()).new("tickOffset", this.tickOffset, {defaultValue: defaultData.tickOffset}));
      properties.add(new (T.DiagnosticsPropertyOfOffsetL()).new("labelOffset", this.labelOffset, {defaultValue: defaultData.labelOffset}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("inactiveLabelStyle", this.inactiveLabelStyle, {defaultValue: defaultData.inactiveLabelStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("activeLabelStyle", this.activeLabelStyle, {defaultValue: defaultData.activeLabelStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("tooltipTextStyle", this.tooltipTextStyle, {defaultValue: defaultData.tooltipTextStyle}));
      properties.add(new colors.ColorProperty.new("inactiveTrackColor", this.inactiveTrackColor, {defaultValue: defaultData.inactiveTrackColor}));
      properties.add(new colors.ColorProperty.new("activeTrackColor", this.activeTrackColor, {defaultValue: defaultData.activeTrackColor}));
      properties.add(new colors.ColorProperty.new("thumbColor", this.thumbColor, {defaultValue: defaultData.thumbColor}));
      properties.add(new colors.ColorProperty.new("thumbStrokeColor", this.thumbStrokeColor, {defaultValue: defaultData.thumbStrokeColor}));
      properties.add(new colors.ColorProperty.new("overlappingThumbStrokeColor", this.overlappingThumbStrokeColor, {defaultValue: defaultData.overlappingThumbStrokeColor}));
      properties.add(new colors.ColorProperty.new("activeDivisorStrokeColor", this.activeDivisorStrokeColor, {defaultValue: defaultData.activeDivisorStrokeColor}));
      properties.add(new colors.ColorProperty.new("inactiveDivisorStrokeColor", this.inactiveDivisorStrokeColor, {defaultValue: defaultData.inactiveDivisorStrokeColor}));
      properties.add(new colors.ColorProperty.new("activeTickColor", this.activeTickColor, {defaultValue: defaultData.activeTickColor}));
      properties.add(new colors.ColorProperty.new("inactiveTickColor", this.inactiveTickColor, {defaultValue: defaultData.inactiveTickColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveTickColor", this.disabledActiveTickColor, {defaultValue: defaultData.disabledActiveTickColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveTickColor", this.disabledInactiveTickColor, {defaultValue: defaultData.disabledInactiveTickColor}));
      properties.add(new colors.ColorProperty.new("activeMinorTickColor", this.activeMinorTickColor, {defaultValue: defaultData.activeMinorTickColor}));
      properties.add(new colors.ColorProperty.new("inactiveMinorTickColor", this.inactiveMinorTickColor, {defaultValue: defaultData.inactiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveMinorTickColor", this.disabledActiveMinorTickColor, {defaultValue: defaultData.disabledActiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveMinorTickColor", this.disabledInactiveMinorTickColor, {defaultValue: defaultData.disabledInactiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("overlayColor", this.overlayColor, {defaultValue: defaultData.overlayColor}));
      properties.add(new colors.ColorProperty.new("inactiveDivisorColor", this.inactiveDivisorColor, {defaultValue: defaultData.inactiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("activeDivisorColor", this.activeDivisorColor, {defaultValue: defaultData.activeDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveTrackColor", this.disabledActiveTrackColor, {defaultValue: defaultData.disabledActiveTrackColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveTrackColor", this.disabledInactiveTrackColor, {defaultValue: defaultData.disabledInactiveTrackColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveDivisorColor", this.disabledActiveDivisorColor, {defaultValue: defaultData.disabledActiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveDivisorColor", this.disabledInactiveDivisorColor, {defaultValue: defaultData.disabledInactiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledThumbColor", this.disabledThumbColor, {defaultValue: defaultData.disabledThumbColor}));
      properties.add(new colors.ColorProperty.new("tooltipBackgroundColor", this.tooltipBackgroundColor, {defaultValue: defaultData.tooltipBackgroundColor}));
      properties.add(new colors.ColorProperty.new("overlappingTooltipStrokeColor", this.overlappingTooltipStrokeColor, {defaultValue: defaultData.overlappingTooltipStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("trackCornerRadius", this.trackCornerRadius, {defaultValue: defaultData.trackCornerRadius}));
      properties.add(new diagnostics.DoubleProperty.new("overlayRadius", this.overlayRadius, {defaultValue: defaultData.overlayRadius}));
      properties.add(new diagnostics.DoubleProperty.new("thumbRadius", this.thumbRadius, {defaultValue: defaultData.thumbRadius}));
      properties.add(new diagnostics.DoubleProperty.new("activeDivisorRadius", this.activeDivisorRadius, {defaultValue: defaultData.activeDivisorRadius}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveDivisorRadius", this.inactiveDivisorRadius, {defaultValue: defaultData.inactiveDivisorRadius}));
      properties.add(new diagnostics.DoubleProperty.new("thumbStrokeWidth", this.thumbStrokeWidth, {defaultValue: defaultData.thumbStrokeWidth}));
      properties.add(new diagnostics.DoubleProperty.new("activeDivisorStrokeWidth", this.activeDivisorStrokeWidth, {defaultValue: defaultData.activeDivisorStrokeWidth}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveDivisorStrokeWidth", this.inactiveDivisorStrokeWidth, {defaultValue: defaultData.inactiveDivisorStrokeWidth}));
    }
  };
  (range_slider_theme.SfRangeSliderThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
    let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
    let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
    let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
    let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
    let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
    let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
    let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
    let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
    let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
    let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
    let overlappingThumbStrokeColor = opts && 'overlappingThumbStrokeColor' in opts ? opts.overlappingThumbStrokeColor : null;
    let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
    let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
    let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
    let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
    let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
    let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
    let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
    let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
    let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
    let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
    let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
    let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
    let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
    let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
    let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
    let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
    let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
    let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
    let overlappingTooltipStrokeColor = opts && 'overlappingTooltipStrokeColor' in opts ? opts.overlappingTooltipStrokeColor : null;
    let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
    let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
    let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
    let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
    let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
    let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
    let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
    let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
    this[overlappingThumbStrokeColor$] = overlappingThumbStrokeColor;
    this[overlappingTooltipStrokeColor$] = overlappingTooltipStrokeColor;
    range_slider_theme.SfRangeSliderThemeData.__proto__.raw.call(this, {brightness: brightness, activeTrackHeight: activeTrackHeight, inactiveTrackHeight: inactiveTrackHeight, tickSize: tickSize, minorTickSize: minorTickSize, tickOffset: tickOffset, labelOffset: labelOffset, inactiveLabelStyle: inactiveLabelStyle, activeLabelStyle: activeLabelStyle, tooltipTextStyle: tooltipTextStyle, inactiveTrackColor: inactiveTrackColor, activeTrackColor: activeTrackColor, inactiveDivisorColor: inactiveDivisorColor, activeDivisorColor: activeDivisorColor, thumbColor: thumbColor, thumbStrokeColor: thumbStrokeColor, activeDivisorStrokeColor: activeDivisorStrokeColor, inactiveDivisorStrokeColor: inactiveDivisorStrokeColor, overlayColor: overlayColor, activeTickColor: activeTickColor, inactiveTickColor: inactiveTickColor, disabledActiveTickColor: disabledActiveTickColor, disabledInactiveTickColor: disabledInactiveTickColor, activeMinorTickColor: activeMinorTickColor, inactiveMinorTickColor: inactiveMinorTickColor, disabledActiveMinorTickColor: disabledActiveMinorTickColor, disabledInactiveMinorTickColor: disabledInactiveMinorTickColor, disabledActiveTrackColor: disabledActiveTrackColor, disabledInactiveTrackColor: disabledInactiveTrackColor, disabledActiveDivisorColor: disabledActiveDivisorColor, disabledInactiveDivisorColor: disabledInactiveDivisorColor, disabledThumbColor: disabledThumbColor, tooltipBackgroundColor: tooltipBackgroundColor, overlayRadius: overlayRadius, thumbRadius: thumbRadius, activeDivisorRadius: activeDivisorRadius, inactiveDivisorRadius: inactiveDivisorRadius, thumbStrokeWidth: thumbStrokeWidth, activeDivisorStrokeWidth: activeDivisorStrokeWidth, inactiveDivisorStrokeWidth: inactiveDivisorStrokeWidth, trackCornerRadius: trackCornerRadius});
    ;
  }).prototype = range_slider_theme.SfRangeSliderThemeData.prototype;
  dart.addTypeTests(range_slider_theme.SfRangeSliderThemeData);
  dart.addTypeCaches(range_slider_theme.SfRangeSliderThemeData);
  dart.setMethodSignature(range_slider_theme.SfRangeSliderThemeData, () => ({
    __proto__: dart.getMethods(range_slider_theme.SfRangeSliderThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(range_slider_theme.SfRangeSliderThemeData), [], {activeDivisorColor: dart.legacy(ui.Color), activeDivisorRadius: dart.legacy(core.double), activeDivisorStrokeColor: dart.legacy(ui.Color), activeDivisorStrokeWidth: dart.legacy(core.double), activeLabelStyle: dart.legacy(text_style.TextStyle), activeMinorTickColor: dart.legacy(ui.Color), activeRegionColor: dart.legacy(ui.Color), activeTickColor: dart.legacy(ui.Color), activeTrackColor: dart.legacy(ui.Color), activeTrackHeight: dart.legacy(core.double), brightness: dart.legacy(ui.Brightness), disabledActiveDivisorColor: dart.legacy(ui.Color), disabledActiveMinorTickColor: dart.legacy(ui.Color), disabledActiveTickColor: dart.legacy(ui.Color), disabledActiveTrackColor: dart.legacy(ui.Color), disabledInactiveDivisorColor: dart.legacy(ui.Color), disabledInactiveMinorTickColor: dart.legacy(ui.Color), disabledInactiveTickColor: dart.legacy(ui.Color), disabledInactiveTrackColor: dart.legacy(ui.Color), disabledThumbColor: dart.legacy(ui.Color), inactiveDivisorColor: dart.legacy(ui.Color), inactiveDivisorRadius: dart.legacy(core.double), inactiveDivisorStrokeColor: dart.legacy(ui.Color), inactiveDivisorStrokeWidth: dart.legacy(core.double), inactiveLabelStyle: dart.legacy(text_style.TextStyle), inactiveMinorTickColor: dart.legacy(ui.Color), inactiveRegionColor: dart.legacy(ui.Color), inactiveTickColor: dart.legacy(ui.Color), inactiveTrackColor: dart.legacy(ui.Color), inactiveTrackHeight: dart.legacy(core.double), labelOffset: dart.legacy(ui.Offset), minorTickSize: dart.legacy(ui.Size), overlappingThumbStrokeColor: dart.legacy(ui.Color), overlappingTooltipStrokeColor: dart.legacy(ui.Color), overlayColor: dart.legacy(ui.Color), overlayRadius: dart.legacy(core.double), thumbColor: dart.legacy(ui.Color), thumbRadius: dart.legacy(core.double), thumbStrokeColor: dart.legacy(ui.Color), thumbStrokeWidth: dart.legacy(core.double), tickOffset: dart.legacy(ui.Offset), tickSize: dart.legacy(ui.Size), tooltipBackgroundColor: dart.legacy(ui.Color), tooltipTextStyle: dart.legacy(text_style.TextStyle), trackCornerRadius: dart.legacy(core.double)}, {})
  }));
  dart.setLibraryUri(range_slider_theme.SfRangeSliderThemeData, I[4]);
  dart.setFieldSignature(range_slider_theme.SfRangeSliderThemeData, () => ({
    __proto__: dart.getFields(range_slider_theme.SfRangeSliderThemeData.__proto__),
    overlappingThumbStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    overlappingTooltipStrokeColor: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  dart.defineExtensionMethods(range_slider_theme.SfRangeSliderThemeData, ['_equals']);
  dart.defineExtensionAccessors(range_slider_theme.SfRangeSliderThemeData, ['hashCode']);
  var data$3 = dart.privateName(range_selector_theme, "SfRangeSelectorTheme.data");
  var child$2 = dart.privateName(range_selector_theme, "SfRangeSelectorTheme.child");
  range_selector_theme.SfRangeSelectorTheme = class SfRangeSelectorTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$3];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$2];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let rangeSelectorTheme = context.dependOnInheritedWidgetOfExactType(T.SfRangeSelectorThemeL());
      t0$ = (t0 = rangeSelectorTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).rangeSelectorThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfRangeSelectorThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfRangeSelectorThemeL());
      return this === ancestorTheme ? child : new range_selector_theme.SfRangeSelectorTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[22] || CT.C22});
    }
  };
  (range_selector_theme.SfRangeSelectorTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$3] = data;
    this[child$2] = child;
    range_selector_theme.SfRangeSelectorTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = range_selector_theme.SfRangeSelectorTheme.prototype;
  dart.addTypeTests(range_selector_theme.SfRangeSelectorTheme);
  dart.addTypeCaches(range_selector_theme.SfRangeSelectorTheme);
  dart.setMethodSignature(range_selector_theme.SfRangeSelectorTheme, () => ({
    __proto__: dart.getMethods(range_selector_theme.SfRangeSelectorTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(range_selector_theme.SfRangeSelectorTheme, I[6]);
  dart.setFieldSignature(range_selector_theme.SfRangeSelectorTheme, () => ({
    __proto__: dart.getFields(range_selector_theme.SfRangeSelectorTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(range_selector_theme.SfRangeSelectorThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var activeRegionColor$ = dart.privateName(range_selector_theme, "SfRangeSelectorThemeData.activeRegionColor");
  var inactiveRegionColor$ = dart.privateName(range_selector_theme, "SfRangeSelectorThemeData.inactiveRegionColor");
  range_selector_theme.SfRangeSelectorThemeData = class SfRangeSelectorThemeData extends range_slider_theme.SfRangeSliderThemeData {
    get activeRegionColor() {
      return this[activeRegionColor$];
    }
    set activeRegionColor(value) {
      super.activeRegionColor = value;
    }
    get inactiveRegionColor() {
      return this[inactiveRegionColor$];
    }
    set inactiveRegionColor(value) {
      super.inactiveRegionColor = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
      let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
      let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
      let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
      let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
      let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
      let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
      let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
      let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
      let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
      let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
      let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
      let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
      let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
      let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
      let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
      let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
      let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
      let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
      let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
      let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
      let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
      let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
      let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
      let activeRegionColor = opts && 'activeRegionColor' in opts ? opts.activeRegionColor : null;
      let inactiveRegionColor = opts && 'inactiveRegionColor' in opts ? opts.inactiveRegionColor : null;
      let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
      let overlappingTooltipStrokeColor = opts && 'overlappingTooltipStrokeColor' in opts ? opts.overlappingTooltipStrokeColor : null;
      let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
      let overlappingThumbStrokeColor = opts && 'overlappingThumbStrokeColor' in opts ? opts.overlappingThumbStrokeColor : null;
      let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
      let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
      let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
      let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
      let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
      let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
      let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
      let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
      let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
      let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      activeTrackHeight == null ? activeTrackHeight = 6.0 : null;
      inactiveTrackHeight == null ? inactiveTrackHeight = 4.0 : null;
      tickSize == null ? tickSize = C[12] || CT.C12 : null;
      minorTickSize == null ? minorTickSize = C[13] || CT.C13 : null;
      overlayRadius == null ? overlayRadius = 24.0 : null;
      thumbRadius == null ? thumbRadius = 10.0 : null;
      activeTickColor == null ? activeTickColor = C[14] || CT.C14 : null;
      inactiveTickColor == null ? inactiveTickColor = C[14] || CT.C14 : null;
      activeMinorTickColor == null ? activeMinorTickColor = C[14] || CT.C14 : null;
      inactiveMinorTickColor == null ? inactiveMinorTickColor = C[14] || CT.C14 : null;
      disabledActiveTickColor == null ? disabledActiveTickColor = C[15] || CT.C15 : null;
      disabledInactiveTickColor == null ? disabledInactiveTickColor = C[15] || CT.C15 : null;
      disabledActiveMinorTickColor == null ? disabledActiveMinorTickColor = C[15] || CT.C15 : null;
      disabledInactiveMinorTickColor == null ? disabledInactiveMinorTickColor = C[15] || CT.C15 : null;
      disabledThumbColor == null ? disabledThumbColor = C[14] || CT.C14 : null;
      activeRegionColor == null ? activeRegionColor = isLight ? (C[20] || CT.C20).withOpacity(0.0) : (C[20] || CT.C20).withOpacity(0.0) : null;
      inactiveRegionColor == null ? inactiveRegionColor = isLight ? (C[20] || CT.C20).withOpacity(0.75) : (C[21] || CT.C21).withOpacity(0.75) : null;
      return new range_selector_theme.SfRangeSelectorThemeData.raw({brightness: brightness, activeTrackHeight: activeTrackHeight, inactiveTrackHeight: inactiveTrackHeight, tickSize: tickSize, minorTickSize: minorTickSize, tickOffset: tickOffset, labelOffset: labelOffset, inactiveLabelStyle: inactiveLabelStyle, activeLabelStyle: activeLabelStyle, tooltipTextStyle: tooltipTextStyle, inactiveTrackColor: inactiveTrackColor, activeTrackColor: activeTrackColor, inactiveDivisorColor: inactiveDivisorColor, activeDivisorColor: activeDivisorColor, thumbColor: thumbColor, thumbStrokeColor: thumbStrokeColor, overlappingThumbStrokeColor: overlappingThumbStrokeColor, activeDivisorStrokeColor: activeDivisorStrokeColor, inactiveDivisorStrokeColor: inactiveDivisorStrokeColor, overlayColor: overlayColor, activeTickColor: activeTickColor, inactiveTickColor: inactiveTickColor, disabledActiveTickColor: disabledActiveTickColor, disabledInactiveTickColor: disabledInactiveTickColor, activeMinorTickColor: activeMinorTickColor, inactiveMinorTickColor: inactiveMinorTickColor, disabledActiveMinorTickColor: disabledActiveMinorTickColor, disabledInactiveMinorTickColor: disabledInactiveMinorTickColor, disabledActiveTrackColor: disabledActiveTrackColor, disabledInactiveTrackColor: disabledInactiveTrackColor, disabledActiveDivisorColor: disabledActiveDivisorColor, disabledInactiveDivisorColor: disabledInactiveDivisorColor, disabledThumbColor: disabledThumbColor, activeRegionColor: activeRegionColor, inactiveRegionColor: inactiveRegionColor, tooltipBackgroundColor: tooltipBackgroundColor, overlappingTooltipStrokeColor: overlappingTooltipStrokeColor, overlayRadius: overlayRadius, thumbRadius: thumbRadius, activeDivisorRadius: activeDivisorRadius, inactiveDivisorRadius: inactiveDivisorRadius, thumbStrokeWidth: thumbStrokeWidth, activeDivisorStrokeWidth: activeDivisorStrokeWidth, inactiveDivisorStrokeWidth: inactiveDivisorStrokeWidth, trackCornerRadius: trackCornerRadius});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21, t0$22, t0$23, t0$24, t0$25, t0$26, t0$27, t0$28, t0$29, t0$30, t0$31, t0$32, t0$33, t0$34, t0$35, t0$36, t0$37, t0$38, t0$39, t0$40, t0$41, t0$42;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
      let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
      let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
      let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
      let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
      let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
      let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
      let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
      let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
      let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
      let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
      let overlappingThumbStrokeColor = opts && 'overlappingThumbStrokeColor' in opts ? opts.overlappingThumbStrokeColor : null;
      let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
      let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
      let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
      let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
      let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
      let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
      let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
      let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
      let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
      let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
      let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
      let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
      let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
      let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
      let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
      let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
      let activeRegionColor = opts && 'activeRegionColor' in opts ? opts.activeRegionColor : null;
      let inactiveRegionColor = opts && 'inactiveRegionColor' in opts ? opts.inactiveRegionColor : null;
      let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
      let overlappingTooltipStrokeColor = opts && 'overlappingTooltipStrokeColor' in opts ? opts.overlappingTooltipStrokeColor : null;
      let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
      let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
      let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
      let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
      let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
      let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
      let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
      let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
      return new range_selector_theme.SfRangeSelectorThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), activeTrackHeight: (t0$ = activeTrackHeight, t0$ == null ? this.activeTrackHeight : t0$), inactiveTrackHeight: (t0$0 = inactiveTrackHeight, t0$0 == null ? this.inactiveTrackHeight : t0$0), tickSize: (t0$1 = tickSize, t0$1 == null ? this.tickSize : t0$1), minorTickSize: (t0$2 = minorTickSize, t0$2 == null ? this.minorTickSize : t0$2), tickOffset: (t0$3 = tickOffset, t0$3 == null ? this.tickOffset : t0$3), labelOffset: (t0$4 = labelOffset, t0$4 == null ? this.labelOffset : t0$4), inactiveLabelStyle: (t0$5 = inactiveLabelStyle, t0$5 == null ? this.inactiveLabelStyle : t0$5), activeLabelStyle: (t0$6 = activeLabelStyle, t0$6 == null ? this.activeLabelStyle : t0$6), tooltipTextStyle: (t0$7 = tooltipTextStyle, t0$7 == null ? this.tooltipTextStyle : t0$7), inactiveTrackColor: (t0$8 = inactiveTrackColor, t0$8 == null ? this.inactiveTrackColor : t0$8), activeTrackColor: (t0$9 = activeTrackColor, t0$9 == null ? this.activeTrackColor : t0$9), thumbColor: (t0$10 = thumbColor, t0$10 == null ? this.thumbColor : t0$10), thumbStrokeColor: (t0$11 = thumbStrokeColor, t0$11 == null ? this.thumbStrokeColor : t0$11), overlappingThumbStrokeColor: (t0$12 = overlappingThumbStrokeColor, t0$12 == null ? this.overlappingThumbStrokeColor : t0$12), activeDivisorStrokeColor: (t0$13 = activeDivisorStrokeColor, t0$13 == null ? this.activeDivisorStrokeColor : t0$13), inactiveDivisorStrokeColor: (t0$14 = inactiveDivisorStrokeColor, t0$14 == null ? this.inactiveDivisorStrokeColor : t0$14), activeTickColor: (t0$15 = activeTickColor, t0$15 == null ? this.activeTickColor : t0$15), inactiveTickColor: (t0$16 = inactiveTickColor, t0$16 == null ? this.inactiveTickColor : t0$16), disabledActiveTickColor: (t0$17 = disabledActiveTickColor, t0$17 == null ? this.disabledActiveTickColor : t0$17), disabledInactiveTickColor: (t0$18 = disabledInactiveTickColor, t0$18 == null ? this.disabledInactiveTickColor : t0$18), activeMinorTickColor: (t0$19 = activeMinorTickColor, t0$19 == null ? this.activeMinorTickColor : t0$19), inactiveMinorTickColor: (t0$20 = inactiveMinorTickColor, t0$20 == null ? this.inactiveMinorTickColor : t0$20), disabledActiveMinorTickColor: (t0$21 = disabledActiveMinorTickColor, t0$21 == null ? this.disabledActiveMinorTickColor : t0$21), disabledInactiveMinorTickColor: (t0$22 = disabledInactiveMinorTickColor, t0$22 == null ? this.disabledInactiveMinorTickColor : t0$22), overlayColor: (t0$23 = overlayColor, t0$23 == null ? this.overlayColor : t0$23), inactiveDivisorColor: (t0$24 = inactiveDivisorColor, t0$24 == null ? this.inactiveDivisorColor : t0$24), activeDivisorColor: (t0$25 = activeDivisorColor, t0$25 == null ? this.activeDivisorColor : t0$25), disabledActiveTrackColor: (t0$26 = disabledActiveTrackColor, t0$26 == null ? this.disabledActiveTrackColor : t0$26), disabledInactiveTrackColor: (t0$27 = disabledInactiveTrackColor, t0$27 == null ? this.disabledInactiveTrackColor : t0$27), disabledActiveDivisorColor: (t0$28 = disabledActiveDivisorColor, t0$28 == null ? this.disabledActiveDivisorColor : t0$28), disabledInactiveDivisorColor: (t0$29 = disabledInactiveDivisorColor, t0$29 == null ? this.disabledInactiveDivisorColor : t0$29), disabledThumbColor: (t0$30 = disabledThumbColor, t0$30 == null ? this.disabledThumbColor : t0$30), activeRegionColor: (t0$31 = activeRegionColor, t0$31 == null ? this.activeRegionColor : t0$31), inactiveRegionColor: (t0$32 = inactiveRegionColor, t0$32 == null ? this.inactiveRegionColor : t0$32), tooltipBackgroundColor: (t0$33 = tooltipBackgroundColor, t0$33 == null ? this.tooltipBackgroundColor : t0$33), overlappingTooltipStrokeColor: (t0$34 = overlappingTooltipStrokeColor, t0$34 == null ? this.overlappingTooltipStrokeColor : t0$34), trackCornerRadius: (t0$35 = trackCornerRadius, t0$35 == null ? this.trackCornerRadius : t0$35), overlayRadius: (t0$36 = overlayRadius, t0$36 == null ? this.overlayRadius : t0$36), thumbRadius: (t0$37 = thumbRadius, t0$37 == null ? this.thumbRadius : t0$37), activeDivisorRadius: (t0$38 = activeDivisorRadius, t0$38 == null ? this.activeDivisorRadius : t0$38), inactiveDivisorRadius: (t0$39 = inactiveDivisorRadius, t0$39 == null ? this.inactiveDivisorRadius : t0$39), thumbStrokeWidth: (t0$40 = thumbStrokeWidth, t0$40 == null ? this.thumbStrokeWidth : t0$40), activeDivisorStrokeWidth: (t0$41 = activeDivisorStrokeWidth, t0$41 == null ? this.activeDivisorStrokeWidth : t0$41), inactiveDivisorStrokeWidth: (t0$42 = inactiveDivisorStrokeWidth, t0$42 == null ? this.inactiveDivisorStrokeWidth : t0$42)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[7], 565, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return range_selector_theme.SfRangeSelectorThemeData.new({activeTrackHeight: ui.lerpDouble(a.activeTrackHeight, b.activeTrackHeight, t), inactiveTrackHeight: ui.lerpDouble(a.inactiveTrackHeight, b.inactiveTrackHeight, t), tickSize: ui.Size.lerp(a.tickSize, b.tickSize, t), minorTickSize: ui.Size.lerp(a.minorTickSize, b.minorTickSize, t), tickOffset: ui.Offset.lerp(a.tickOffset, b.tickOffset, t), labelOffset: ui.Offset.lerp(a.labelOffset, b.labelOffset, t), inactiveLabelStyle: text_style.TextStyle.lerp(a.inactiveLabelStyle, b.inactiveLabelStyle, t), activeLabelStyle: text_style.TextStyle.lerp(a.activeLabelStyle, b.activeLabelStyle, t), tooltipTextStyle: text_style.TextStyle.lerp(a.tooltipTextStyle, b.tooltipTextStyle, t), inactiveTrackColor: ui.Color.lerp(a.inactiveTrackColor, b.inactiveTrackColor, t), activeTrackColor: ui.Color.lerp(a.activeTrackColor, b.activeTrackColor, t), thumbColor: ui.Color.lerp(a.thumbColor, b.thumbColor, t), thumbStrokeColor: ui.Color.lerp(a.thumbStrokeColor, b.thumbStrokeColor, t), overlappingThumbStrokeColor: ui.Color.lerp(a.overlappingThumbStrokeColor, b.overlappingThumbStrokeColor, t), activeDivisorStrokeColor: ui.Color.lerp(a.activeDivisorStrokeColor, b.activeDivisorStrokeColor, t), inactiveDivisorStrokeColor: ui.Color.lerp(a.inactiveDivisorStrokeColor, b.inactiveDivisorStrokeColor, t), activeTickColor: ui.Color.lerp(a.activeTickColor, b.activeTickColor, t), inactiveTickColor: ui.Color.lerp(a.inactiveTickColor, b.inactiveTickColor, t), disabledActiveTickColor: ui.Color.lerp(a.disabledActiveTickColor, b.disabledActiveTickColor, t), disabledInactiveTickColor: ui.Color.lerp(a.disabledInactiveTickColor, b.disabledInactiveTickColor, t), activeMinorTickColor: ui.Color.lerp(a.activeMinorTickColor, b.activeMinorTickColor, t), inactiveMinorTickColor: ui.Color.lerp(a.inactiveMinorTickColor, b.inactiveMinorTickColor, t), disabledActiveMinorTickColor: ui.Color.lerp(a.disabledActiveMinorTickColor, b.disabledActiveMinorTickColor, t), disabledInactiveMinorTickColor: ui.Color.lerp(a.disabledInactiveMinorTickColor, b.disabledInactiveMinorTickColor, t), overlayColor: ui.Color.lerp(a.overlayColor, b.overlayColor, t), inactiveDivisorColor: ui.Color.lerp(a.inactiveDivisorColor, b.inactiveDivisorColor, t), activeDivisorColor: ui.Color.lerp(a.activeDivisorColor, b.activeDivisorColor, t), disabledActiveTrackColor: ui.Color.lerp(a.disabledActiveTrackColor, b.disabledActiveTrackColor, t), disabledInactiveTrackColor: ui.Color.lerp(a.disabledInactiveTrackColor, b.disabledInactiveTrackColor, t), disabledActiveDivisorColor: ui.Color.lerp(a.disabledActiveDivisorColor, b.disabledActiveDivisorColor, t), disabledInactiveDivisorColor: ui.Color.lerp(a.disabledInactiveDivisorColor, b.disabledInactiveDivisorColor, t), disabledThumbColor: ui.Color.lerp(a.disabledThumbColor, b.disabledThumbColor, t), activeRegionColor: ui.Color.lerp(a.activeRegionColor, b.activeRegionColor, t), inactiveRegionColor: ui.Color.lerp(a.inactiveRegionColor, b.inactiveRegionColor, t), tooltipBackgroundColor: ui.Color.lerp(a.tooltipBackgroundColor, b.tooltipBackgroundColor, t), overlappingTooltipStrokeColor: ui.Color.lerp(a.overlappingTooltipStrokeColor, b.overlappingTooltipStrokeColor, t), trackCornerRadius: ui.lerpDouble(a.trackCornerRadius, b.trackCornerRadius, t), overlayRadius: ui.lerpDouble(a.overlayRadius, b.overlayRadius, t), thumbRadius: ui.lerpDouble(a.thumbRadius, b.thumbRadius, t), activeDivisorRadius: ui.lerpDouble(a.activeDivisorRadius, b.activeDivisorRadius, t), inactiveDivisorRadius: ui.lerpDouble(a.inactiveDivisorRadius, b.inactiveDivisorRadius, t), thumbStrokeWidth: ui.lerpDouble(a.thumbStrokeWidth, b.thumbStrokeWidth, t), activeDivisorStrokeWidth: ui.lerpDouble(a.activeDivisorStrokeWidth, b.activeDivisorStrokeWidth, t), inactiveDivisorStrokeWidth: ui.lerpDouble(a.inactiveDivisorStrokeWidth, b.inactiveDivisorStrokeWidth, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let otherData = T.SfRangeSelectorThemeDataL().as(other);
      return otherData.brightness == this.brightness && otherData.activeTrackHeight == this.activeTrackHeight && otherData.inactiveTrackHeight == this.inactiveTrackHeight && dart.equals(otherData.tickSize, this.tickSize) && dart.equals(otherData.minorTickSize, this.minorTickSize) && dart.equals(otherData.tickOffset, this.tickOffset) && dart.equals(otherData.labelOffset, this.labelOffset) && dart.equals(otherData.inactiveLabelStyle, this.inactiveLabelStyle) && dart.equals(otherData.activeLabelStyle, this.activeLabelStyle) && dart.equals(otherData.tooltipTextStyle, this.tooltipTextStyle) && dart.equals(otherData.inactiveTrackColor, this.inactiveTrackColor) && dart.equals(otherData.activeTrackColor, this.activeTrackColor) && dart.equals(otherData.thumbColor, this.thumbColor) && dart.equals(otherData.thumbStrokeColor, this.thumbStrokeColor) && dart.equals(otherData.overlappingThumbStrokeColor, this.overlappingThumbStrokeColor) && dart.equals(otherData.activeDivisorStrokeColor, this.activeDivisorStrokeColor) && dart.equals(otherData.inactiveDivisorStrokeColor, this.inactiveDivisorStrokeColor) && dart.equals(otherData.activeTickColor, this.activeTickColor) && dart.equals(otherData.inactiveTickColor, this.inactiveTickColor) && dart.equals(otherData.disabledActiveTickColor, this.disabledActiveTickColor) && dart.equals(otherData.disabledInactiveTickColor, this.disabledInactiveTickColor) && dart.equals(otherData.activeMinorTickColor, this.activeMinorTickColor) && dart.equals(otherData.inactiveMinorTickColor, this.inactiveMinorTickColor) && dart.equals(otherData.disabledActiveMinorTickColor, this.disabledActiveMinorTickColor) && dart.equals(otherData.disabledInactiveMinorTickColor, this.disabledInactiveMinorTickColor) && dart.equals(otherData.overlayColor, this.overlayColor) && dart.equals(otherData.inactiveDivisorColor, this.inactiveDivisorColor) && dart.equals(otherData.activeDivisorColor, this.activeDivisorColor) && dart.equals(otherData.disabledActiveTrackColor, this.disabledActiveTrackColor) && dart.equals(otherData.disabledInactiveTrackColor, this.disabledInactiveTrackColor) && dart.equals(otherData.disabledActiveDivisorColor, this.disabledActiveDivisorColor) && dart.equals(otherData.disabledInactiveDivisorColor, this.disabledInactiveDivisorColor) && dart.equals(otherData.disabledThumbColor, this.disabledThumbColor) && dart.equals(otherData.activeRegionColor, this.activeRegionColor) && dart.equals(otherData.inactiveRegionColor, this.inactiveRegionColor) && dart.equals(otherData.tooltipBackgroundColor, this.tooltipBackgroundColor) && dart.equals(otherData.overlappingTooltipStrokeColor, this.overlappingTooltipStrokeColor) && otherData.trackCornerRadius == this.trackCornerRadius && otherData.overlayRadius == this.overlayRadius && otherData.thumbRadius == this.thumbRadius && otherData.activeDivisorRadius == this.activeDivisorRadius && otherData.inactiveDivisorRadius == this.inactiveDivisorRadius && otherData.thumbStrokeWidth == this.thumbStrokeWidth && otherData.activeDivisorStrokeWidth == this.activeDivisorStrokeWidth && otherData.inactiveDivisorStrokeWidth == this.inactiveDivisorStrokeWidth;
    }
    get hashCode() {
      return ui.hashList(T.JSArrayOfObjectL().of([this.brightness, this.activeTrackHeight, this.inactiveTrackHeight, this.tickSize, this.minorTickSize, this.tickOffset, this.labelOffset, this.inactiveLabelStyle, this.activeLabelStyle, this.tooltipTextStyle, this.inactiveTrackColor, this.activeTrackColor, this.thumbColor, this.thumbStrokeColor, this.overlappingThumbStrokeColor, this.activeDivisorStrokeColor, this.inactiveDivisorStrokeColor, this.activeTickColor, this.inactiveTickColor, this.disabledActiveTickColor, this.disabledInactiveTickColor, this.activeMinorTickColor, this.inactiveMinorTickColor, this.disabledActiveMinorTickColor, this.disabledInactiveMinorTickColor, this.overlayColor, this.inactiveDivisorColor, this.activeDivisorColor, this.disabledActiveTrackColor, this.disabledInactiveTrackColor, this.disabledActiveDivisorColor, this.disabledInactiveDivisorColor, this.disabledThumbColor, this.activeRegionColor, this.inactiveRegionColor, this.tooltipBackgroundColor, this.overlappingTooltipStrokeColor, this.trackCornerRadius, this.overlayRadius, this.activeDivisorRadius, this.inactiveDivisorRadius, this.thumbRadius, this.thumbStrokeWidth, this.activeDivisorStrokeWidth, this.inactiveDivisorStrokeWidth]));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = range_selector_theme.SfRangeSelectorThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new diagnostics.DoubleProperty.new("activeTrackHeight", this.activeTrackHeight, {defaultValue: defaultData.activeTrackHeight}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveTrackHeight", this.inactiveTrackHeight, {defaultValue: defaultData.inactiveTrackHeight}));
      properties.add(new (T.DiagnosticsPropertyOfSizeL()).new("tickSize", this.tickSize, {defaultValue: defaultData.tickSize}));
      properties.add(new (T.DiagnosticsPropertyOfSizeL()).new("minorTickSize", this.minorTickSize, {defaultValue: defaultData.minorTickSize}));
      properties.add(new (T.DiagnosticsPropertyOfOffsetL()).new("tickOffset", this.tickOffset, {defaultValue: defaultData.tickOffset}));
      properties.add(new (T.DiagnosticsPropertyOfOffsetL()).new("labelOffset", this.labelOffset, {defaultValue: defaultData.labelOffset}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("inactiveLabelStyle", this.inactiveLabelStyle, {defaultValue: defaultData.inactiveLabelStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("activeLabelStyle", this.activeLabelStyle, {defaultValue: defaultData.activeLabelStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("tooltipTextStyle", this.tooltipTextStyle, {defaultValue: defaultData.tooltipTextStyle}));
      properties.add(new colors.ColorProperty.new("inactiveTrackColor", this.inactiveTrackColor, {defaultValue: defaultData.inactiveTrackColor}));
      properties.add(new colors.ColorProperty.new("activeTrackColor", this.activeTrackColor, {defaultValue: defaultData.activeTrackColor}));
      properties.add(new colors.ColorProperty.new("thumbColor", this.thumbColor, {defaultValue: defaultData.thumbColor}));
      properties.add(new colors.ColorProperty.new("thumbStrokeColor", this.thumbStrokeColor, {defaultValue: defaultData.thumbStrokeColor}));
      properties.add(new colors.ColorProperty.new("overlappingThumbStrokeColor", this.overlappingThumbStrokeColor, {defaultValue: defaultData.overlappingThumbStrokeColor}));
      properties.add(new colors.ColorProperty.new("activeDivisorStrokeColor", this.activeDivisorStrokeColor, {defaultValue: defaultData.activeDivisorStrokeColor}));
      properties.add(new colors.ColorProperty.new("inactiveDivisorStrokeColor", this.inactiveDivisorStrokeColor, {defaultValue: defaultData.inactiveDivisorStrokeColor}));
      properties.add(new colors.ColorProperty.new("activeTickColor", this.activeTickColor, {defaultValue: defaultData.activeTickColor}));
      properties.add(new colors.ColorProperty.new("inactiveTickColor", this.inactiveTickColor, {defaultValue: defaultData.inactiveTickColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveTickColor", this.disabledActiveTickColor, {defaultValue: defaultData.disabledActiveTickColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveTickColor", this.disabledInactiveTickColor, {defaultValue: defaultData.disabledInactiveTickColor}));
      properties.add(new colors.ColorProperty.new("activeMinorTickColor", this.activeMinorTickColor, {defaultValue: defaultData.activeMinorTickColor}));
      properties.add(new colors.ColorProperty.new("inactiveMinorTickColor", this.inactiveMinorTickColor, {defaultValue: defaultData.inactiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveMinorTickColor", this.disabledActiveMinorTickColor, {defaultValue: defaultData.disabledActiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveMinorTickColor", this.disabledInactiveMinorTickColor, {defaultValue: defaultData.disabledInactiveMinorTickColor}));
      properties.add(new colors.ColorProperty.new("overlayColor", this.overlayColor, {defaultValue: defaultData.overlayColor}));
      properties.add(new colors.ColorProperty.new("inactiveDivisorColor", this.inactiveDivisorColor, {defaultValue: defaultData.inactiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("activeDivisorColor", this.activeDivisorColor, {defaultValue: defaultData.activeDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveTrackColor", this.disabledActiveTrackColor, {defaultValue: defaultData.disabledActiveTrackColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveTrackColor", this.disabledInactiveTrackColor, {defaultValue: defaultData.disabledInactiveTrackColor}));
      properties.add(new colors.ColorProperty.new("disabledActiveDivisorColor", this.disabledActiveDivisorColor, {defaultValue: defaultData.disabledActiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledInactiveDivisorColor", this.disabledInactiveDivisorColor, {defaultValue: defaultData.disabledInactiveDivisorColor}));
      properties.add(new colors.ColorProperty.new("disabledThumbColor", this.disabledThumbColor, {defaultValue: defaultData.disabledThumbColor}));
      properties.add(new colors.ColorProperty.new("activeRegionColor", this.activeRegionColor, {defaultValue: defaultData.activeRegionColor}));
      properties.add(new colors.ColorProperty.new("inactiveRegionColor", this.inactiveRegionColor, {defaultValue: defaultData.inactiveRegionColor}));
      properties.add(new colors.ColorProperty.new("tooltipBackgroundColor", this.tooltipBackgroundColor, {defaultValue: defaultData.tooltipBackgroundColor}));
      properties.add(new colors.ColorProperty.new("overlappingTooltipStrokeColor", this.overlappingTooltipStrokeColor, {defaultValue: defaultData.overlappingTooltipStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("trackCornerRadius", this.trackCornerRadius, {defaultValue: defaultData.trackCornerRadius}));
      properties.add(new diagnostics.DoubleProperty.new("overlayRadius", this.overlayRadius, {defaultValue: defaultData.overlayRadius}));
      properties.add(new diagnostics.DoubleProperty.new("thumbRadius", this.thumbRadius, {defaultValue: defaultData.thumbRadius}));
      properties.add(new diagnostics.DoubleProperty.new("activeDivisorRadius", this.activeDivisorRadius, {defaultValue: defaultData.activeDivisorRadius}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveDivisorRadius", this.inactiveDivisorRadius, {defaultValue: defaultData.inactiveDivisorRadius}));
      properties.add(new diagnostics.DoubleProperty.new("thumbStrokeWidth", this.thumbStrokeWidth, {defaultValue: defaultData.thumbStrokeWidth}));
      properties.add(new diagnostics.DoubleProperty.new("activeDivisorStrokeWidth", this.activeDivisorStrokeWidth, {defaultValue: defaultData.activeDivisorStrokeWidth}));
      properties.add(new diagnostics.DoubleProperty.new("inactiveDivisorStrokeWidth", this.inactiveDivisorStrokeWidth, {defaultValue: defaultData.inactiveDivisorStrokeWidth}));
    }
  };
  (range_selector_theme.SfRangeSelectorThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let activeTrackHeight = opts && 'activeTrackHeight' in opts ? opts.activeTrackHeight : null;
    let inactiveTrackHeight = opts && 'inactiveTrackHeight' in opts ? opts.inactiveTrackHeight : null;
    let tickSize = opts && 'tickSize' in opts ? opts.tickSize : null;
    let minorTickSize = opts && 'minorTickSize' in opts ? opts.minorTickSize : null;
    let tickOffset = opts && 'tickOffset' in opts ? opts.tickOffset : null;
    let labelOffset = opts && 'labelOffset' in opts ? opts.labelOffset : null;
    let inactiveLabelStyle = opts && 'inactiveLabelStyle' in opts ? opts.inactiveLabelStyle : null;
    let activeLabelStyle = opts && 'activeLabelStyle' in opts ? opts.activeLabelStyle : null;
    let tooltipTextStyle = opts && 'tooltipTextStyle' in opts ? opts.tooltipTextStyle : null;
    let inactiveTrackColor = opts && 'inactiveTrackColor' in opts ? opts.inactiveTrackColor : null;
    let activeTrackColor = opts && 'activeTrackColor' in opts ? opts.activeTrackColor : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let thumbStrokeColor = opts && 'thumbStrokeColor' in opts ? opts.thumbStrokeColor : null;
    let overlappingThumbStrokeColor = opts && 'overlappingThumbStrokeColor' in opts ? opts.overlappingThumbStrokeColor : null;
    let activeDivisorStrokeColor = opts && 'activeDivisorStrokeColor' in opts ? opts.activeDivisorStrokeColor : null;
    let inactiveDivisorStrokeColor = opts && 'inactiveDivisorStrokeColor' in opts ? opts.inactiveDivisorStrokeColor : null;
    let activeTickColor = opts && 'activeTickColor' in opts ? opts.activeTickColor : null;
    let inactiveTickColor = opts && 'inactiveTickColor' in opts ? opts.inactiveTickColor : null;
    let disabledActiveTickColor = opts && 'disabledActiveTickColor' in opts ? opts.disabledActiveTickColor : null;
    let disabledInactiveTickColor = opts && 'disabledInactiveTickColor' in opts ? opts.disabledInactiveTickColor : null;
    let activeMinorTickColor = opts && 'activeMinorTickColor' in opts ? opts.activeMinorTickColor : null;
    let inactiveMinorTickColor = opts && 'inactiveMinorTickColor' in opts ? opts.inactiveMinorTickColor : null;
    let disabledActiveMinorTickColor = opts && 'disabledActiveMinorTickColor' in opts ? opts.disabledActiveMinorTickColor : null;
    let disabledInactiveMinorTickColor = opts && 'disabledInactiveMinorTickColor' in opts ? opts.disabledInactiveMinorTickColor : null;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
    let inactiveDivisorColor = opts && 'inactiveDivisorColor' in opts ? opts.inactiveDivisorColor : null;
    let activeDivisorColor = opts && 'activeDivisorColor' in opts ? opts.activeDivisorColor : null;
    let disabledActiveTrackColor = opts && 'disabledActiveTrackColor' in opts ? opts.disabledActiveTrackColor : null;
    let disabledInactiveTrackColor = opts && 'disabledInactiveTrackColor' in opts ? opts.disabledInactiveTrackColor : null;
    let disabledActiveDivisorColor = opts && 'disabledActiveDivisorColor' in opts ? opts.disabledActiveDivisorColor : null;
    let disabledInactiveDivisorColor = opts && 'disabledInactiveDivisorColor' in opts ? opts.disabledInactiveDivisorColor : null;
    let disabledThumbColor = opts && 'disabledThumbColor' in opts ? opts.disabledThumbColor : null;
    let activeRegionColor = opts && 'activeRegionColor' in opts ? opts.activeRegionColor : null;
    let inactiveRegionColor = opts && 'inactiveRegionColor' in opts ? opts.inactiveRegionColor : null;
    let tooltipBackgroundColor = opts && 'tooltipBackgroundColor' in opts ? opts.tooltipBackgroundColor : null;
    let overlappingTooltipStrokeColor = opts && 'overlappingTooltipStrokeColor' in opts ? opts.overlappingTooltipStrokeColor : null;
    let trackCornerRadius = opts && 'trackCornerRadius' in opts ? opts.trackCornerRadius : null;
    let overlayRadius = opts && 'overlayRadius' in opts ? opts.overlayRadius : null;
    let thumbRadius = opts && 'thumbRadius' in opts ? opts.thumbRadius : null;
    let activeDivisorRadius = opts && 'activeDivisorRadius' in opts ? opts.activeDivisorRadius : null;
    let inactiveDivisorRadius = opts && 'inactiveDivisorRadius' in opts ? opts.inactiveDivisorRadius : null;
    let thumbStrokeWidth = opts && 'thumbStrokeWidth' in opts ? opts.thumbStrokeWidth : null;
    let activeDivisorStrokeWidth = opts && 'activeDivisorStrokeWidth' in opts ? opts.activeDivisorStrokeWidth : null;
    let inactiveDivisorStrokeWidth = opts && 'inactiveDivisorStrokeWidth' in opts ? opts.inactiveDivisorStrokeWidth : null;
    this[activeRegionColor$] = activeRegionColor;
    this[inactiveRegionColor$] = inactiveRegionColor;
    range_selector_theme.SfRangeSelectorThemeData.__proto__.raw.call(this, {brightness: brightness, activeTrackHeight: activeTrackHeight, inactiveTrackHeight: inactiveTrackHeight, tickSize: tickSize, minorTickSize: minorTickSize, tickOffset: tickOffset, labelOffset: labelOffset, inactiveLabelStyle: inactiveLabelStyle, activeLabelStyle: activeLabelStyle, tooltipTextStyle: tooltipTextStyle, inactiveTrackColor: inactiveTrackColor, activeTrackColor: activeTrackColor, inactiveDivisorColor: inactiveDivisorColor, activeDivisorColor: activeDivisorColor, thumbColor: thumbColor, thumbStrokeColor: thumbStrokeColor, overlappingThumbStrokeColor: overlappingThumbStrokeColor, activeDivisorStrokeColor: activeDivisorStrokeColor, inactiveDivisorStrokeColor: inactiveDivisorStrokeColor, overlayColor: overlayColor, activeTickColor: activeTickColor, inactiveTickColor: inactiveTickColor, disabledActiveTickColor: disabledActiveTickColor, disabledInactiveTickColor: disabledInactiveTickColor, activeMinorTickColor: activeMinorTickColor, inactiveMinorTickColor: inactiveMinorTickColor, disabledActiveMinorTickColor: disabledActiveMinorTickColor, disabledInactiveMinorTickColor: disabledInactiveMinorTickColor, disabledActiveTrackColor: disabledActiveTrackColor, disabledInactiveTrackColor: disabledInactiveTrackColor, disabledActiveDivisorColor: disabledActiveDivisorColor, disabledInactiveDivisorColor: disabledInactiveDivisorColor, disabledThumbColor: disabledThumbColor, tooltipBackgroundColor: tooltipBackgroundColor, overlappingTooltipStrokeColor: overlappingTooltipStrokeColor, overlayRadius: overlayRadius, thumbRadius: thumbRadius, activeDivisorRadius: activeDivisorRadius, inactiveDivisorRadius: inactiveDivisorRadius, thumbStrokeWidth: thumbStrokeWidth, activeDivisorStrokeWidth: activeDivisorStrokeWidth, inactiveDivisorStrokeWidth: inactiveDivisorStrokeWidth, trackCornerRadius: trackCornerRadius});
    ;
  }).prototype = range_selector_theme.SfRangeSelectorThemeData.prototype;
  dart.addTypeTests(range_selector_theme.SfRangeSelectorThemeData);
  dart.addTypeCaches(range_selector_theme.SfRangeSelectorThemeData);
  dart.setMethodSignature(range_selector_theme.SfRangeSelectorThemeData, () => ({
    __proto__: dart.getMethods(range_selector_theme.SfRangeSelectorThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(range_selector_theme.SfRangeSelectorThemeData), [], {activeDivisorColor: dart.legacy(ui.Color), activeDivisorRadius: dart.legacy(core.double), activeDivisorStrokeColor: dart.legacy(ui.Color), activeDivisorStrokeWidth: dart.legacy(core.double), activeLabelStyle: dart.legacy(text_style.TextStyle), activeMinorTickColor: dart.legacy(ui.Color), activeRegionColor: dart.legacy(ui.Color), activeTickColor: dart.legacy(ui.Color), activeTrackColor: dart.legacy(ui.Color), activeTrackHeight: dart.legacy(core.double), brightness: dart.legacy(ui.Brightness), disabledActiveDivisorColor: dart.legacy(ui.Color), disabledActiveMinorTickColor: dart.legacy(ui.Color), disabledActiveTickColor: dart.legacy(ui.Color), disabledActiveTrackColor: dart.legacy(ui.Color), disabledInactiveDivisorColor: dart.legacy(ui.Color), disabledInactiveMinorTickColor: dart.legacy(ui.Color), disabledInactiveTickColor: dart.legacy(ui.Color), disabledInactiveTrackColor: dart.legacy(ui.Color), disabledThumbColor: dart.legacy(ui.Color), inactiveDivisorColor: dart.legacy(ui.Color), inactiveDivisorRadius: dart.legacy(core.double), inactiveDivisorStrokeColor: dart.legacy(ui.Color), inactiveDivisorStrokeWidth: dart.legacy(core.double), inactiveLabelStyle: dart.legacy(text_style.TextStyle), inactiveMinorTickColor: dart.legacy(ui.Color), inactiveRegionColor: dart.legacy(ui.Color), inactiveTickColor: dart.legacy(ui.Color), inactiveTrackColor: dart.legacy(ui.Color), inactiveTrackHeight: dart.legacy(core.double), labelOffset: dart.legacy(ui.Offset), minorTickSize: dart.legacy(ui.Size), overlappingThumbStrokeColor: dart.legacy(ui.Color), overlappingTooltipStrokeColor: dart.legacy(ui.Color), overlayColor: dart.legacy(ui.Color), overlayRadius: dart.legacy(core.double), thumbColor: dart.legacy(ui.Color), thumbRadius: dart.legacy(core.double), thumbStrokeColor: dart.legacy(ui.Color), thumbStrokeWidth: dart.legacy(core.double), tickOffset: dart.legacy(ui.Offset), tickSize: dart.legacy(ui.Size), tooltipBackgroundColor: dart.legacy(ui.Color), tooltipTextStyle: dart.legacy(text_style.TextStyle), trackCornerRadius: dart.legacy(core.double)}, {})
  }));
  dart.setLibraryUri(range_selector_theme.SfRangeSelectorThemeData, I[6]);
  dart.setFieldSignature(range_selector_theme.SfRangeSelectorThemeData, () => ({
    __proto__: dart.getFields(range_selector_theme.SfRangeSelectorThemeData.__proto__),
    activeRegionColor: dart.finalFieldType(dart.legacy(ui.Color)),
    inactiveRegionColor: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  dart.defineExtensionMethods(range_selector_theme.SfRangeSelectorThemeData, ['_equals']);
  dart.defineExtensionAccessors(range_selector_theme.SfRangeSelectorThemeData, ['hashCode']);
  var data$4 = dart.privateName(pdfviewer_theme, "SfPdfViewerTheme.data");
  var child$3 = dart.privateName(pdfviewer_theme, "SfPdfViewerTheme.child");
  pdfviewer_theme.SfPdfViewerTheme = class SfPdfViewerTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$4];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$3];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let pdfViewerTheme = context.dependOnInheritedWidgetOfExactType(T.SfPdfViewerThemeL());
      t0$ = (t0 = pdfViewerTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).pdfViewerThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfPdfViewerThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfPdfViewerThemeL());
      return this === ancestorTheme ? child : new pdfviewer_theme.SfPdfViewerTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[26] || CT.C26});
    }
  };
  (pdfviewer_theme.SfPdfViewerTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$4] = data;
    this[child$3] = child;
    pdfviewer_theme.SfPdfViewerTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = pdfviewer_theme.SfPdfViewerTheme.prototype;
  dart.addTypeTests(pdfviewer_theme.SfPdfViewerTheme);
  dart.addTypeCaches(pdfviewer_theme.SfPdfViewerTheme);
  dart.setMethodSignature(pdfviewer_theme.SfPdfViewerTheme, () => ({
    __proto__: dart.getMethods(pdfviewer_theme.SfPdfViewerTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(pdfviewer_theme.SfPdfViewerTheme, I[8]);
  dart.setFieldSignature(pdfviewer_theme.SfPdfViewerTheme, () => ({
    __proto__: dart.getFields(pdfviewer_theme.SfPdfViewerTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(pdfviewer_theme.SfPdfViewerThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$1 = dart.privateName(pdfviewer_theme, "SfPdfViewerThemeData.brightness");
  var backgroundColor$ = dart.privateName(pdfviewer_theme, "SfPdfViewerThemeData.backgroundColor");
  var progressBarColor$ = dart.privateName(pdfviewer_theme, "SfPdfViewerThemeData.progressBarColor");
  var scrollStatusStyle$ = dart.privateName(pdfviewer_theme, "SfPdfViewerThemeData.scrollStatusStyle");
  var scrollHeadStyle$ = dart.privateName(pdfviewer_theme, "SfPdfViewerThemeData.scrollHeadStyle");
  var bookmarkViewStyle$ = dart.privateName(pdfviewer_theme, "SfPdfViewerThemeData.bookmarkViewStyle");
  var paginationDialogStyle$ = dart.privateName(pdfviewer_theme, "SfPdfViewerThemeData.paginationDialogStyle");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  pdfviewer_theme.SfPdfViewerThemeData = class SfPdfViewerThemeData extends Object_Diagnosticable$36$0 {
    get brightness() {
      return this[brightness$1];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get progressBarColor() {
      return this[progressBarColor$];
    }
    set progressBarColor(value) {
      super.progressBarColor = value;
    }
    get scrollStatusStyle() {
      return this[scrollStatusStyle$];
    }
    set scrollStatusStyle(value) {
      super.scrollStatusStyle = value;
    }
    get scrollHeadStyle() {
      return this[scrollHeadStyle$];
    }
    set scrollHeadStyle(value) {
      super.scrollHeadStyle = value;
    }
    get bookmarkViewStyle() {
      return this[bookmarkViewStyle$];
    }
    set bookmarkViewStyle(value) {
      super.bookmarkViewStyle = value;
    }
    get paginationDialogStyle() {
      return this[paginationDialogStyle$];
    }
    set paginationDialogStyle(value) {
      super.paginationDialogStyle = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let progressBarColor = opts && 'progressBarColor' in opts ? opts.progressBarColor : null;
      let scrollStatusStyle = opts && 'scrollStatusStyle' in opts ? opts.scrollStatusStyle : null;
      let scrollHeadStyle = opts && 'scrollHeadStyle' in opts ? opts.scrollHeadStyle : null;
      let bookmarkViewStyle = opts && 'bookmarkViewStyle' in opts ? opts.bookmarkViewStyle : null;
      let paginationDialogStyle = opts && 'paginationDialogStyle' in opts ? opts.paginationDialogStyle : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      backgroundColor == null ? backgroundColor = isLight ? new ui.Color.new(4292269782) : new ui.Color.new(4281348144) : null;
      scrollStatusStyle == null ? scrollStatusStyle = new pdfviewer_theme.PdfScrollStatusStyle.new({backgroundColor: new ui.Color.new(4285887861), pageInfoTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 16.0, color: colors$.Colors.white})}) : null;
      scrollHeadStyle == null ? scrollHeadStyle = isLight ? new pdfviewer_theme.PdfScrollHeadStyle.new({backgroundColor: new ui.Color.new(4294638330), pageNumberTextStyle: new text_style.TextStyle.new({fontSize: 12.0, color: colors$.Colors.black})}) : new pdfviewer_theme.PdfScrollHeadStyle.new({backgroundColor: new ui.Color.new(4282532418), pageNumberTextStyle: new text_style.TextStyle.new({fontSize: 12.0, color: colors$.Colors.white})}) : null;
      bookmarkViewStyle == null ? bookmarkViewStyle = isLight ? new pdfviewer_theme.PdfBookmarkViewStyle.new({backgroundColor: colors$.Colors.white, headerBarColor: new ui.Color.new(4294638330), closeIconColor: colors$.Colors.black54, backIconColor: colors$.Colors.black54, navigationIconColor: colors$.Colors.black54, selectionColor: new ui.Color.fromRGBO(0, 0, 0, 0.08), titleSeparatorColor: new ui.Color.fromRGBO(0, 0, 0, 0.16), headerTextStyle: new text_style.TextStyle.new({fontSize: 16.0, fontFamily: "Roboto", fontWeight: ui.FontWeight.normal, color: colors$.Colors.black87}), titleTextStyle: new text_style.TextStyle.new({fontSize: 14.0, color: colors$.Colors.black87, fontFamily: "Roboto", fontWeight: ui.FontWeight.normal})}) : new pdfviewer_theme.PdfBookmarkViewStyle.new({backgroundColor: new ui.Color.new(4280361249), headerBarColor: new ui.Color.new(4282532418), closeIconColor: colors$.Colors.white54, backIconColor: colors$.Colors.white54, navigationIconColor: colors$.Colors.white54, selectionColor: new ui.Color.fromRGBO(255, 255, 255, 0.12), titleSeparatorColor: new ui.Color.fromRGBO(255, 255, 255, 0.16), headerTextStyle: new text_style.TextStyle.new({fontSize: 16.0, fontFamily: "Roboto", fontWeight: ui.FontWeight.normal, color: colors$.Colors.white.withOpacity(0.87)}), titleTextStyle: new text_style.TextStyle.new({fontSize: 14.0, color: colors$.Colors.white.withOpacity(0.87), fontFamily: "Roboto", fontWeight: ui.FontWeight.normal})}) : null;
      paginationDialogStyle == null ? paginationDialogStyle = isLight ? new pdfviewer_theme.PdfPaginationDialogStyle.new({backgroundColor: colors$.Colors.white, headerTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 20.0, fontWeight: ui.FontWeight.w500, color: colors$.Colors.black87}), inputFieldTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 16.0, color: colors$.Colors.black87}), hintTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 16.0, color: colors$.Colors.black87.withOpacity(0.54)}), pageInfoTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 12.0, color: new ui.Color.fromRGBO(0, 0, 0, 0.6)}), validationTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 12.0, color: new ui.Color.new(4290985784)}), okTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 14.0, fontWeight: ui.FontWeight.w500}), cancelTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 14.0, fontWeight: ui.FontWeight.w500})}) : new pdfviewer_theme.PdfPaginationDialogStyle.new({backgroundColor: new ui.Color.new(4282532418), headerTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 20.0, fontWeight: ui.FontWeight.w500, color: colors$.Colors.white.withOpacity(0.87)}), inputFieldTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 16.0, color: colors$.Colors.white.withOpacity(0.87)}), hintTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 16.0, color: new ui.Color.new(4289967027).withOpacity(0.54)}), pageInfoTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 12.0, color: new ui.Color.new(4289967027)}), validationTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 12.0, color: new ui.Color.new(4294936449)}), okTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 14.0, fontWeight: ui.FontWeight.w500}), cancelTextStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 14.0, fontWeight: ui.FontWeight.w500})}) : null;
      return new pdfviewer_theme.SfPdfViewerThemeData.raw({brightness: brightness, backgroundColor: backgroundColor, progressBarColor: progressBarColor, scrollStatusStyle: scrollStatusStyle, scrollHeadStyle: scrollHeadStyle, bookmarkViewStyle: bookmarkViewStyle, paginationDialogStyle: paginationDialogStyle});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let progressBarColor = opts && 'progressBarColor' in opts ? opts.progressBarColor : null;
      let scrollStatusStyle = opts && 'scrollStatusStyle' in opts ? opts.scrollStatusStyle : null;
      let scrollHeadStyle = opts && 'scrollHeadStyle' in opts ? opts.scrollHeadStyle : null;
      let bookmarkViewStyle = opts && 'bookmarkViewStyle' in opts ? opts.bookmarkViewStyle : null;
      let paginationDialogStyle = opts && 'paginationDialogStyle' in opts ? opts.paginationDialogStyle : null;
      return new pdfviewer_theme.SfPdfViewerThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), backgroundColor: (t0$ = backgroundColor, t0$ == null ? this.backgroundColor : t0$), progressBarColor: (t0$0 = progressBarColor, t0$0 == null ? this.progressBarColor : t0$0), scrollStatusStyle: (t0$1 = scrollStatusStyle, t0$1 == null ? this.scrollStatusStyle : t0$1), scrollHeadStyle: (t0$2 = scrollHeadStyle, t0$2 == null ? this.scrollHeadStyle : t0$2), bookmarkViewStyle: (t0$3 = bookmarkViewStyle, t0$3 == null ? this.bookmarkViewStyle : t0$3), paginationDialogStyle: (t0$4 = paginationDialogStyle, t0$4 == null ? this.paginationDialogStyle : t0$4)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[9], 468, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return pdfviewer_theme.SfPdfViewerThemeData.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), progressBarColor: ui.Color.lerp(a.progressBarColor, b.progressBarColor, t), scrollStatusStyle: pdfviewer_theme.PdfScrollStatusStyle.lerp(a.scrollStatusStyle, b.scrollStatusStyle, t), scrollHeadStyle: pdfviewer_theme.PdfScrollHeadStyle.lerp(a.scrollHeadStyle, b.scrollHeadStyle, t), bookmarkViewStyle: pdfviewer_theme.PdfBookmarkViewStyle.lerp(a.bookmarkViewStyle, b.bookmarkViewStyle, t), paginationDialogStyle: pdfviewer_theme.PdfPaginationDialogStyle.lerp(a.paginationDialogStyle, b.paginationDialogStyle, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfPdfViewerThemeDataL().as(other);
      return typedOther.brightness == this.brightness && dart.equals(typedOther.backgroundColor, this.backgroundColor) && dart.equals(typedOther.progressBarColor, this.progressBarColor) && dart.equals(typedOther.scrollStatusStyle, this.scrollStatusStyle) && dart.equals(typedOther.scrollHeadStyle, this.scrollHeadStyle) && dart.equals(typedOther.bookmarkViewStyle, this.bookmarkViewStyle) && dart.equals(typedOther.paginationDialogStyle, this.paginationDialogStyle);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.progressBarColor, this.scrollStatusStyle, this.scrollHeadStyle, this.bookmarkViewStyle, this.paginationDialogStyle]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = pdfviewer_theme.SfPdfViewerThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: defaultData.backgroundColor}));
      properties.add(new colors.ColorProperty.new("progressBarColor", this.progressBarColor, {defaultValue: defaultData.progressBarColor}));
      properties.add(new (T.DiagnosticsPropertyOfPdfScrollStatusStyleL()).new("scrollStatusStyle", this.scrollStatusStyle, {defaultValue: defaultData.scrollStatusStyle}));
      properties.add(new (T.DiagnosticsPropertyOfPdfScrollHeadStyleL()).new("scrollHeadStyle", this.scrollHeadStyle, {defaultValue: defaultData.scrollHeadStyle}));
      properties.add(new (T.DiagnosticsPropertyOfPdfBookmarkViewStyleL()).new("bookmarkViewStyle", this.bookmarkViewStyle, {defaultValue: defaultData.bookmarkViewStyle}));
      properties.add(new (T.DiagnosticsPropertyOfPdfPaginationDialogStyleL()).new("paginationDialogStyle", this.paginationDialogStyle, {defaultValue: defaultData.paginationDialogStyle}));
    }
  };
  (pdfviewer_theme.SfPdfViewerThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let progressBarColor = opts && 'progressBarColor' in opts ? opts.progressBarColor : null;
    let scrollStatusStyle = opts && 'scrollStatusStyle' in opts ? opts.scrollStatusStyle : null;
    let scrollHeadStyle = opts && 'scrollHeadStyle' in opts ? opts.scrollHeadStyle : null;
    let bookmarkViewStyle = opts && 'bookmarkViewStyle' in opts ? opts.bookmarkViewStyle : null;
    let paginationDialogStyle = opts && 'paginationDialogStyle' in opts ? opts.paginationDialogStyle : null;
    this[brightness$1] = brightness;
    this[backgroundColor$] = backgroundColor;
    this[progressBarColor$] = progressBarColor;
    this[scrollStatusStyle$] = scrollStatusStyle;
    this[scrollHeadStyle$] = scrollHeadStyle;
    this[bookmarkViewStyle$] = bookmarkViewStyle;
    this[paginationDialogStyle$] = paginationDialogStyle;
    ;
  }).prototype = pdfviewer_theme.SfPdfViewerThemeData.prototype;
  dart.addTypeTests(pdfviewer_theme.SfPdfViewerThemeData);
  dart.addTypeCaches(pdfviewer_theme.SfPdfViewerThemeData);
  dart.setMethodSignature(pdfviewer_theme.SfPdfViewerThemeData, () => ({
    __proto__: dart.getMethods(pdfviewer_theme.SfPdfViewerThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(pdfviewer_theme.SfPdfViewerThemeData), [], {backgroundColor: dart.legacy(ui.Color), bookmarkViewStyle: dart.legacy(pdfviewer_theme.PdfBookmarkViewStyle), brightness: dart.legacy(ui.Brightness), paginationDialogStyle: dart.legacy(pdfviewer_theme.PdfPaginationDialogStyle), progressBarColor: dart.legacy(ui.Color), scrollHeadStyle: dart.legacy(pdfviewer_theme.PdfScrollHeadStyle), scrollStatusStyle: dart.legacy(pdfviewer_theme.PdfScrollStatusStyle)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(pdfviewer_theme.SfPdfViewerThemeData, () => ({
    __proto__: dart.getGetters(pdfviewer_theme.SfPdfViewerThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(pdfviewer_theme.SfPdfViewerThemeData, I[8]);
  dart.setFieldSignature(pdfviewer_theme.SfPdfViewerThemeData, () => ({
    __proto__: dart.getFields(pdfviewer_theme.SfPdfViewerThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    progressBarColor: dart.finalFieldType(dart.legacy(ui.Color)),
    scrollStatusStyle: dart.finalFieldType(dart.legacy(pdfviewer_theme.PdfScrollStatusStyle)),
    scrollHeadStyle: dart.finalFieldType(dart.legacy(pdfviewer_theme.PdfScrollHeadStyle)),
    bookmarkViewStyle: dart.finalFieldType(dart.legacy(pdfviewer_theme.PdfBookmarkViewStyle)),
    paginationDialogStyle: dart.finalFieldType(dart.legacy(pdfviewer_theme.PdfPaginationDialogStyle))
  }));
  dart.defineExtensionMethods(pdfviewer_theme.SfPdfViewerThemeData, ['_equals']);
  dart.defineExtensionAccessors(pdfviewer_theme.SfPdfViewerThemeData, ['hashCode']);
  var backgroundColor$0 = dart.privateName(pdfviewer_theme, "PdfScrollStatusStyle.backgroundColor");
  var pageInfoTextStyle$ = dart.privateName(pdfviewer_theme, "PdfScrollStatusStyle.pageInfoTextStyle");
  pdfviewer_theme.PdfScrollStatusStyle = class PdfScrollStatusStyle extends core.Object {
    get backgroundColor() {
      return this[backgroundColor$0];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get pageInfoTextStyle() {
      return this[pageInfoTextStyle$];
    }
    set pageInfoTextStyle(value) {
      super.pageInfoTextStyle = value;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.pageInfoTextStyle]);
      return ui.hashList(values);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.PdfScrollStatusStyleL().is(other) && dart.equals(other.backgroundColor, this.backgroundColor) && dart.equals(other.pageInfoTextStyle, this.pageInfoTextStyle);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[9], 575, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return new pdfviewer_theme.PdfScrollStatusStyle.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), pageInfoTextStyle: text_style.TextStyle.lerp(a.pageInfoTextStyle, b.pageInfoTextStyle, t)});
    }
  };
  (pdfviewer_theme.PdfScrollStatusStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let pageInfoTextStyle = opts && 'pageInfoTextStyle' in opts ? opts.pageInfoTextStyle : null;
    this[backgroundColor$0] = backgroundColor;
    this[pageInfoTextStyle$] = pageInfoTextStyle;
    ;
  }).prototype = pdfviewer_theme.PdfScrollStatusStyle.prototype;
  dart.addTypeTests(pdfviewer_theme.PdfScrollStatusStyle);
  dart.addTypeCaches(pdfviewer_theme.PdfScrollStatusStyle);
  dart.setMethodSignature(pdfviewer_theme.PdfScrollStatusStyle, () => ({
    __proto__: dart.getMethods(pdfviewer_theme.PdfScrollStatusStyle.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(pdfviewer_theme.PdfScrollStatusStyle, () => ({
    __proto__: dart.getGetters(pdfviewer_theme.PdfScrollStatusStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(pdfviewer_theme.PdfScrollStatusStyle, I[8]);
  dart.setFieldSignature(pdfviewer_theme.PdfScrollStatusStyle, () => ({
    __proto__: dart.getFields(pdfviewer_theme.PdfScrollStatusStyle.__proto__),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    pageInfoTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(pdfviewer_theme.PdfScrollStatusStyle, ['_equals']);
  dart.defineExtensionAccessors(pdfviewer_theme.PdfScrollStatusStyle, ['hashCode']);
  var backgroundColor$1 = dart.privateName(pdfviewer_theme, "PdfScrollHeadStyle.backgroundColor");
  var pageNumberTextStyle$ = dart.privateName(pdfviewer_theme, "PdfScrollHeadStyle.pageNumberTextStyle");
  pdfviewer_theme.PdfScrollHeadStyle = class PdfScrollHeadStyle extends core.Object {
    get backgroundColor() {
      return this[backgroundColor$1];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get pageNumberTextStyle() {
      return this[pageNumberTextStyle$];
    }
    set pageNumberTextStyle(value) {
      super.pageNumberTextStyle = value;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.pageNumberTextStyle]);
      return ui.hashList(values);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.PdfScrollHeadStyleL().is(other) && dart.equals(other.backgroundColor, this.backgroundColor) && dart.equals(other.pageNumberTextStyle, this.pageNumberTextStyle);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[9], 620, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return new pdfviewer_theme.PdfScrollHeadStyle.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), pageNumberTextStyle: text_style.TextStyle.lerp(a.pageNumberTextStyle, b.pageNumberTextStyle, t)});
    }
  };
  (pdfviewer_theme.PdfScrollHeadStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let pageNumberTextStyle = opts && 'pageNumberTextStyle' in opts ? opts.pageNumberTextStyle : null;
    this[backgroundColor$1] = backgroundColor;
    this[pageNumberTextStyle$] = pageNumberTextStyle;
    ;
  }).prototype = pdfviewer_theme.PdfScrollHeadStyle.prototype;
  dart.addTypeTests(pdfviewer_theme.PdfScrollHeadStyle);
  dart.addTypeCaches(pdfviewer_theme.PdfScrollHeadStyle);
  dart.setMethodSignature(pdfviewer_theme.PdfScrollHeadStyle, () => ({
    __proto__: dart.getMethods(pdfviewer_theme.PdfScrollHeadStyle.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(pdfviewer_theme.PdfScrollHeadStyle, () => ({
    __proto__: dart.getGetters(pdfviewer_theme.PdfScrollHeadStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(pdfviewer_theme.PdfScrollHeadStyle, I[8]);
  dart.setFieldSignature(pdfviewer_theme.PdfScrollHeadStyle, () => ({
    __proto__: dart.getFields(pdfviewer_theme.PdfScrollHeadStyle.__proto__),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    pageNumberTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(pdfviewer_theme.PdfScrollHeadStyle, ['_equals']);
  dart.defineExtensionAccessors(pdfviewer_theme.PdfScrollHeadStyle, ['hashCode']);
  var backgroundColor$2 = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.backgroundColor");
  var headerBarColor$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.headerBarColor");
  var closeIconColor$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.closeIconColor");
  var backIconColor$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.backIconColor");
  var navigationIconColor$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.navigationIconColor");
  var selectionColor$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.selectionColor");
  var titleSeparatorColor$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.titleSeparatorColor");
  var titleTextStyle$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.titleTextStyle");
  var headerTextStyle$ = dart.privateName(pdfviewer_theme, "PdfBookmarkViewStyle.headerTextStyle");
  pdfviewer_theme.PdfBookmarkViewStyle = class PdfBookmarkViewStyle extends core.Object {
    get backgroundColor() {
      return this[backgroundColor$2];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get headerBarColor() {
      return this[headerBarColor$];
    }
    set headerBarColor(value) {
      super.headerBarColor = value;
    }
    get closeIconColor() {
      return this[closeIconColor$];
    }
    set closeIconColor(value) {
      super.closeIconColor = value;
    }
    get backIconColor() {
      return this[backIconColor$];
    }
    set backIconColor(value) {
      super.backIconColor = value;
    }
    get navigationIconColor() {
      return this[navigationIconColor$];
    }
    set navigationIconColor(value) {
      super.navigationIconColor = value;
    }
    get selectionColor() {
      return this[selectionColor$];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get titleSeparatorColor() {
      return this[titleSeparatorColor$];
    }
    set titleSeparatorColor(value) {
      super.titleSeparatorColor = value;
    }
    get titleTextStyle() {
      return this[titleTextStyle$];
    }
    set titleTextStyle(value) {
      super.titleTextStyle = value;
    }
    get headerTextStyle() {
      return this[headerTextStyle$];
    }
    set headerTextStyle(value) {
      super.headerTextStyle = value;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.headerBarColor, this.closeIconColor, this.backIconColor, this.navigationIconColor, this.selectionColor, this.titleSeparatorColor, this.titleTextStyle, this.headerTextStyle]);
      return ui.hashList(values);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.PdfBookmarkViewStyleL().is(other) && dart.equals(other.backgroundColor, this.backgroundColor) && dart.equals(other.headerBarColor, this.headerBarColor) && dart.equals(other.closeIconColor, this.closeIconColor) && dart.equals(other.backIconColor, this.backIconColor) && dart.equals(other.navigationIconColor, this.navigationIconColor) && dart.equals(other.selectionColor, this.selectionColor) && dart.equals(other.titleSeparatorColor, this.titleSeparatorColor) && dart.equals(other.titleTextStyle, this.titleTextStyle) && dart.equals(other.headerTextStyle, this.headerTextStyle);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[9], 712, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return new pdfviewer_theme.PdfBookmarkViewStyle.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), headerBarColor: ui.Color.lerp(a.headerBarColor, b.headerBarColor, t), closeIconColor: ui.Color.lerp(a.closeIconColor, b.closeIconColor, t), backIconColor: ui.Color.lerp(a.backIconColor, b.backIconColor, t), navigationIconColor: ui.Color.lerp(a.navigationIconColor, b.navigationIconColor, t), selectionColor: ui.Color.lerp(a.selectionColor, b.selectionColor, t), titleSeparatorColor: ui.Color.lerp(a.titleSeparatorColor, b.titleSeparatorColor, t), titleTextStyle: text_style.TextStyle.lerp(a.titleTextStyle, b.titleTextStyle, t), headerTextStyle: text_style.TextStyle.lerp(a.headerTextStyle, b.headerTextStyle, t)});
    }
  };
  (pdfviewer_theme.PdfBookmarkViewStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let headerBarColor = opts && 'headerBarColor' in opts ? opts.headerBarColor : null;
    let closeIconColor = opts && 'closeIconColor' in opts ? opts.closeIconColor : null;
    let backIconColor = opts && 'backIconColor' in opts ? opts.backIconColor : null;
    let navigationIconColor = opts && 'navigationIconColor' in opts ? opts.navigationIconColor : null;
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let titleSeparatorColor = opts && 'titleSeparatorColor' in opts ? opts.titleSeparatorColor : null;
    let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : null;
    let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
    this[backgroundColor$2] = backgroundColor;
    this[headerBarColor$] = headerBarColor;
    this[closeIconColor$] = closeIconColor;
    this[backIconColor$] = backIconColor;
    this[navigationIconColor$] = navigationIconColor;
    this[selectionColor$] = selectionColor;
    this[titleSeparatorColor$] = titleSeparatorColor;
    this[titleTextStyle$] = titleTextStyle;
    this[headerTextStyle$] = headerTextStyle;
    ;
  }).prototype = pdfviewer_theme.PdfBookmarkViewStyle.prototype;
  dart.addTypeTests(pdfviewer_theme.PdfBookmarkViewStyle);
  dart.addTypeCaches(pdfviewer_theme.PdfBookmarkViewStyle);
  dart.setMethodSignature(pdfviewer_theme.PdfBookmarkViewStyle, () => ({
    __proto__: dart.getMethods(pdfviewer_theme.PdfBookmarkViewStyle.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(pdfviewer_theme.PdfBookmarkViewStyle, () => ({
    __proto__: dart.getGetters(pdfviewer_theme.PdfBookmarkViewStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(pdfviewer_theme.PdfBookmarkViewStyle, I[8]);
  dart.setFieldSignature(pdfviewer_theme.PdfBookmarkViewStyle, () => ({
    __proto__: dart.getFields(pdfviewer_theme.PdfBookmarkViewStyle.__proto__),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    headerBarColor: dart.finalFieldType(dart.legacy(ui.Color)),
    closeIconColor: dart.finalFieldType(dart.legacy(ui.Color)),
    backIconColor: dart.finalFieldType(dart.legacy(ui.Color)),
    navigationIconColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionColor: dart.finalFieldType(dart.legacy(ui.Color)),
    titleSeparatorColor: dart.finalFieldType(dart.legacy(ui.Color)),
    titleTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    headerTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(pdfviewer_theme.PdfBookmarkViewStyle, ['_equals']);
  dart.defineExtensionAccessors(pdfviewer_theme.PdfBookmarkViewStyle, ['hashCode']);
  var backgroundColor$3 = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.backgroundColor");
  var headerTextStyle$0 = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.headerTextStyle");
  var inputFieldTextStyle$ = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.inputFieldTextStyle");
  var hintTextStyle$ = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.hintTextStyle");
  var pageInfoTextStyle$0 = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.pageInfoTextStyle");
  var validationTextStyle$ = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.validationTextStyle");
  var okTextStyle$ = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.okTextStyle");
  var cancelTextStyle$ = dart.privateName(pdfviewer_theme, "PdfPaginationDialogStyle.cancelTextStyle");
  pdfviewer_theme.PdfPaginationDialogStyle = class PdfPaginationDialogStyle extends core.Object {
    get backgroundColor() {
      return this[backgroundColor$3];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get headerTextStyle() {
      return this[headerTextStyle$0];
    }
    set headerTextStyle(value) {
      super.headerTextStyle = value;
    }
    get inputFieldTextStyle() {
      return this[inputFieldTextStyle$];
    }
    set inputFieldTextStyle(value) {
      super.inputFieldTextStyle = value;
    }
    get hintTextStyle() {
      return this[hintTextStyle$];
    }
    set hintTextStyle(value) {
      super.hintTextStyle = value;
    }
    get pageInfoTextStyle() {
      return this[pageInfoTextStyle$0];
    }
    set pageInfoTextStyle(value) {
      super.pageInfoTextStyle = value;
    }
    get validationTextStyle() {
      return this[validationTextStyle$];
    }
    set validationTextStyle(value) {
      super.validationTextStyle = value;
    }
    get okTextStyle() {
      return this[okTextStyle$];
    }
    set okTextStyle(value) {
      super.okTextStyle = value;
    }
    get cancelTextStyle() {
      return this[cancelTextStyle$];
    }
    set cancelTextStyle(value) {
      super.cancelTextStyle = value;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.headerTextStyle, this.inputFieldTextStyle, this.hintTextStyle, this.pageInfoTextStyle, this.validationTextStyle, this.okTextStyle, this.cancelTextStyle]);
      return ui.hashList(values);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.PdfPaginationDialogStyleL().is(other) && dart.equals(other.backgroundColor, this.backgroundColor) && dart.equals(other.headerTextStyle, this.headerTextStyle) && dart.equals(other.inputFieldTextStyle, this.inputFieldTextStyle) && dart.equals(other.hintTextStyle, this.hintTextStyle) && dart.equals(other.pageInfoTextStyle, this.pageInfoTextStyle) && dart.equals(other.validationTextStyle, this.validationTextStyle) && dart.equals(other.okTextStyle, this.okTextStyle) && dart.equals(other.cancelTextStyle, this.cancelTextStyle);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[9], 807, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return new pdfviewer_theme.PdfPaginationDialogStyle.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), headerTextStyle: text_style.TextStyle.lerp(a.headerTextStyle, b.headerTextStyle, t), inputFieldTextStyle: text_style.TextStyle.lerp(a.inputFieldTextStyle, b.inputFieldTextStyle, t), hintTextStyle: text_style.TextStyle.lerp(a.hintTextStyle, b.hintTextStyle, t), pageInfoTextStyle: text_style.TextStyle.lerp(a.pageInfoTextStyle, b.pageInfoTextStyle, t), validationTextStyle: text_style.TextStyle.lerp(a.validationTextStyle, b.validationTextStyle, t), okTextStyle: text_style.TextStyle.lerp(a.okTextStyle, b.okTextStyle, t), cancelTextStyle: text_style.TextStyle.lerp(a.cancelTextStyle, b.cancelTextStyle, t)});
    }
  };
  (pdfviewer_theme.PdfPaginationDialogStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
    let inputFieldTextStyle = opts && 'inputFieldTextStyle' in opts ? opts.inputFieldTextStyle : null;
    let hintTextStyle = opts && 'hintTextStyle' in opts ? opts.hintTextStyle : null;
    let pageInfoTextStyle = opts && 'pageInfoTextStyle' in opts ? opts.pageInfoTextStyle : null;
    let validationTextStyle = opts && 'validationTextStyle' in opts ? opts.validationTextStyle : null;
    let okTextStyle = opts && 'okTextStyle' in opts ? opts.okTextStyle : null;
    let cancelTextStyle = opts && 'cancelTextStyle' in opts ? opts.cancelTextStyle : null;
    this[backgroundColor$3] = backgroundColor;
    this[headerTextStyle$0] = headerTextStyle;
    this[inputFieldTextStyle$] = inputFieldTextStyle;
    this[hintTextStyle$] = hintTextStyle;
    this[pageInfoTextStyle$0] = pageInfoTextStyle;
    this[validationTextStyle$] = validationTextStyle;
    this[okTextStyle$] = okTextStyle;
    this[cancelTextStyle$] = cancelTextStyle;
    ;
  }).prototype = pdfviewer_theme.PdfPaginationDialogStyle.prototype;
  dart.addTypeTests(pdfviewer_theme.PdfPaginationDialogStyle);
  dart.addTypeCaches(pdfviewer_theme.PdfPaginationDialogStyle);
  dart.setMethodSignature(pdfviewer_theme.PdfPaginationDialogStyle, () => ({
    __proto__: dart.getMethods(pdfviewer_theme.PdfPaginationDialogStyle.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(pdfviewer_theme.PdfPaginationDialogStyle, () => ({
    __proto__: dart.getGetters(pdfviewer_theme.PdfPaginationDialogStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(pdfviewer_theme.PdfPaginationDialogStyle, I[8]);
  dart.setFieldSignature(pdfviewer_theme.PdfPaginationDialogStyle, () => ({
    __proto__: dart.getFields(pdfviewer_theme.PdfPaginationDialogStyle.__proto__),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    headerTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    inputFieldTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    hintTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    pageInfoTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    validationTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    okTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    cancelTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(pdfviewer_theme.PdfPaginationDialogStyle, ['_equals']);
  dart.defineExtensionAccessors(pdfviewer_theme.PdfPaginationDialogStyle, ['hashCode']);
  var data$5 = dart.privateName(maps_theme, "SfMapsTheme.data");
  var child$4 = dart.privateName(maps_theme, "SfMapsTheme.child");
  maps_theme.SfMapsTheme = class SfMapsTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$5];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$4];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let mapsTheme = context.dependOnInheritedWidgetOfExactType(T.SfMapsThemeL());
      t0$ = (t0 = mapsTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).mapsThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfMapsThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfMapsThemeL());
      return this === ancestorTheme ? child : new maps_theme.SfMapsTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[30] || CT.C30});
    }
  };
  (maps_theme.SfMapsTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$5] = data;
    this[child$4] = child;
    maps_theme.SfMapsTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = maps_theme.SfMapsTheme.prototype;
  dart.addTypeTests(maps_theme.SfMapsTheme);
  dart.addTypeCaches(maps_theme.SfMapsTheme);
  dart.setMethodSignature(maps_theme.SfMapsTheme, () => ({
    __proto__: dart.getMethods(maps_theme.SfMapsTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(maps_theme.SfMapsTheme, I[10]);
  dart.setFieldSignature(maps_theme.SfMapsTheme, () => ({
    __proto__: dart.getFields(maps_theme.SfMapsTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(maps_theme.SfMapsThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$2 = dart.privateName(maps_theme, "SfMapsThemeData.brightness");
  var titleTextStyle$0 = dart.privateName(maps_theme, "SfMapsThemeData.titleTextStyle");
  var layerColor$ = dart.privateName(maps_theme, "SfMapsThemeData.layerColor");
  var layerStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.layerStrokeColor");
  var layerStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.layerStrokeWidth");
  var shapeHoverColor$ = dart.privateName(maps_theme, "SfMapsThemeData.shapeHoverColor");
  var shapeHoverStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.shapeHoverStrokeColor");
  var shapeHoverStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.shapeHoverStrokeWidth");
  var legendTextStyle$ = dart.privateName(maps_theme, "SfMapsThemeData.legendTextStyle");
  var markerIconColor$ = dart.privateName(maps_theme, "SfMapsThemeData.markerIconColor");
  var markerIconStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.markerIconStrokeColor");
  var markerIconStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.markerIconStrokeWidth");
  var dataLabelTextStyle$ = dart.privateName(maps_theme, "SfMapsThemeData.dataLabelTextStyle");
  var bubbleColor$ = dart.privateName(maps_theme, "SfMapsThemeData.bubbleColor");
  var bubbleStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.bubbleStrokeColor");
  var bubbleStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.bubbleStrokeWidth");
  var bubbleHoverColor$ = dart.privateName(maps_theme, "SfMapsThemeData.bubbleHoverColor");
  var bubbleHoverStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.bubbleHoverStrokeColor");
  var bubbleHoverStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.bubbleHoverStrokeWidth");
  var selectionColor$0 = dart.privateName(maps_theme, "SfMapsThemeData.selectionColor");
  var selectionStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.selectionStrokeColor");
  var selectionStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.selectionStrokeWidth");
  var tooltipColor$ = dart.privateName(maps_theme, "SfMapsThemeData.tooltipColor");
  var tooltipStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.tooltipStrokeColor");
  var tooltipStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.tooltipStrokeWidth");
  var tooltipBorderRadius$ = dart.privateName(maps_theme, "SfMapsThemeData.tooltipBorderRadius");
  var toggledItemColor$ = dart.privateName(maps_theme, "SfMapsThemeData.toggledItemColor");
  var toggledItemStrokeColor$ = dart.privateName(maps_theme, "SfMapsThemeData.toggledItemStrokeColor");
  var toggledItemStrokeWidth$ = dart.privateName(maps_theme, "SfMapsThemeData.toggledItemStrokeWidth");
  const Object_Diagnosticable$36$1 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$1.new = function() {
  }).prototype = Object_Diagnosticable$36$1.prototype;
  dart.applyMixin(Object_Diagnosticable$36$1, diagnostics.Diagnosticable);
  maps_theme.SfMapsThemeData = class SfMapsThemeData extends Object_Diagnosticable$36$1 {
    get brightness() {
      return this[brightness$2];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get titleTextStyle() {
      return this[titleTextStyle$0];
    }
    set titleTextStyle(value) {
      super.titleTextStyle = value;
    }
    get layerColor() {
      return this[layerColor$];
    }
    set layerColor(value) {
      super.layerColor = value;
    }
    get layerStrokeColor() {
      return this[layerStrokeColor$];
    }
    set layerStrokeColor(value) {
      super.layerStrokeColor = value;
    }
    get layerStrokeWidth() {
      return this[layerStrokeWidth$];
    }
    set layerStrokeWidth(value) {
      super.layerStrokeWidth = value;
    }
    get shapeHoverColor() {
      return this[shapeHoverColor$];
    }
    set shapeHoverColor(value) {
      super.shapeHoverColor = value;
    }
    get shapeHoverStrokeColor() {
      return this[shapeHoverStrokeColor$];
    }
    set shapeHoverStrokeColor(value) {
      super.shapeHoverStrokeColor = value;
    }
    get shapeHoverStrokeWidth() {
      return this[shapeHoverStrokeWidth$];
    }
    set shapeHoverStrokeWidth(value) {
      super.shapeHoverStrokeWidth = value;
    }
    get legendTextStyle() {
      return this[legendTextStyle$];
    }
    set legendTextStyle(value) {
      super.legendTextStyle = value;
    }
    get markerIconColor() {
      return this[markerIconColor$];
    }
    set markerIconColor(value) {
      super.markerIconColor = value;
    }
    get markerIconStrokeColor() {
      return this[markerIconStrokeColor$];
    }
    set markerIconStrokeColor(value) {
      super.markerIconStrokeColor = value;
    }
    get markerIconStrokeWidth() {
      return this[markerIconStrokeWidth$];
    }
    set markerIconStrokeWidth(value) {
      super.markerIconStrokeWidth = value;
    }
    get dataLabelTextStyle() {
      return this[dataLabelTextStyle$];
    }
    set dataLabelTextStyle(value) {
      super.dataLabelTextStyle = value;
    }
    get bubbleColor() {
      return this[bubbleColor$];
    }
    set bubbleColor(value) {
      super.bubbleColor = value;
    }
    get bubbleStrokeColor() {
      return this[bubbleStrokeColor$];
    }
    set bubbleStrokeColor(value) {
      super.bubbleStrokeColor = value;
    }
    get bubbleStrokeWidth() {
      return this[bubbleStrokeWidth$];
    }
    set bubbleStrokeWidth(value) {
      super.bubbleStrokeWidth = value;
    }
    get bubbleHoverColor() {
      return this[bubbleHoverColor$];
    }
    set bubbleHoverColor(value) {
      super.bubbleHoverColor = value;
    }
    get bubbleHoverStrokeColor() {
      return this[bubbleHoverStrokeColor$];
    }
    set bubbleHoverStrokeColor(value) {
      super.bubbleHoverStrokeColor = value;
    }
    get bubbleHoverStrokeWidth() {
      return this[bubbleHoverStrokeWidth$];
    }
    set bubbleHoverStrokeWidth(value) {
      super.bubbleHoverStrokeWidth = value;
    }
    get selectionColor() {
      return this[selectionColor$0];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get selectionStrokeColor() {
      return this[selectionStrokeColor$];
    }
    set selectionStrokeColor(value) {
      super.selectionStrokeColor = value;
    }
    get selectionStrokeWidth() {
      return this[selectionStrokeWidth$];
    }
    set selectionStrokeWidth(value) {
      super.selectionStrokeWidth = value;
    }
    get tooltipColor() {
      return this[tooltipColor$];
    }
    set tooltipColor(value) {
      super.tooltipColor = value;
    }
    get tooltipStrokeColor() {
      return this[tooltipStrokeColor$];
    }
    set tooltipStrokeColor(value) {
      super.tooltipStrokeColor = value;
    }
    get tooltipStrokeWidth() {
      return this[tooltipStrokeWidth$];
    }
    set tooltipStrokeWidth(value) {
      super.tooltipStrokeWidth = value;
    }
    get tooltipBorderRadius() {
      return this[tooltipBorderRadius$];
    }
    set tooltipBorderRadius(value) {
      super.tooltipBorderRadius = value;
    }
    get toggledItemColor() {
      return this[toggledItemColor$];
    }
    set toggledItemColor(value) {
      super.toggledItemColor = value;
    }
    get toggledItemStrokeColor() {
      return this[toggledItemStrokeColor$];
    }
    set toggledItemStrokeColor(value) {
      super.toggledItemStrokeColor = value;
    }
    get toggledItemStrokeWidth() {
      return this[toggledItemStrokeWidth$];
    }
    set toggledItemStrokeWidth(value) {
      super.toggledItemStrokeWidth = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : null;
      let layerColor = opts && 'layerColor' in opts ? opts.layerColor : null;
      let layerStrokeColor = opts && 'layerStrokeColor' in opts ? opts.layerStrokeColor : null;
      let layerStrokeWidth = opts && 'layerStrokeWidth' in opts ? opts.layerStrokeWidth : null;
      let shapeHoverColor = opts && 'shapeHoverColor' in opts ? opts.shapeHoverColor : null;
      let shapeHoverStrokeColor = opts && 'shapeHoverStrokeColor' in opts ? opts.shapeHoverStrokeColor : null;
      let shapeHoverStrokeWidth = opts && 'shapeHoverStrokeWidth' in opts ? opts.shapeHoverStrokeWidth : null;
      let legendTextStyle = opts && 'legendTextStyle' in opts ? opts.legendTextStyle : null;
      let markerIconColor = opts && 'markerIconColor' in opts ? opts.markerIconColor : null;
      let markerIconStrokeColor = opts && 'markerIconStrokeColor' in opts ? opts.markerIconStrokeColor : null;
      let markerIconStrokeWidth = opts && 'markerIconStrokeWidth' in opts ? opts.markerIconStrokeWidth : null;
      let dataLabelTextStyle = opts && 'dataLabelTextStyle' in opts ? opts.dataLabelTextStyle : null;
      let bubbleColor = opts && 'bubbleColor' in opts ? opts.bubbleColor : null;
      let bubbleStrokeColor = opts && 'bubbleStrokeColor' in opts ? opts.bubbleStrokeColor : null;
      let bubbleStrokeWidth = opts && 'bubbleStrokeWidth' in opts ? opts.bubbleStrokeWidth : null;
      let bubbleHoverColor = opts && 'bubbleHoverColor' in opts ? opts.bubbleHoverColor : null;
      let bubbleHoverStrokeColor = opts && 'bubbleHoverStrokeColor' in opts ? opts.bubbleHoverStrokeColor : null;
      let bubbleHoverStrokeWidth = opts && 'bubbleHoverStrokeWidth' in opts ? opts.bubbleHoverStrokeWidth : null;
      let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
      let selectionStrokeColor = opts && 'selectionStrokeColor' in opts ? opts.selectionStrokeColor : null;
      let selectionStrokeWidth = opts && 'selectionStrokeWidth' in opts ? opts.selectionStrokeWidth : null;
      let tooltipColor = opts && 'tooltipColor' in opts ? opts.tooltipColor : null;
      let tooltipStrokeColor = opts && 'tooltipStrokeColor' in opts ? opts.tooltipStrokeColor : null;
      let tooltipStrokeWidth = opts && 'tooltipStrokeWidth' in opts ? opts.tooltipStrokeWidth : null;
      let tooltipBorderRadius = opts && 'tooltipBorderRadius' in opts ? opts.tooltipBorderRadius : null;
      let toggledItemColor = opts && 'toggledItemColor' in opts ? opts.toggledItemColor : null;
      let toggledItemStrokeColor = opts && 'toggledItemStrokeColor' in opts ? opts.toggledItemStrokeColor : null;
      let toggledItemStrokeWidth = opts && 'toggledItemStrokeWidth' in opts ? opts.toggledItemStrokeWidth : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      layerColor == null ? layerColor = isLight ? C[34] || CT.C34 : C[35] || CT.C35 : null;
      layerStrokeColor == null ? layerStrokeColor = isLight ? C[36] || CT.C36 : C[37] || CT.C37 : null;
      layerStrokeWidth == null ? layerStrokeWidth = 1.0 : null;
      markerIconColor == null ? markerIconColor = isLight ? C[38] || CT.C38 : C[39] || CT.C39 : null;
      markerIconStrokeWidth == null ? markerIconStrokeWidth = 1.0 : null;
      bubbleColor == null ? bubbleColor = isLight ? C[40] || CT.C40 : C[41] || CT.C41 : null;
      bubbleStrokeColor == null ? bubbleStrokeColor = colors$.Colors.transparent : null;
      bubbleStrokeWidth == null ? bubbleStrokeWidth = 1.0 : null;
      selectionColor == null ? selectionColor = isLight ? C[42] || CT.C42 : C[34] || CT.C34 : null;
      selectionStrokeColor == null ? selectionStrokeColor = isLight ? C[14] || CT.C14 : C[35] || CT.C35 : null;
      selectionStrokeWidth == null ? selectionStrokeWidth = 0.5 : null;
      tooltipColor == null ? tooltipColor = isLight ? C[42] || CT.C42 : C[43] || CT.C43 : null;
      tooltipStrokeWidth == null ? tooltipStrokeWidth = 1.0 : null;
      tooltipBorderRadius == null ? tooltipBorderRadius = new border_radius.BorderRadius.all(new ui.Radius.circular(4.0)) : null;
      toggledItemColor == null ? toggledItemColor = isLight ? C[43] || CT.C43 : C[44] || CT.C44 : null;
      toggledItemStrokeColor == null ? toggledItemStrokeColor = isLight ? C[14] || CT.C14 : C[35] || CT.C35 : null;
      return new maps_theme.SfMapsThemeData.raw({brightness: brightness, titleTextStyle: titleTextStyle, layerColor: layerColor, layerStrokeColor: layerStrokeColor, shapeHoverColor: shapeHoverColor, shapeHoverStrokeColor: shapeHoverStrokeColor, legendTextStyle: legendTextStyle, markerIconColor: markerIconColor, markerIconStrokeColor: markerIconStrokeColor, dataLabelTextStyle: dataLabelTextStyle, bubbleColor: bubbleColor, bubbleStrokeColor: bubbleStrokeColor, bubbleStrokeWidth: bubbleStrokeWidth, bubbleHoverColor: bubbleHoverColor, bubbleHoverStrokeColor: bubbleHoverStrokeColor, bubbleHoverStrokeWidth: bubbleHoverStrokeWidth, selectionColor: selectionColor, selectionStrokeColor: selectionStrokeColor, tooltipColor: tooltipColor, tooltipStrokeColor: tooltipStrokeColor, tooltipStrokeWidth: tooltipStrokeWidth, tooltipBorderRadius: tooltipBorderRadius, selectionStrokeWidth: selectionStrokeWidth, layerStrokeWidth: layerStrokeWidth, shapeHoverStrokeWidth: shapeHoverStrokeWidth, markerIconStrokeWidth: markerIconStrokeWidth, toggledItemColor: toggledItemColor, toggledItemStrokeColor: toggledItemStrokeColor, toggledItemStrokeWidth: toggledItemStrokeWidth});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21, t0$22, t0$23, t0$24, t0$25, t0$26;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : null;
      let layerColor = opts && 'layerColor' in opts ? opts.layerColor : null;
      let layerStrokeColor = opts && 'layerStrokeColor' in opts ? opts.layerStrokeColor : null;
      let layerStrokeWidth = opts && 'layerStrokeWidth' in opts ? opts.layerStrokeWidth : null;
      let shapeHoverColor = opts && 'shapeHoverColor' in opts ? opts.shapeHoverColor : null;
      let shapeHoverStrokeColor = opts && 'shapeHoverStrokeColor' in opts ? opts.shapeHoverStrokeColor : null;
      let shapeHoverStrokeWidth = opts && 'shapeHoverStrokeWidth' in opts ? opts.shapeHoverStrokeWidth : null;
      let legendTextStyle = opts && 'legendTextStyle' in opts ? opts.legendTextStyle : null;
      let markerIconColor = opts && 'markerIconColor' in opts ? opts.markerIconColor : null;
      let markerIconStrokeColor = opts && 'markerIconStrokeColor' in opts ? opts.markerIconStrokeColor : null;
      let markerIconStrokeWidth = opts && 'markerIconStrokeWidth' in opts ? opts.markerIconStrokeWidth : null;
      let dataLabelTextStyle = opts && 'dataLabelTextStyle' in opts ? opts.dataLabelTextStyle : null;
      let bubbleColor = opts && 'bubbleColor' in opts ? opts.bubbleColor : null;
      let bubbleStrokeColor = opts && 'bubbleStrokeColor' in opts ? opts.bubbleStrokeColor : null;
      let bubbleStrokeWidth = opts && 'bubbleStrokeWidth' in opts ? opts.bubbleStrokeWidth : null;
      let bubbleHoverColor = opts && 'bubbleHoverColor' in opts ? opts.bubbleHoverColor : null;
      let bubbleHoverStrokeColor = opts && 'bubbleHoverStrokeColor' in opts ? opts.bubbleHoverStrokeColor : null;
      let bubbleHoverStrokeWidth = opts && 'bubbleHoverStrokeWidth' in opts ? opts.bubbleHoverStrokeWidth : null;
      let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
      let selectionStrokeColor = opts && 'selectionStrokeColor' in opts ? opts.selectionStrokeColor : null;
      let selectionStrokeWidth = opts && 'selectionStrokeWidth' in opts ? opts.selectionStrokeWidth : null;
      let tooltipColor = opts && 'tooltipColor' in opts ? opts.tooltipColor : null;
      let tooltipStrokeColor = opts && 'tooltipStrokeColor' in opts ? opts.tooltipStrokeColor : null;
      let tooltipStrokeWidth = opts && 'tooltipStrokeWidth' in opts ? opts.tooltipStrokeWidth : null;
      let tooltipBorderRadius = opts && 'tooltipBorderRadius' in opts ? opts.tooltipBorderRadius : null;
      let toggledItemColor = opts && 'toggledItemColor' in opts ? opts.toggledItemColor : null;
      let toggledItemStrokeColor = opts && 'toggledItemStrokeColor' in opts ? opts.toggledItemStrokeColor : null;
      let toggledItemStrokeWidth = opts && 'toggledItemStrokeWidth' in opts ? opts.toggledItemStrokeWidth : null;
      return new maps_theme.SfMapsThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), titleTextStyle: (t0$ = titleTextStyle, t0$ == null ? this.titleTextStyle : t0$), layerColor: (t0$0 = layerColor, t0$0 == null ? this.layerColor : t0$0), layerStrokeColor: (t0$1 = layerStrokeColor, t0$1 == null ? this.layerStrokeColor : t0$1), layerStrokeWidth: (t0$2 = layerStrokeWidth, t0$2 == null ? this.layerStrokeWidth : t0$2), shapeHoverColor: (t0$3 = shapeHoverColor, t0$3 == null ? this.shapeHoverColor : t0$3), shapeHoverStrokeColor: (t0$4 = shapeHoverStrokeColor, t0$4 == null ? this.shapeHoverStrokeColor : t0$4), shapeHoverStrokeWidth: (t0$5 = shapeHoverStrokeWidth, t0$5 == null ? this.shapeHoverStrokeWidth : t0$5), legendTextStyle: (t0$6 = legendTextStyle, t0$6 == null ? this.legendTextStyle : t0$6), markerIconColor: (t0$7 = markerIconColor, t0$7 == null ? this.markerIconColor : t0$7), markerIconStrokeColor: (t0$8 = markerIconStrokeColor, t0$8 == null ? this.markerIconStrokeColor : t0$8), markerIconStrokeWidth: (t0$9 = markerIconStrokeWidth, t0$9 == null ? this.markerIconStrokeWidth : t0$9), dataLabelTextStyle: (t0$10 = dataLabelTextStyle, t0$10 == null ? this.dataLabelTextStyle : t0$10), bubbleColor: (t0$11 = bubbleColor, t0$11 == null ? this.bubbleColor : t0$11), bubbleStrokeColor: (t0$12 = bubbleStrokeColor, t0$12 == null ? this.bubbleStrokeColor : t0$12), bubbleStrokeWidth: (t0$13 = bubbleStrokeWidth, t0$13 == null ? this.bubbleStrokeWidth : t0$13), bubbleHoverColor: (t0$14 = bubbleHoverColor, t0$14 == null ? this.bubbleHoverColor : t0$14), bubbleHoverStrokeColor: (t0$15 = bubbleHoverStrokeColor, t0$15 == null ? this.bubbleHoverStrokeColor : t0$15), bubbleHoverStrokeWidth: (t0$16 = bubbleHoverStrokeWidth, t0$16 == null ? this.bubbleHoverStrokeWidth : t0$16), selectionColor: (t0$17 = selectionColor, t0$17 == null ? this.selectionColor : t0$17), selectionStrokeColor: (t0$18 = selectionStrokeColor, t0$18 == null ? this.selectionStrokeColor : t0$18), selectionStrokeWidth: (t0$19 = selectionStrokeWidth, t0$19 == null ? this.selectionStrokeWidth : t0$19), tooltipColor: (t0$20 = tooltipColor, t0$20 == null ? this.tooltipColor : t0$20), tooltipStrokeColor: (t0$21 = tooltipStrokeColor, t0$21 == null ? this.tooltipStrokeColor : t0$21), tooltipStrokeWidth: (t0$22 = tooltipStrokeWidth, t0$22 == null ? this.tooltipStrokeWidth : t0$22), tooltipBorderRadius: (t0$23 = tooltipBorderRadius, t0$23 == null ? this.tooltipBorderRadius : t0$23), toggledItemColor: (t0$24 = toggledItemColor, t0$24 == null ? this.toggledItemColor : t0$24), toggledItemStrokeColor: (t0$25 = toggledItemStrokeColor, t0$25 == null ? this.toggledItemStrokeColor : t0$25), toggledItemStrokeWidth: (t0$26 = toggledItemStrokeWidth, t0$26 == null ? this.toggledItemStrokeWidth : t0$26)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[11], 988, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return maps_theme.SfMapsThemeData.new({titleTextStyle: text_style.TextStyle.lerp(a.titleTextStyle, b.titleTextStyle, t), layerColor: ui.Color.lerp(a.layerColor, b.layerColor, t), layerStrokeColor: ui.Color.lerp(a.layerStrokeColor, b.layerStrokeColor, t), layerStrokeWidth: ui.lerpDouble(a.layerStrokeWidth, b.layerStrokeWidth, t), shapeHoverColor: ui.Color.lerp(a.shapeHoverColor, b.shapeHoverColor, t), shapeHoverStrokeColor: ui.Color.lerp(a.shapeHoverStrokeColor, b.shapeHoverStrokeColor, t), shapeHoverStrokeWidth: ui.lerpDouble(a.shapeHoverStrokeWidth, b.shapeHoverStrokeWidth, t), legendTextStyle: text_style.TextStyle.lerp(a.legendTextStyle, b.legendTextStyle, t), markerIconColor: ui.Color.lerp(a.markerIconColor, b.markerIconColor, t), markerIconStrokeColor: ui.Color.lerp(a.markerIconStrokeColor, b.markerIconStrokeColor, t), markerIconStrokeWidth: ui.lerpDouble(a.markerIconStrokeWidth, b.markerIconStrokeWidth, t), dataLabelTextStyle: text_style.TextStyle.lerp(a.dataLabelTextStyle, b.dataLabelTextStyle, t), bubbleColor: ui.Color.lerp(a.bubbleColor, b.bubbleColor, t), bubbleStrokeColor: ui.Color.lerp(a.bubbleStrokeColor, b.bubbleStrokeColor, t), bubbleStrokeWidth: ui.lerpDouble(a.bubbleStrokeWidth, b.bubbleStrokeWidth, t), bubbleHoverColor: ui.Color.lerp(a.bubbleHoverColor, b.bubbleHoverColor, t), bubbleHoverStrokeColor: ui.Color.lerp(a.bubbleHoverStrokeColor, b.bubbleHoverStrokeColor, t), bubbleHoverStrokeWidth: ui.lerpDouble(a.bubbleHoverStrokeWidth, b.bubbleHoverStrokeWidth, t), selectionColor: ui.Color.lerp(a.selectionColor, b.selectionColor, t), selectionStrokeColor: ui.Color.lerp(a.selectionStrokeColor, b.selectionStrokeColor, t), selectionStrokeWidth: ui.lerpDouble(a.selectionStrokeWidth, b.selectionStrokeWidth, t), tooltipColor: ui.Color.lerp(a.tooltipColor, b.tooltipColor, t), tooltipStrokeColor: ui.Color.lerp(a.tooltipStrokeColor, b.tooltipStrokeColor, t), tooltipStrokeWidth: ui.lerpDouble(a.tooltipStrokeWidth, b.tooltipStrokeWidth, t), tooltipBorderRadius: border_radius.BorderRadiusGeometry.lerp(a.tooltipBorderRadius, b.tooltipBorderRadius, t), toggledItemColor: ui.Color.lerp(a.toggledItemColor, b.toggledItemColor, t), toggledItemStrokeColor: ui.Color.lerp(a.toggledItemStrokeColor, b.toggledItemStrokeColor, t), toggledItemStrokeWidth: ui.lerpDouble(a.toggledItemStrokeWidth, b.toggledItemStrokeWidth, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.SfMapsThemeDataL().is(other) && dart.equals(other.titleTextStyle, this.titleTextStyle) && dart.equals(other.layerColor, this.layerColor) && dart.equals(other.layerStrokeColor, this.layerStrokeColor) && other.layerStrokeWidth == this.layerStrokeWidth && dart.equals(other.shapeHoverColor, this.shapeHoverColor) && dart.equals(other.shapeHoverStrokeColor, this.shapeHoverStrokeColor) && other.shapeHoverStrokeWidth == this.shapeHoverStrokeWidth && dart.equals(other.legendTextStyle, this.legendTextStyle) && dart.equals(other.markerIconColor, this.markerIconColor) && dart.equals(other.markerIconStrokeColor, this.markerIconStrokeColor) && other.markerIconStrokeWidth == this.markerIconStrokeWidth && dart.equals(other.dataLabelTextStyle, this.dataLabelTextStyle) && dart.equals(other.bubbleColor, this.bubbleColor) && dart.equals(other.bubbleStrokeColor, this.bubbleStrokeColor) && other.bubbleStrokeWidth == this.bubbleStrokeWidth && dart.equals(other.bubbleHoverColor, this.bubbleHoverColor) && dart.equals(other.bubbleHoverStrokeColor, this.bubbleHoverStrokeColor) && other.bubbleHoverStrokeWidth == this.bubbleHoverStrokeWidth && dart.equals(other.selectionColor, this.selectionColor) && dart.equals(other.selectionStrokeColor, this.selectionStrokeColor) && other.selectionStrokeWidth == this.selectionStrokeWidth && dart.equals(other.tooltipColor, this.tooltipColor) && dart.equals(other.tooltipStrokeColor, this.tooltipStrokeColor) && other.tooltipStrokeWidth == this.tooltipStrokeWidth && dart.equals(other.tooltipBorderRadius, this.tooltipBorderRadius) && dart.equals(other.toggledItemColor, this.toggledItemColor) && dart.equals(other.toggledItemStrokeColor, this.toggledItemStrokeColor) && other.toggledItemStrokeWidth == this.toggledItemStrokeWidth;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.titleTextStyle, this.layerColor, this.layerStrokeColor, this.layerStrokeWidth, this.shapeHoverColor, this.shapeHoverStrokeColor, this.shapeHoverStrokeWidth, this.legendTextStyle, this.markerIconColor, this.markerIconStrokeColor, this.markerIconStrokeWidth, this.dataLabelTextStyle, this.bubbleColor, this.bubbleStrokeColor, this.bubbleStrokeWidth, this.bubbleHoverColor, this.bubbleHoverStrokeColor, this.bubbleHoverStrokeWidth, this.selectionColor, this.selectionStrokeColor, this.selectionStrokeWidth, this.tooltipColor, this.tooltipStrokeColor, this.tooltipStrokeWidth, this.tooltipBorderRadius, this.toggledItemColor, this.toggledItemStrokeColor, this.toggledItemStrokeWidth]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = maps_theme.SfMapsThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("titleTextStyle", this.titleTextStyle, {defaultValue: defaultData.titleTextStyle}));
      properties.add(new colors.ColorProperty.new("layerColor", this.layerColor, {defaultValue: defaultData.layerColor}));
      properties.add(new colors.ColorProperty.new("layerStrokeColor", this.layerStrokeColor, {defaultValue: defaultData.layerStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("layerStrokeWidth", this.layerStrokeWidth, {defaultValue: defaultData.layerStrokeWidth}));
      properties.add(new colors.ColorProperty.new("shapeHoverColor", this.shapeHoverColor, {defaultValue: defaultData.shapeHoverColor}));
      properties.add(new colors.ColorProperty.new("shapeHoverStrokeColor", this.shapeHoverStrokeColor, {defaultValue: defaultData.shapeHoverStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("shapeHoverStrokeWidth", this.shapeHoverStrokeWidth, {defaultValue: defaultData.shapeHoverStrokeWidth}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("legendTextStyle", this.legendTextStyle, {defaultValue: defaultData.legendTextStyle}));
      properties.add(new colors.ColorProperty.new("markerIconColor", this.markerIconColor, {defaultValue: defaultData.markerIconColor}));
      properties.add(new colors.ColorProperty.new("markerIconStrokeColor", this.markerIconStrokeColor, {defaultValue: defaultData.markerIconStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("markerIconStrokeWidth", this.markerIconStrokeWidth, {defaultValue: defaultData.markerIconStrokeWidth}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("dataLabelTextStyle", this.dataLabelTextStyle, {defaultValue: defaultData.dataLabelTextStyle}));
      properties.add(new colors.ColorProperty.new("bubbleColor", this.bubbleColor, {defaultValue: defaultData.bubbleColor}));
      properties.add(new colors.ColorProperty.new("bubbleStrokeColor", this.bubbleStrokeColor, {defaultValue: defaultData.bubbleStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("bubbleStrokeWidth", this.bubbleStrokeWidth, {defaultValue: defaultData.bubbleStrokeWidth}));
      properties.add(new colors.ColorProperty.new("bubbleHoverColor", this.bubbleHoverColor, {defaultValue: defaultData.bubbleHoverColor}));
      properties.add(new colors.ColorProperty.new("bubbleHoverStrokeColor", this.bubbleHoverStrokeColor, {defaultValue: defaultData.bubbleHoverStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("bubbleHoverStrokeWidth", this.bubbleHoverStrokeWidth, {defaultValue: defaultData.bubbleHoverStrokeWidth}));
      properties.add(new colors.ColorProperty.new("selectionColor", this.selectionColor, {defaultValue: defaultData.selectionColor}));
      properties.add(new colors.ColorProperty.new("selectionStrokeColor", this.selectionStrokeColor, {defaultValue: defaultData.selectionStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("selectionStrokeWidth", this.selectionStrokeWidth, {defaultValue: defaultData.selectionStrokeWidth}));
      properties.add(new colors.ColorProperty.new("tooltipColor", this.tooltipColor, {defaultValue: defaultData.tooltipColor}));
      properties.add(new colors.ColorProperty.new("tooltipStrokeColor", this.tooltipStrokeColor, {defaultValue: defaultData.tooltipStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("tooltipStrokeWidth", this.tooltipStrokeWidth, {defaultValue: defaultData.tooltipStrokeWidth}));
      properties.add(new (T.DiagnosticsPropertyOfBorderRadiusGeometryL()).new("tooltipBorderRadius", this.tooltipBorderRadius, {defaultValue: defaultData.tooltipBorderRadius}));
      properties.add(new colors.ColorProperty.new("toggledItemColor", this.toggledItemColor, {defaultValue: defaultData.toggledItemColor}));
      properties.add(new colors.ColorProperty.new("toggledItemStrokeColor", this.toggledItemStrokeColor, {defaultValue: defaultData.toggledItemStrokeColor}));
      properties.add(new diagnostics.DoubleProperty.new("toggledItemStrokeWidth", this.toggledItemStrokeWidth, {defaultValue: defaultData.toggledItemStrokeWidth}));
    }
  };
  (maps_theme.SfMapsThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : null;
    let layerColor = opts && 'layerColor' in opts ? opts.layerColor : null;
    let layerStrokeColor = opts && 'layerStrokeColor' in opts ? opts.layerStrokeColor : null;
    let layerStrokeWidth = opts && 'layerStrokeWidth' in opts ? opts.layerStrokeWidth : null;
    let shapeHoverColor = opts && 'shapeHoverColor' in opts ? opts.shapeHoverColor : null;
    let shapeHoverStrokeColor = opts && 'shapeHoverStrokeColor' in opts ? opts.shapeHoverStrokeColor : null;
    let shapeHoverStrokeWidth = opts && 'shapeHoverStrokeWidth' in opts ? opts.shapeHoverStrokeWidth : null;
    let legendTextStyle = opts && 'legendTextStyle' in opts ? opts.legendTextStyle : null;
    let markerIconColor = opts && 'markerIconColor' in opts ? opts.markerIconColor : null;
    let markerIconStrokeColor = opts && 'markerIconStrokeColor' in opts ? opts.markerIconStrokeColor : null;
    let markerIconStrokeWidth = opts && 'markerIconStrokeWidth' in opts ? opts.markerIconStrokeWidth : null;
    let dataLabelTextStyle = opts && 'dataLabelTextStyle' in opts ? opts.dataLabelTextStyle : null;
    let bubbleColor = opts && 'bubbleColor' in opts ? opts.bubbleColor : null;
    let bubbleStrokeColor = opts && 'bubbleStrokeColor' in opts ? opts.bubbleStrokeColor : null;
    let bubbleStrokeWidth = opts && 'bubbleStrokeWidth' in opts ? opts.bubbleStrokeWidth : null;
    let bubbleHoverColor = opts && 'bubbleHoverColor' in opts ? opts.bubbleHoverColor : null;
    let bubbleHoverStrokeColor = opts && 'bubbleHoverStrokeColor' in opts ? opts.bubbleHoverStrokeColor : null;
    let bubbleHoverStrokeWidth = opts && 'bubbleHoverStrokeWidth' in opts ? opts.bubbleHoverStrokeWidth : null;
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let selectionStrokeColor = opts && 'selectionStrokeColor' in opts ? opts.selectionStrokeColor : null;
    let selectionStrokeWidth = opts && 'selectionStrokeWidth' in opts ? opts.selectionStrokeWidth : null;
    let tooltipColor = opts && 'tooltipColor' in opts ? opts.tooltipColor : null;
    let tooltipStrokeColor = opts && 'tooltipStrokeColor' in opts ? opts.tooltipStrokeColor : null;
    let tooltipStrokeWidth = opts && 'tooltipStrokeWidth' in opts ? opts.tooltipStrokeWidth : null;
    let tooltipBorderRadius = opts && 'tooltipBorderRadius' in opts ? opts.tooltipBorderRadius : null;
    let toggledItemColor = opts && 'toggledItemColor' in opts ? opts.toggledItemColor : null;
    let toggledItemStrokeColor = opts && 'toggledItemStrokeColor' in opts ? opts.toggledItemStrokeColor : null;
    let toggledItemStrokeWidth = opts && 'toggledItemStrokeWidth' in opts ? opts.toggledItemStrokeWidth : null;
    this[brightness$2] = brightness;
    this[titleTextStyle$0] = titleTextStyle;
    this[layerColor$] = layerColor;
    this[layerStrokeColor$] = layerStrokeColor;
    this[layerStrokeWidth$] = layerStrokeWidth;
    this[shapeHoverColor$] = shapeHoverColor;
    this[shapeHoverStrokeColor$] = shapeHoverStrokeColor;
    this[shapeHoverStrokeWidth$] = shapeHoverStrokeWidth;
    this[legendTextStyle$] = legendTextStyle;
    this[markerIconColor$] = markerIconColor;
    this[markerIconStrokeColor$] = markerIconStrokeColor;
    this[markerIconStrokeWidth$] = markerIconStrokeWidth;
    this[dataLabelTextStyle$] = dataLabelTextStyle;
    this[bubbleColor$] = bubbleColor;
    this[bubbleStrokeColor$] = bubbleStrokeColor;
    this[bubbleStrokeWidth$] = bubbleStrokeWidth;
    this[bubbleHoverColor$] = bubbleHoverColor;
    this[bubbleHoverStrokeColor$] = bubbleHoverStrokeColor;
    this[bubbleHoverStrokeWidth$] = bubbleHoverStrokeWidth;
    this[selectionColor$0] = selectionColor;
    this[selectionStrokeColor$] = selectionStrokeColor;
    this[selectionStrokeWidth$] = selectionStrokeWidth;
    this[tooltipColor$] = tooltipColor;
    this[tooltipStrokeColor$] = tooltipStrokeColor;
    this[tooltipStrokeWidth$] = tooltipStrokeWidth;
    this[tooltipBorderRadius$] = tooltipBorderRadius;
    this[toggledItemColor$] = toggledItemColor;
    this[toggledItemStrokeColor$] = toggledItemStrokeColor;
    this[toggledItemStrokeWidth$] = toggledItemStrokeWidth;
    ;
  }).prototype = maps_theme.SfMapsThemeData.prototype;
  dart.addTypeTests(maps_theme.SfMapsThemeData);
  dart.addTypeCaches(maps_theme.SfMapsThemeData);
  dart.setMethodSignature(maps_theme.SfMapsThemeData, () => ({
    __proto__: dart.getMethods(maps_theme.SfMapsThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(maps_theme.SfMapsThemeData), [], {brightness: dart.legacy(ui.Brightness), bubbleColor: dart.legacy(ui.Color), bubbleHoverColor: dart.legacy(ui.Color), bubbleHoverStrokeColor: dart.legacy(ui.Color), bubbleHoverStrokeWidth: dart.legacy(core.double), bubbleStrokeColor: dart.legacy(ui.Color), bubbleStrokeWidth: dart.legacy(core.double), dataLabelTextStyle: dart.legacy(text_style.TextStyle), layerColor: dart.legacy(ui.Color), layerStrokeColor: dart.legacy(ui.Color), layerStrokeWidth: dart.legacy(core.double), legendTextStyle: dart.legacy(text_style.TextStyle), markerIconColor: dart.legacy(ui.Color), markerIconStrokeColor: dart.legacy(ui.Color), markerIconStrokeWidth: dart.legacy(core.double), selectionColor: dart.legacy(ui.Color), selectionStrokeColor: dart.legacy(ui.Color), selectionStrokeWidth: dart.legacy(core.double), shapeHoverColor: dart.legacy(ui.Color), shapeHoverStrokeColor: dart.legacy(ui.Color), shapeHoverStrokeWidth: dart.legacy(core.double), titleTextStyle: dart.legacy(text_style.TextStyle), toggledItemColor: dart.legacy(ui.Color), toggledItemStrokeColor: dart.legacy(ui.Color), toggledItemStrokeWidth: dart.legacy(core.double), tooltipBorderRadius: dart.legacy(border_radius.BorderRadiusGeometry), tooltipColor: dart.legacy(ui.Color), tooltipStrokeColor: dart.legacy(ui.Color), tooltipStrokeWidth: dart.legacy(core.double)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(maps_theme.SfMapsThemeData, () => ({
    __proto__: dart.getGetters(maps_theme.SfMapsThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(maps_theme.SfMapsThemeData, I[10]);
  dart.setFieldSignature(maps_theme.SfMapsThemeData, () => ({
    __proto__: dart.getFields(maps_theme.SfMapsThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    titleTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    layerColor: dart.finalFieldType(dart.legacy(ui.Color)),
    layerStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    layerStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    shapeHoverColor: dart.finalFieldType(dart.legacy(ui.Color)),
    shapeHoverStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    shapeHoverStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    legendTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    markerIconColor: dart.finalFieldType(dart.legacy(ui.Color)),
    markerIconStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    markerIconStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    dataLabelTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    bubbleColor: dart.finalFieldType(dart.legacy(ui.Color)),
    bubbleStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    bubbleStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    bubbleHoverColor: dart.finalFieldType(dart.legacy(ui.Color)),
    bubbleHoverStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    bubbleHoverStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    selectionColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    tooltipColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    tooltipBorderRadius: dart.finalFieldType(dart.legacy(border_radius.BorderRadiusGeometry)),
    toggledItemColor: dart.finalFieldType(dart.legacy(ui.Color)),
    toggledItemStrokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    toggledItemStrokeWidth: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(maps_theme.SfMapsThemeData, ['_equals']);
  dart.defineExtensionAccessors(maps_theme.SfMapsThemeData, ['hashCode']);
  var data$6 = dart.privateName(gauges_theme, "SfGaugeTheme.data");
  var child$5 = dart.privateName(gauges_theme, "SfGaugeTheme.child");
  gauges_theme.SfGaugeTheme = class SfGaugeTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$6];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$5];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sfGaugeTheme = context.dependOnInheritedWidgetOfExactType(T.SfGaugeThemeL());
      t0$ = (t0 = sfGaugeTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).gaugeThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfGaugeThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfGaugeThemeL());
      return this === ancestorTheme ? child : new gauges_theme.SfGaugeTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[45] || CT.C45});
    }
  };
  (gauges_theme.SfGaugeTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$6] = data;
    this[child$5] = child;
    gauges_theme.SfGaugeTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = gauges_theme.SfGaugeTheme.prototype;
  dart.addTypeTests(gauges_theme.SfGaugeTheme);
  dart.addTypeCaches(gauges_theme.SfGaugeTheme);
  dart.setMethodSignature(gauges_theme.SfGaugeTheme, () => ({
    __proto__: dart.getMethods(gauges_theme.SfGaugeTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(gauges_theme.SfGaugeTheme, I[12]);
  dart.setFieldSignature(gauges_theme.SfGaugeTheme, () => ({
    __proto__: dart.getFields(gauges_theme.SfGaugeTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(gauges_theme.SfGaugeThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$3 = dart.privateName(gauges_theme, "SfGaugeThemeData.brightness");
  var backgroundColor$4 = dart.privateName(gauges_theme, "SfGaugeThemeData.backgroundColor");
  var titleColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.titleColor");
  var axisLabelColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.axisLabelColor");
  var axisLineColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.axisLineColor");
  var majorTickColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.majorTickColor");
  var minorTickColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.minorTickColor");
  var markerColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.markerColor");
  var markerBorderColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.markerBorderColor");
  var needleColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.needleColor");
  var knobColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.knobColor");
  var knobBorderColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.knobBorderColor");
  var tailColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.tailColor");
  var tailBorderColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.tailBorderColor");
  var rangePointerColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.rangePointerColor");
  var rangeColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.rangeColor");
  var titleBorderColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.titleBorderColor");
  var titleBackgroundColor$ = dart.privateName(gauges_theme, "SfGaugeThemeData.titleBackgroundColor");
  const Object_Diagnosticable$36$2 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$2.new = function() {
  }).prototype = Object_Diagnosticable$36$2.prototype;
  dart.applyMixin(Object_Diagnosticable$36$2, diagnostics.Diagnosticable);
  gauges_theme.SfGaugeThemeData = class SfGaugeThemeData extends Object_Diagnosticable$36$2 {
    get brightness() {
      return this[brightness$3];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get backgroundColor() {
      return this[backgroundColor$4];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get titleColor() {
      return this[titleColor$];
    }
    set titleColor(value) {
      super.titleColor = value;
    }
    get axisLabelColor() {
      return this[axisLabelColor$];
    }
    set axisLabelColor(value) {
      super.axisLabelColor = value;
    }
    get axisLineColor() {
      return this[axisLineColor$];
    }
    set axisLineColor(value) {
      super.axisLineColor = value;
    }
    get majorTickColor() {
      return this[majorTickColor$];
    }
    set majorTickColor(value) {
      super.majorTickColor = value;
    }
    get minorTickColor() {
      return this[minorTickColor$];
    }
    set minorTickColor(value) {
      super.minorTickColor = value;
    }
    get markerColor() {
      return this[markerColor$];
    }
    set markerColor(value) {
      super.markerColor = value;
    }
    get markerBorderColor() {
      return this[markerBorderColor$];
    }
    set markerBorderColor(value) {
      super.markerBorderColor = value;
    }
    get needleColor() {
      return this[needleColor$];
    }
    set needleColor(value) {
      super.needleColor = value;
    }
    get knobColor() {
      return this[knobColor$];
    }
    set knobColor(value) {
      super.knobColor = value;
    }
    get knobBorderColor() {
      return this[knobBorderColor$];
    }
    set knobBorderColor(value) {
      super.knobBorderColor = value;
    }
    get tailColor() {
      return this[tailColor$];
    }
    set tailColor(value) {
      super.tailColor = value;
    }
    get tailBorderColor() {
      return this[tailBorderColor$];
    }
    set tailBorderColor(value) {
      super.tailBorderColor = value;
    }
    get rangePointerColor() {
      return this[rangePointerColor$];
    }
    set rangePointerColor(value) {
      super.rangePointerColor = value;
    }
    get rangeColor() {
      return this[rangeColor$];
    }
    set rangeColor(value) {
      super.rangeColor = value;
    }
    get titleBorderColor() {
      return this[titleBorderColor$];
    }
    set titleBorderColor(value) {
      super.titleBorderColor = value;
    }
    get titleBackgroundColor() {
      return this[titleBackgroundColor$];
    }
    set titleBackgroundColor(value) {
      super.titleBackgroundColor = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let titleColor = opts && 'titleColor' in opts ? opts.titleColor : null;
      let axisLabelColor = opts && 'axisLabelColor' in opts ? opts.axisLabelColor : null;
      let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
      let majorTickColor = opts && 'majorTickColor' in opts ? opts.majorTickColor : null;
      let minorTickColor = opts && 'minorTickColor' in opts ? opts.minorTickColor : null;
      let markerColor = opts && 'markerColor' in opts ? opts.markerColor : null;
      let markerBorderColor = opts && 'markerBorderColor' in opts ? opts.markerBorderColor : null;
      let needleColor = opts && 'needleColor' in opts ? opts.needleColor : null;
      let knobColor = opts && 'knobColor' in opts ? opts.knobColor : null;
      let knobBorderColor = opts && 'knobBorderColor' in opts ? opts.knobBorderColor : null;
      let tailColor = opts && 'tailColor' in opts ? opts.tailColor : null;
      let tailBorderColor = opts && 'tailBorderColor' in opts ? opts.tailBorderColor : null;
      let rangePointerColor = opts && 'rangePointerColor' in opts ? opts.rangePointerColor : null;
      let rangeColor = opts && 'rangeColor' in opts ? opts.rangeColor : null;
      let titleBorderColor = opts && 'titleBorderColor' in opts ? opts.titleBorderColor : null;
      let titleBackgroundColor = opts && 'titleBackgroundColor' in opts ? opts.titleBackgroundColor : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      backgroundColor == null ? backgroundColor = colors$.Colors.transparent : null;
      titleColor == null ? titleColor = isLight ? C[49] || CT.C49 : C[43] || CT.C43 : null;
      axisLabelColor == null ? axisLabelColor = isLight ? C[49] || CT.C49 : C[43] || CT.C43 : null;
      axisLineColor == null ? axisLineColor = isLight ? C[50] || CT.C50 : C[51] || CT.C51 : null;
      majorTickColor == null ? majorTickColor = isLight ? C[52] || CT.C52 : C[53] || CT.C53 : null;
      minorTickColor == null ? minorTickColor = isLight ? C[54] || CT.C54 : C[55] || CT.C55 : null;
      markerColor == null ? markerColor = isLight ? C[56] || CT.C56 : C[56] || CT.C56 : null;
      markerBorderColor == null ? markerBorderColor = isLight ? colors$.Colors.transparent : colors$.Colors.transparent : null;
      needleColor == null ? needleColor = isLight ? C[57] || CT.C57 : C[58] || CT.C58 : null;
      knobColor == null ? knobColor = isLight ? C[57] || CT.C57 : C[58] || CT.C58 : null;
      knobBorderColor == null ? knobBorderColor = isLight ? colors$.Colors.transparent : colors$.Colors.transparent : null;
      tailColor == null ? tailColor = isLight ? C[57] || CT.C57 : C[58] || CT.C58 : null;
      tailBorderColor == null ? tailBorderColor = isLight ? colors$.Colors.transparent : colors$.Colors.transparent : null;
      rangePointerColor == null ? rangePointerColor = isLight ? C[56] || CT.C56 : C[56] || CT.C56 : null;
      rangeColor == null ? rangeColor = isLight ? C[59] || CT.C59 : C[59] || CT.C59 : null;
      titleBorderColor == null ? titleBorderColor = isLight ? colors$.Colors.transparent : colors$.Colors.transparent : null;
      titleBackgroundColor == null ? titleBackgroundColor = isLight ? colors$.Colors.transparent : colors$.Colors.transparent : null;
      return new gauges_theme.SfGaugeThemeData.raw({brightness: brightness, backgroundColor: backgroundColor, titleColor: titleColor, axisLabelColor: axisLabelColor, axisLineColor: axisLineColor, majorTickColor: majorTickColor, minorTickColor: minorTickColor, markerColor: markerColor, markerBorderColor: markerBorderColor, needleColor: needleColor, knobColor: knobColor, knobBorderColor: knobBorderColor, tailColor: tailColor, tailBorderColor: tailBorderColor, rangePointerColor: rangePointerColor, rangeColor: rangeColor, titleBorderColor: titleBorderColor, titleBackgroundColor: titleBackgroundColor});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let titleColor = opts && 'titleColor' in opts ? opts.titleColor : null;
      let axisLabelColor = opts && 'axisLabelColor' in opts ? opts.axisLabelColor : null;
      let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
      let majorTickColor = opts && 'majorTickColor' in opts ? opts.majorTickColor : null;
      let minorTickColor = opts && 'minorTickColor' in opts ? opts.minorTickColor : null;
      let markerColor = opts && 'markerColor' in opts ? opts.markerColor : null;
      let markerBorderColor = opts && 'markerBorderColor' in opts ? opts.markerBorderColor : null;
      let needleColor = opts && 'needleColor' in opts ? opts.needleColor : null;
      let knobColor = opts && 'knobColor' in opts ? opts.knobColor : null;
      let knobBorderColor = opts && 'knobBorderColor' in opts ? opts.knobBorderColor : null;
      let tailColor = opts && 'tailColor' in opts ? opts.tailColor : null;
      let tailBorderColor = opts && 'tailBorderColor' in opts ? opts.tailBorderColor : null;
      let rangePointerColor = opts && 'rangePointerColor' in opts ? opts.rangePointerColor : null;
      let rangeColor = opts && 'rangeColor' in opts ? opts.rangeColor : null;
      let titleBorderColor = opts && 'titleBorderColor' in opts ? opts.titleBorderColor : null;
      let titleBackgroundColor = opts && 'titleBackgroundColor' in opts ? opts.titleBackgroundColor : null;
      return new gauges_theme.SfGaugeThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), backgroundColor: (t0$ = backgroundColor, t0$ == null ? this.backgroundColor : t0$), titleColor: (t0$0 = titleColor, t0$0 == null ? this.titleColor : t0$0), axisLabelColor: (t0$1 = axisLabelColor, t0$1 == null ? this.axisLabelColor : t0$1), axisLineColor: (t0$2 = axisLineColor, t0$2 == null ? this.axisLineColor : t0$2), majorTickColor: (t0$3 = majorTickColor, t0$3 == null ? this.majorTickColor : t0$3), minorTickColor: (t0$4 = minorTickColor, t0$4 == null ? this.minorTickColor : t0$4), markerColor: (t0$5 = markerColor, t0$5 == null ? this.markerColor : t0$5), markerBorderColor: (t0$6 = markerBorderColor, t0$6 == null ? this.markerBorderColor : t0$6), needleColor: (t0$7 = needleColor, t0$7 == null ? this.needleColor : t0$7), knobColor: (t0$8 = knobColor, t0$8 == null ? this.knobColor : t0$8), knobBorderColor: (t0$9 = knobBorderColor, t0$9 == null ? this.knobBorderColor : t0$9), tailColor: (t0$10 = tailColor, t0$10 == null ? this.tailColor : t0$10), tailBorderColor: (t0$11 = tailBorderColor, t0$11 == null ? this.tailBorderColor : t0$11), rangePointerColor: (t0$12 = rangePointerColor, t0$12 == null ? this.rangePointerColor : t0$12), rangeColor: (t0$13 = rangeColor, t0$13 == null ? this.rangeColor : t0$13), titleBorderColor: (t0$14 = titleBorderColor, t0$14 == null ? this.titleBorderColor : t0$14), titleBackgroundColor: (t0$15 = titleBackgroundColor, t0$15 == null ? this.titleBackgroundColor : t0$15)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[13], 779, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return gauges_theme.SfGaugeThemeData.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), titleColor: ui.Color.lerp(a.titleColor, b.titleColor, t), axisLabelColor: ui.Color.lerp(a.axisLabelColor, b.axisLabelColor, t), axisLineColor: ui.Color.lerp(a.axisLineColor, b.axisLineColor, t), majorTickColor: ui.Color.lerp(a.majorTickColor, b.majorTickColor, t), minorTickColor: ui.Color.lerp(a.minorTickColor, b.minorTickColor, t), markerColor: ui.Color.lerp(a.markerColor, b.markerColor, t), markerBorderColor: ui.Color.lerp(a.markerBorderColor, b.markerBorderColor, t), needleColor: ui.Color.lerp(a.needleColor, b.needleColor, t), knobColor: ui.Color.lerp(a.knobColor, b.knobColor, t), knobBorderColor: ui.Color.lerp(a.knobBorderColor, b.knobBorderColor, t), tailColor: ui.Color.lerp(a.tailColor, b.tailColor, t), tailBorderColor: ui.Color.lerp(a.tailBorderColor, b.tailBorderColor, t), rangePointerColor: ui.Color.lerp(a.rangePointerColor, b.rangePointerColor, t), rangeColor: ui.Color.lerp(a.rangeColor, b.rangeColor, t), titleBorderColor: ui.Color.lerp(a.titleBorderColor, b.titleBorderColor, t), titleBackgroundColor: ui.Color.lerp(a.titleBackgroundColor, b.titleBackgroundColor, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfGaugeThemeDataL().as(other);
      return dart.equals(typedOther.backgroundColor, this.backgroundColor) && dart.equals(typedOther.titleColor, this.titleColor) && dart.equals(typedOther.axisLabelColor, this.axisLabelColor) && dart.equals(typedOther.axisLineColor, this.axisLineColor) && dart.equals(typedOther.majorTickColor, this.majorTickColor) && dart.equals(typedOther.minorTickColor, this.minorTickColor) && dart.equals(typedOther.markerColor, this.markerColor) && dart.equals(typedOther.markerBorderColor, this.markerBorderColor) && dart.equals(typedOther.needleColor, this.needleColor) && dart.equals(typedOther.knobColor, this.knobColor) && dart.equals(typedOther.knobBorderColor, this.knobBorderColor) && dart.equals(typedOther.tailColor, this.tailColor) && dart.equals(typedOther.tailBorderColor, this.tailBorderColor) && dart.equals(typedOther.rangePointerColor, this.rangePointerColor) && dart.equals(typedOther.rangeColor, this.rangeColor) && dart.equals(typedOther.titleBorderColor, this.titleBorderColor) && dart.equals(typedOther.titleBackgroundColor, this.titleBackgroundColor);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.titleColor, this.axisLabelColor, this.axisLineColor, this.majorTickColor, this.minorTickColor, this.markerColor, this.markerBorderColor, this.needleColor, this.knobColor, this.knobBorderColor, this.tailColor, this.tailBorderColor, this.rangePointerColor, this.rangeColor, this.titleBorderColor, this.titleBackgroundColor]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = gauges_theme.SfGaugeThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: defaultData.backgroundColor}));
      properties.add(new colors.ColorProperty.new("titleColor", this.titleColor, {defaultValue: defaultData.titleColor}));
      properties.add(new colors.ColorProperty.new("axisLabelColor", this.axisLabelColor, {defaultValue: defaultData.axisLabelColor}));
      properties.add(new colors.ColorProperty.new("axisLineColor", this.axisLineColor, {defaultValue: defaultData.axisLineColor}));
      properties.add(new colors.ColorProperty.new("majorTickColor", this.majorTickColor, {defaultValue: defaultData.majorTickColor}));
      properties.add(new colors.ColorProperty.new("minorTickColor", this.minorTickColor, {defaultValue: defaultData.minorTickColor}));
      properties.add(new colors.ColorProperty.new("markerColor", this.markerColor, {defaultValue: defaultData.markerColor}));
      properties.add(new colors.ColorProperty.new("markerBorderColor", this.markerBorderColor, {defaultValue: defaultData.markerBorderColor}));
      properties.add(new colors.ColorProperty.new("needleColor", this.needleColor, {defaultValue: defaultData.needleColor}));
      properties.add(new colors.ColorProperty.new("knobColor", this.knobColor, {defaultValue: defaultData.knobColor}));
      properties.add(new colors.ColorProperty.new("knobBorderColor", this.knobBorderColor, {defaultValue: defaultData.knobBorderColor}));
      properties.add(new colors.ColorProperty.new("tailColor", this.tailColor, {defaultValue: defaultData.tailColor}));
      properties.add(new colors.ColorProperty.new("tailBorderColor", this.tailBorderColor, {defaultValue: defaultData.tailBorderColor}));
      properties.add(new colors.ColorProperty.new("rangePointerColor", this.rangePointerColor, {defaultValue: defaultData.rangePointerColor}));
      properties.add(new colors.ColorProperty.new("rangeColor", this.rangeColor, {defaultValue: defaultData.rangeColor}));
      properties.add(new colors.ColorProperty.new("titleBorderColor", this.titleBorderColor, {defaultValue: defaultData.titleBorderColor}));
      properties.add(new colors.ColorProperty.new("titleBackgroundColor", this.titleBackgroundColor, {defaultValue: defaultData.titleBackgroundColor}));
    }
  };
  (gauges_theme.SfGaugeThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let titleColor = opts && 'titleColor' in opts ? opts.titleColor : null;
    let axisLabelColor = opts && 'axisLabelColor' in opts ? opts.axisLabelColor : null;
    let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
    let majorTickColor = opts && 'majorTickColor' in opts ? opts.majorTickColor : null;
    let minorTickColor = opts && 'minorTickColor' in opts ? opts.minorTickColor : null;
    let markerColor = opts && 'markerColor' in opts ? opts.markerColor : null;
    let markerBorderColor = opts && 'markerBorderColor' in opts ? opts.markerBorderColor : null;
    let needleColor = opts && 'needleColor' in opts ? opts.needleColor : null;
    let knobColor = opts && 'knobColor' in opts ? opts.knobColor : null;
    let knobBorderColor = opts && 'knobBorderColor' in opts ? opts.knobBorderColor : null;
    let tailColor = opts && 'tailColor' in opts ? opts.tailColor : null;
    let tailBorderColor = opts && 'tailBorderColor' in opts ? opts.tailBorderColor : null;
    let rangePointerColor = opts && 'rangePointerColor' in opts ? opts.rangePointerColor : null;
    let rangeColor = opts && 'rangeColor' in opts ? opts.rangeColor : null;
    let titleBorderColor = opts && 'titleBorderColor' in opts ? opts.titleBorderColor : null;
    let titleBackgroundColor = opts && 'titleBackgroundColor' in opts ? opts.titleBackgroundColor : null;
    this[brightness$3] = brightness;
    this[backgroundColor$4] = backgroundColor;
    this[titleColor$] = titleColor;
    this[axisLabelColor$] = axisLabelColor;
    this[axisLineColor$] = axisLineColor;
    this[majorTickColor$] = majorTickColor;
    this[minorTickColor$] = minorTickColor;
    this[markerColor$] = markerColor;
    this[markerBorderColor$] = markerBorderColor;
    this[needleColor$] = needleColor;
    this[knobColor$] = knobColor;
    this[knobBorderColor$] = knobBorderColor;
    this[tailColor$] = tailColor;
    this[tailBorderColor$] = tailBorderColor;
    this[rangePointerColor$] = rangePointerColor;
    this[rangeColor$] = rangeColor;
    this[titleBorderColor$] = titleBorderColor;
    this[titleBackgroundColor$] = titleBackgroundColor;
    ;
  }).prototype = gauges_theme.SfGaugeThemeData.prototype;
  dart.addTypeTests(gauges_theme.SfGaugeThemeData);
  dart.addTypeCaches(gauges_theme.SfGaugeThemeData);
  dart.setMethodSignature(gauges_theme.SfGaugeThemeData, () => ({
    __proto__: dart.getMethods(gauges_theme.SfGaugeThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(gauges_theme.SfGaugeThemeData), [], {axisLabelColor: dart.legacy(ui.Color), axisLineColor: dart.legacy(ui.Color), backgroundColor: dart.legacy(ui.Color), brightness: dart.legacy(ui.Brightness), knobBorderColor: dart.legacy(ui.Color), knobColor: dart.legacy(ui.Color), majorTickColor: dart.legacy(ui.Color), markerBorderColor: dart.legacy(ui.Color), markerColor: dart.legacy(ui.Color), minorTickColor: dart.legacy(ui.Color), needleColor: dart.legacy(ui.Color), rangeColor: dart.legacy(ui.Color), rangePointerColor: dart.legacy(ui.Color), tailBorderColor: dart.legacy(ui.Color), tailColor: dart.legacy(ui.Color), titleBackgroundColor: dart.legacy(ui.Color), titleBorderColor: dart.legacy(ui.Color), titleColor: dart.legacy(ui.Color)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(gauges_theme.SfGaugeThemeData, () => ({
    __proto__: dart.getGetters(gauges_theme.SfGaugeThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(gauges_theme.SfGaugeThemeData, I[12]);
  dart.setFieldSignature(gauges_theme.SfGaugeThemeData, () => ({
    __proto__: dart.getFields(gauges_theme.SfGaugeThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    titleColor: dart.finalFieldType(dart.legacy(ui.Color)),
    axisLabelColor: dart.finalFieldType(dart.legacy(ui.Color)),
    axisLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    majorTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    minorTickColor: dart.finalFieldType(dart.legacy(ui.Color)),
    markerColor: dart.finalFieldType(dart.legacy(ui.Color)),
    markerBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    needleColor: dart.finalFieldType(dart.legacy(ui.Color)),
    knobColor: dart.finalFieldType(dart.legacy(ui.Color)),
    knobBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tailColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tailBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    rangePointerColor: dart.finalFieldType(dart.legacy(ui.Color)),
    rangeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    titleBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    titleBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  dart.defineExtensionMethods(gauges_theme.SfGaugeThemeData, ['_equals']);
  dart.defineExtensionAccessors(gauges_theme.SfGaugeThemeData, ['hashCode']);
  var data$7 = dart.privateName(daterangepicker_theme, "SfDateRangePickerTheme.data");
  var child$6 = dart.privateName(daterangepicker_theme, "SfDateRangePickerTheme.child");
  daterangepicker_theme.SfDateRangePickerTheme = class SfDateRangePickerTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$7];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$6];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sfDateRangePickerTheme = context.dependOnInheritedWidgetOfExactType(T.SfDateRangePickerThemeL());
      t0$ = (t0 = sfDateRangePickerTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).dateRangePickerThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfDateRangePickerThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfDateRangePickerThemeL());
      return this === ancestorTheme ? child : new daterangepicker_theme.SfDateRangePickerTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[60] || CT.C60});
    }
  };
  (daterangepicker_theme.SfDateRangePickerTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$7] = data;
    this[child$6] = child;
    daterangepicker_theme.SfDateRangePickerTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = daterangepicker_theme.SfDateRangePickerTheme.prototype;
  dart.addTypeTests(daterangepicker_theme.SfDateRangePickerTheme);
  dart.addTypeCaches(daterangepicker_theme.SfDateRangePickerTheme);
  dart.setMethodSignature(daterangepicker_theme.SfDateRangePickerTheme, () => ({
    __proto__: dart.getMethods(daterangepicker_theme.SfDateRangePickerTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(daterangepicker_theme.SfDateRangePickerTheme, I[14]);
  dart.setFieldSignature(daterangepicker_theme.SfDateRangePickerTheme, () => ({
    __proto__: dart.getFields(daterangepicker_theme.SfDateRangePickerTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(daterangepicker_theme.SfDateRangePickerThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$4 = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.brightness");
  var backgroundColor$5 = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.backgroundColor");
  var viewHeaderTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.viewHeaderTextStyle");
  var headerTextStyle$1 = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.headerTextStyle");
  var trailingDatesTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.trailingDatesTextStyle");
  var leadingCellTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.leadingCellTextStyle");
  var activeDatesTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.activeDatesTextStyle");
  var cellTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.cellTextStyle");
  var rangeSelectionTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.rangeSelectionTextStyle");
  var leadingDatesTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.leadingDatesTextStyle");
  var disabledDatesTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.disabledDatesTextStyle");
  var disabledCellTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.disabledCellTextStyle");
  var selectionColor$1 = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.selectionColor");
  var rangeSelectionColor$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.rangeSelectionColor");
  var selectionTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.selectionTextStyle");
  var startRangeSelectionColor$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.startRangeSelectionColor");
  var endRangeSelectionColor$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.endRangeSelectionColor");
  var headerBackgroundColor$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.headerBackgroundColor");
  var viewHeaderBackgroundColor$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.viewHeaderBackgroundColor");
  var blackoutDatesTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.blackoutDatesTextStyle");
  var todayHighlightColor$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.todayHighlightColor");
  var todayTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.todayTextStyle");
  var todayCellTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.todayCellTextStyle");
  var weekendDatesTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.weekendDatesTextStyle");
  var specialDatesTextStyle$ = dart.privateName(daterangepicker_theme, "SfDateRangePickerThemeData.specialDatesTextStyle");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  const Object_Diagnosticable$36$3 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$3.new = function() {
  }).prototype = Object_Diagnosticable$36$3.prototype;
  dart.applyMixin(Object_Diagnosticable$36$3, diagnostics.Diagnosticable);
  daterangepicker_theme.SfDateRangePickerThemeData = class SfDateRangePickerThemeData extends Object_Diagnosticable$36$3 {
    get brightness() {
      return this[brightness$4];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get backgroundColor() {
      return this[backgroundColor$5];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get viewHeaderTextStyle() {
      return this[viewHeaderTextStyle$];
    }
    set viewHeaderTextStyle(value) {
      super.viewHeaderTextStyle = value;
    }
    get headerTextStyle() {
      return this[headerTextStyle$1];
    }
    set headerTextStyle(value) {
      super.headerTextStyle = value;
    }
    get trailingDatesTextStyle() {
      return this[trailingDatesTextStyle$];
    }
    set trailingDatesTextStyle(value) {
      super.trailingDatesTextStyle = value;
    }
    get leadingCellTextStyle() {
      return this[leadingCellTextStyle$];
    }
    set leadingCellTextStyle(value) {
      super.leadingCellTextStyle = value;
    }
    get activeDatesTextStyle() {
      return this[activeDatesTextStyle$];
    }
    set activeDatesTextStyle(value) {
      super.activeDatesTextStyle = value;
    }
    get cellTextStyle() {
      return this[cellTextStyle$];
    }
    set cellTextStyle(value) {
      super.cellTextStyle = value;
    }
    get rangeSelectionTextStyle() {
      return this[rangeSelectionTextStyle$];
    }
    set rangeSelectionTextStyle(value) {
      super.rangeSelectionTextStyle = value;
    }
    get leadingDatesTextStyle() {
      return this[leadingDatesTextStyle$];
    }
    set leadingDatesTextStyle(value) {
      super.leadingDatesTextStyle = value;
    }
    get disabledDatesTextStyle() {
      return this[disabledDatesTextStyle$];
    }
    set disabledDatesTextStyle(value) {
      super.disabledDatesTextStyle = value;
    }
    get disabledCellTextStyle() {
      return this[disabledCellTextStyle$];
    }
    set disabledCellTextStyle(value) {
      super.disabledCellTextStyle = value;
    }
    get selectionColor() {
      return this[selectionColor$1];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get rangeSelectionColor() {
      return this[rangeSelectionColor$];
    }
    set rangeSelectionColor(value) {
      super.rangeSelectionColor = value;
    }
    get selectionTextStyle() {
      return this[selectionTextStyle$];
    }
    set selectionTextStyle(value) {
      super.selectionTextStyle = value;
    }
    get startRangeSelectionColor() {
      return this[startRangeSelectionColor$];
    }
    set startRangeSelectionColor(value) {
      super.startRangeSelectionColor = value;
    }
    get endRangeSelectionColor() {
      return this[endRangeSelectionColor$];
    }
    set endRangeSelectionColor(value) {
      super.endRangeSelectionColor = value;
    }
    get headerBackgroundColor() {
      return this[headerBackgroundColor$];
    }
    set headerBackgroundColor(value) {
      super.headerBackgroundColor = value;
    }
    get viewHeaderBackgroundColor() {
      return this[viewHeaderBackgroundColor$];
    }
    set viewHeaderBackgroundColor(value) {
      super.viewHeaderBackgroundColor = value;
    }
    get blackoutDatesTextStyle() {
      return this[blackoutDatesTextStyle$];
    }
    set blackoutDatesTextStyle(value) {
      super.blackoutDatesTextStyle = value;
    }
    get todayHighlightColor() {
      return this[todayHighlightColor$];
    }
    set todayHighlightColor(value) {
      super.todayHighlightColor = value;
    }
    get todayTextStyle() {
      return this[todayTextStyle$];
    }
    set todayTextStyle(value) {
      super.todayTextStyle = value;
    }
    get todayCellTextStyle() {
      return this[todayCellTextStyle$];
    }
    set todayCellTextStyle(value) {
      super.todayCellTextStyle = value;
    }
    get weekendDatesTextStyle() {
      return this[weekendDatesTextStyle$];
    }
    set weekendDatesTextStyle(value) {
      super.weekendDatesTextStyle = value;
    }
    get specialDatesTextStyle() {
      return this[specialDatesTextStyle$];
    }
    set specialDatesTextStyle(value) {
      super.specialDatesTextStyle = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let startRangeSelectionColor = opts && 'startRangeSelectionColor' in opts ? opts.startRangeSelectionColor : null;
      let endRangeSelectionColor = opts && 'endRangeSelectionColor' in opts ? opts.endRangeSelectionColor : null;
      let headerBackgroundColor = opts && 'headerBackgroundColor' in opts ? opts.headerBackgroundColor : null;
      let viewHeaderBackgroundColor = opts && 'viewHeaderBackgroundColor' in opts ? opts.viewHeaderBackgroundColor : null;
      let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
      let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
      let rangeSelectionColor = opts && 'rangeSelectionColor' in opts ? opts.rangeSelectionColor : null;
      let viewHeaderTextStyle = opts && 'viewHeaderTextStyle' in opts ? opts.viewHeaderTextStyle : null;
      let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
      let trailingDatesTextStyle = opts && 'trailingDatesTextStyle' in opts ? opts.trailingDatesTextStyle : null;
      let leadingCellTextStyle = opts && 'leadingCellTextStyle' in opts ? opts.leadingCellTextStyle : null;
      let activeDatesTextStyle = opts && 'activeDatesTextStyle' in opts ? opts.activeDatesTextStyle : null;
      let cellTextStyle = opts && 'cellTextStyle' in opts ? opts.cellTextStyle : null;
      let rangeSelectionTextStyle = opts && 'rangeSelectionTextStyle' in opts ? opts.rangeSelectionTextStyle : null;
      let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
      let disabledDatesTextStyle = opts && 'disabledDatesTextStyle' in opts ? opts.disabledDatesTextStyle : null;
      let disabledCellTextStyle = opts && 'disabledCellTextStyle' in opts ? opts.disabledCellTextStyle : null;
      let selectionTextStyle = opts && 'selectionTextStyle' in opts ? opts.selectionTextStyle : null;
      let blackoutDatesTextStyle = opts && 'blackoutDatesTextStyle' in opts ? opts.blackoutDatesTextStyle : null;
      let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
      let todayCellTextStyle = opts && 'todayCellTextStyle' in opts ? opts.todayCellTextStyle : null;
      let weekendDatesTextStyle = opts && 'weekendDatesTextStyle' in opts ? opts.weekendDatesTextStyle : null;
      let specialDatesTextStyle = opts && 'specialDatesTextStyle' in opts ? opts.specialDatesTextStyle : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      backgroundColor == null ? backgroundColor = colors$.Colors.transparent : null;
      headerBackgroundColor == null ? headerBackgroundColor = colors$.Colors.transparent : null;
      viewHeaderBackgroundColor == null ? viewHeaderBackgroundColor = colors$.Colors.transparent : null;
      viewHeaderTextStyle == null ? viewHeaderTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black87, fontSize: 11.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 11.0, fontFamily: "Roboto"}) : null;
      headerTextStyle == null ? headerTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black87, fontSize: 16.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 16.0, fontFamily: "Roboto"}) : null;
      trailingDatesTextStyle == null ? trailingDatesTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black54, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white54, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      leadingCellTextStyle == null ? leadingCellTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black54, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white54, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      activeDatesTextStyle == null ? activeDatesTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black87, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      cellTextStyle == null ? cellTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black87, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      leadingDatesTextStyle == null ? leadingDatesTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black54, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white54, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      rangeSelectionTextStyle == null ? rangeSelectionTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black87, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      disabledDatesTextStyle == null ? disabledDatesTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black26, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white38, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      disabledCellTextStyle == null ? disabledCellTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black26, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white38, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      selectionTextStyle == null ? selectionTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.black, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      todayTextStyle == null ? todayTextStyle = isLight ? C[64] || CT.C64 : C[64] || CT.C64 : null;
      todayCellTextStyle == null ? todayCellTextStyle = isLight ? C[64] || CT.C64 : C[64] || CT.C64 : null;
      specialDatesTextStyle == null ? specialDatesTextStyle = isLight ? C[65] || CT.C65 : C[67] || CT.C67 : null;
      return new daterangepicker_theme.SfDateRangePickerThemeData.raw({brightness: brightness, backgroundColor: backgroundColor, viewHeaderTextStyle: viewHeaderTextStyle, headerTextStyle: headerTextStyle, trailingDatesTextStyle: trailingDatesTextStyle, leadingCellTextStyle: leadingCellTextStyle, activeDatesTextStyle: activeDatesTextStyle, cellTextStyle: cellTextStyle, rangeSelectionTextStyle: rangeSelectionTextStyle, rangeSelectionColor: rangeSelectionColor, leadingDatesTextStyle: leadingDatesTextStyle, disabledDatesTextStyle: disabledDatesTextStyle, disabledCellTextStyle: disabledCellTextStyle, selectionColor: selectionColor, selectionTextStyle: selectionTextStyle, startRangeSelectionColor: startRangeSelectionColor, endRangeSelectionColor: endRangeSelectionColor, headerBackgroundColor: headerBackgroundColor, viewHeaderBackgroundColor: viewHeaderBackgroundColor, blackoutDatesTextStyle: blackoutDatesTextStyle, todayHighlightColor: todayHighlightColor, todayTextStyle: todayTextStyle, todayCellTextStyle: todayCellTextStyle, weekendDatesTextStyle: weekendDatesTextStyle, specialDatesTextStyle: specialDatesTextStyle});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21, t0$22;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let viewHeaderTextStyle = opts && 'viewHeaderTextStyle' in opts ? opts.viewHeaderTextStyle : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
      let trailingDatesTextStyle = opts && 'trailingDatesTextStyle' in opts ? opts.trailingDatesTextStyle : null;
      let leadingCellTextStyle = opts && 'leadingCellTextStyle' in opts ? opts.leadingCellTextStyle : null;
      let activeDatesTextStyle = opts && 'activeDatesTextStyle' in opts ? opts.activeDatesTextStyle : null;
      let cellTextStyle = opts && 'cellTextStyle' in opts ? opts.cellTextStyle : null;
      let rangeSelectionTextStyle = opts && 'rangeSelectionTextStyle' in opts ? opts.rangeSelectionTextStyle : null;
      let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
      let disabledDatesTextStyle = opts && 'disabledDatesTextStyle' in opts ? opts.disabledDatesTextStyle : null;
      let disabledCellTextStyle = opts && 'disabledCellTextStyle' in opts ? opts.disabledCellTextStyle : null;
      let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
      let rangeSelectionColor = opts && 'rangeSelectionColor' in opts ? opts.rangeSelectionColor : null;
      let selectionTextStyle = opts && 'selectionTextStyle' in opts ? opts.selectionTextStyle : null;
      let startRangeSelectionColor = opts && 'startRangeSelectionColor' in opts ? opts.startRangeSelectionColor : null;
      let endRangeSelectionColor = opts && 'endRangeSelectionColor' in opts ? opts.endRangeSelectionColor : null;
      let headerBackgroundColor = opts && 'headerBackgroundColor' in opts ? opts.headerBackgroundColor : null;
      let viewHeaderBackgroundColor = opts && 'viewHeaderBackgroundColor' in opts ? opts.viewHeaderBackgroundColor : null;
      let blackoutDatesTextStyle = opts && 'blackoutDatesTextStyle' in opts ? opts.blackoutDatesTextStyle : null;
      let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
      let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
      let todayCellTextStyle = opts && 'todayCellTextStyle' in opts ? opts.todayCellTextStyle : null;
      let weekendDatesTextStyle = opts && 'weekendDatesTextStyle' in opts ? opts.weekendDatesTextStyle : null;
      let specialDatesTextStyle = opts && 'specialDatesTextStyle' in opts ? opts.specialDatesTextStyle : null;
      return new daterangepicker_theme.SfDateRangePickerThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), backgroundColor: (t0$ = backgroundColor, t0$ == null ? this.backgroundColor : t0$), viewHeaderTextStyle: (t0$0 = viewHeaderTextStyle, t0$0 == null ? this.viewHeaderTextStyle : t0$0), headerTextStyle: (t0$1 = headerTextStyle, t0$1 == null ? this.headerTextStyle : t0$1), trailingDatesTextStyle: (t0$2 = trailingDatesTextStyle, t0$2 == null ? this.trailingDatesTextStyle : t0$2), leadingCellTextStyle: (t0$3 = leadingCellTextStyle, t0$3 == null ? this.leadingCellTextStyle : t0$3), activeDatesTextStyle: (t0$4 = activeDatesTextStyle, t0$4 == null ? this.activeDatesTextStyle : t0$4), cellTextStyle: (t0$5 = cellTextStyle, t0$5 == null ? this.cellTextStyle : t0$5), rangeSelectionTextStyle: (t0$6 = rangeSelectionTextStyle, t0$6 == null ? this.rangeSelectionTextStyle : t0$6), rangeSelectionColor: (t0$7 = rangeSelectionColor, t0$7 == null ? this.rangeSelectionColor : t0$7), leadingDatesTextStyle: (t0$8 = leadingDatesTextStyle, t0$8 == null ? this.leadingDatesTextStyle : t0$8), disabledDatesTextStyle: (t0$9 = disabledDatesTextStyle, t0$9 == null ? this.disabledDatesTextStyle : t0$9), disabledCellTextStyle: (t0$10 = disabledCellTextStyle, t0$10 == null ? this.disabledCellTextStyle : t0$10), selectionColor: (t0$11 = selectionColor, t0$11 == null ? this.selectionColor : t0$11), selectionTextStyle: (t0$12 = selectionTextStyle, t0$12 == null ? this.selectionTextStyle : t0$12), startRangeSelectionColor: (t0$13 = startRangeSelectionColor, t0$13 == null ? this.startRangeSelectionColor : t0$13), endRangeSelectionColor: (t0$14 = endRangeSelectionColor, t0$14 == null ? this.endRangeSelectionColor : t0$14), headerBackgroundColor: (t0$15 = headerBackgroundColor, t0$15 == null ? this.headerBackgroundColor : t0$15), viewHeaderBackgroundColor: (t0$16 = viewHeaderBackgroundColor, t0$16 == null ? this.viewHeaderBackgroundColor : t0$16), blackoutDatesTextStyle: (t0$17 = blackoutDatesTextStyle, t0$17 == null ? this.blackoutDatesTextStyle : t0$17), todayHighlightColor: (t0$18 = todayHighlightColor, t0$18 == null ? this.todayHighlightColor : t0$18), todayTextStyle: (t0$19 = todayTextStyle, t0$19 == null ? this.todayTextStyle : t0$19), todayCellTextStyle: (t0$20 = todayCellTextStyle, t0$20 == null ? this.todayCellTextStyle : t0$20), weekendDatesTextStyle: (t0$21 = weekendDatesTextStyle, t0$21 == null ? this.weekendDatesTextStyle : t0$21), specialDatesTextStyle: (t0$22 = specialDatesTextStyle, t0$22 == null ? this.specialDatesTextStyle : t0$22)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[15], 862, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return daterangepicker_theme.SfDateRangePickerThemeData.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), rangeSelectionColor: ui.Color.lerp(a.rangeSelectionColor, b.rangeSelectionColor, t), selectionColor: ui.Color.lerp(a.selectionColor, b.selectionColor, t), startRangeSelectionColor: ui.Color.lerp(a.startRangeSelectionColor, b.startRangeSelectionColor, t), endRangeSelectionColor: ui.Color.lerp(a.endRangeSelectionColor, b.endRangeSelectionColor, t), headerBackgroundColor: ui.Color.lerp(a.headerBackgroundColor, b.headerBackgroundColor, t), viewHeaderBackgroundColor: ui.Color.lerp(a.viewHeaderBackgroundColor, b.viewHeaderBackgroundColor, t), todayHighlightColor: ui.Color.lerp(a.todayHighlightColor, b.todayHighlightColor, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfDateRangePickerThemeDataL().as(other);
      return dart.equals(typedOther.viewHeaderTextStyle, this.viewHeaderTextStyle) && dart.equals(typedOther.backgroundColor, this.backgroundColor) && dart.equals(typedOther.headerTextStyle, this.headerTextStyle) && dart.equals(typedOther.trailingDatesTextStyle, this.trailingDatesTextStyle) && dart.equals(typedOther.leadingCellTextStyle, this.leadingCellTextStyle) && dart.equals(typedOther.activeDatesTextStyle, this.activeDatesTextStyle) && dart.equals(typedOther.cellTextStyle, this.cellTextStyle) && dart.equals(typedOther.rangeSelectionTextStyle, this.rangeSelectionTextStyle) && dart.equals(typedOther.rangeSelectionColor, this.rangeSelectionColor) && dart.equals(typedOther.leadingDatesTextStyle, this.leadingDatesTextStyle) && dart.equals(typedOther.disabledDatesTextStyle, this.disabledDatesTextStyle) && dart.equals(typedOther.disabledCellTextStyle, this.disabledCellTextStyle) && dart.equals(typedOther.selectionColor, this.selectionColor) && dart.equals(typedOther.selectionTextStyle, this.selectionTextStyle) && dart.equals(typedOther.startRangeSelectionColor, this.startRangeSelectionColor) && dart.equals(typedOther.endRangeSelectionColor, this.endRangeSelectionColor) && dart.equals(typedOther.headerBackgroundColor, this.headerBackgroundColor) && dart.equals(typedOther.viewHeaderBackgroundColor, this.viewHeaderBackgroundColor) && dart.equals(typedOther.blackoutDatesTextStyle, this.blackoutDatesTextStyle) && dart.equals(typedOther.todayHighlightColor, this.todayHighlightColor) && dart.equals(typedOther.todayTextStyle, this.todayTextStyle) && dart.equals(typedOther.todayCellTextStyle, this.todayCellTextStyle) && dart.equals(typedOther.weekendDatesTextStyle, this.weekendDatesTextStyle) && dart.equals(typedOther.specialDatesTextStyle, this.specialDatesTextStyle);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.viewHeaderTextStyle, this.backgroundColor, this.headerTextStyle, this.trailingDatesTextStyle, this.leadingCellTextStyle, this.activeDatesTextStyle, this.cellTextStyle, this.rangeSelectionTextStyle, this.rangeSelectionColor, this.leadingDatesTextStyle, this.disabledDatesTextStyle, this.disabledCellTextStyle, this.selectionColor, this.selectionTextStyle, this.startRangeSelectionColor, this.endRangeSelectionColor, this.headerBackgroundColor, this.viewHeaderBackgroundColor, this.blackoutDatesTextStyle, this.todayHighlightColor, this.todayTextStyle, this.todayCellTextStyle, this.weekendDatesTextStyle, this.specialDatesTextStyle]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = daterangepicker_theme.SfDateRangePickerThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: defaultData.backgroundColor}));
      properties.add(new colors.ColorProperty.new("rangeSelectionColor", this.rangeSelectionColor, {defaultValue: defaultData.rangeSelectionColor}));
      properties.add(new colors.ColorProperty.new("selectionColor", this.selectionColor, {defaultValue: defaultData.selectionColor}));
      properties.add(new colors.ColorProperty.new("startRangeSelectionColor", this.startRangeSelectionColor, {defaultValue: defaultData.startRangeSelectionColor}));
      properties.add(new colors.ColorProperty.new("endRangeSelectionColor", this.endRangeSelectionColor, {defaultValue: defaultData.endRangeSelectionColor}));
      properties.add(new colors.ColorProperty.new("headerBackgroundColor", this.headerBackgroundColor, {defaultValue: defaultData.headerBackgroundColor}));
      properties.add(new colors.ColorProperty.new("viewHeaderBackgroundColor", this.viewHeaderBackgroundColor, {defaultValue: defaultData.viewHeaderBackgroundColor}));
      properties.add(new colors.ColorProperty.new("todayHighlightColor", this.todayHighlightColor, {defaultValue: defaultData.todayHighlightColor}));
    }
  };
  (daterangepicker_theme.SfDateRangePickerThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let viewHeaderTextStyle = opts && 'viewHeaderTextStyle' in opts ? opts.viewHeaderTextStyle : null;
    let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
    let trailingDatesTextStyle = opts && 'trailingDatesTextStyle' in opts ? opts.trailingDatesTextStyle : null;
    let leadingCellTextStyle = opts && 'leadingCellTextStyle' in opts ? opts.leadingCellTextStyle : null;
    let activeDatesTextStyle = opts && 'activeDatesTextStyle' in opts ? opts.activeDatesTextStyle : null;
    let cellTextStyle = opts && 'cellTextStyle' in opts ? opts.cellTextStyle : null;
    let rangeSelectionTextStyle = opts && 'rangeSelectionTextStyle' in opts ? opts.rangeSelectionTextStyle : null;
    let rangeSelectionColor = opts && 'rangeSelectionColor' in opts ? opts.rangeSelectionColor : null;
    let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
    let disabledDatesTextStyle = opts && 'disabledDatesTextStyle' in opts ? opts.disabledDatesTextStyle : null;
    let disabledCellTextStyle = opts && 'disabledCellTextStyle' in opts ? opts.disabledCellTextStyle : null;
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let selectionTextStyle = opts && 'selectionTextStyle' in opts ? opts.selectionTextStyle : null;
    let startRangeSelectionColor = opts && 'startRangeSelectionColor' in opts ? opts.startRangeSelectionColor : null;
    let endRangeSelectionColor = opts && 'endRangeSelectionColor' in opts ? opts.endRangeSelectionColor : null;
    let headerBackgroundColor = opts && 'headerBackgroundColor' in opts ? opts.headerBackgroundColor : null;
    let viewHeaderBackgroundColor = opts && 'viewHeaderBackgroundColor' in opts ? opts.viewHeaderBackgroundColor : null;
    let blackoutDatesTextStyle = opts && 'blackoutDatesTextStyle' in opts ? opts.blackoutDatesTextStyle : null;
    let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
    let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
    let todayCellTextStyle = opts && 'todayCellTextStyle' in opts ? opts.todayCellTextStyle : null;
    let weekendDatesTextStyle = opts && 'weekendDatesTextStyle' in opts ? opts.weekendDatesTextStyle : null;
    let specialDatesTextStyle = opts && 'specialDatesTextStyle' in opts ? opts.specialDatesTextStyle : null;
    this[brightness$4] = brightness;
    this[backgroundColor$5] = backgroundColor;
    this[viewHeaderTextStyle$] = viewHeaderTextStyle;
    this[headerTextStyle$1] = headerTextStyle;
    this[trailingDatesTextStyle$] = trailingDatesTextStyle;
    this[leadingCellTextStyle$] = leadingCellTextStyle;
    this[activeDatesTextStyle$] = activeDatesTextStyle;
    this[cellTextStyle$] = cellTextStyle;
    this[rangeSelectionTextStyle$] = rangeSelectionTextStyle;
    this[rangeSelectionColor$] = rangeSelectionColor;
    this[leadingDatesTextStyle$] = leadingDatesTextStyle;
    this[disabledDatesTextStyle$] = disabledDatesTextStyle;
    this[disabledCellTextStyle$] = disabledCellTextStyle;
    this[selectionColor$1] = selectionColor;
    this[selectionTextStyle$] = selectionTextStyle;
    this[startRangeSelectionColor$] = startRangeSelectionColor;
    this[endRangeSelectionColor$] = endRangeSelectionColor;
    this[headerBackgroundColor$] = headerBackgroundColor;
    this[viewHeaderBackgroundColor$] = viewHeaderBackgroundColor;
    this[blackoutDatesTextStyle$] = blackoutDatesTextStyle;
    this[todayHighlightColor$] = todayHighlightColor;
    this[todayTextStyle$] = todayTextStyle;
    this[todayCellTextStyle$] = todayCellTextStyle;
    this[weekendDatesTextStyle$] = weekendDatesTextStyle;
    this[specialDatesTextStyle$] = specialDatesTextStyle;
    ;
  }).prototype = daterangepicker_theme.SfDateRangePickerThemeData.prototype;
  dart.addTypeTests(daterangepicker_theme.SfDateRangePickerThemeData);
  dart.addTypeCaches(daterangepicker_theme.SfDateRangePickerThemeData);
  dart.setMethodSignature(daterangepicker_theme.SfDateRangePickerThemeData, () => ({
    __proto__: dart.getMethods(daterangepicker_theme.SfDateRangePickerThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(daterangepicker_theme.SfDateRangePickerThemeData), [], {activeDatesTextStyle: dart.legacy(text_style.TextStyle), backgroundColor: dart.legacy(ui.Color), blackoutDatesTextStyle: dart.legacy(text_style.TextStyle), brightness: dart.legacy(ui.Brightness), cellTextStyle: dart.legacy(text_style.TextStyle), disabledCellTextStyle: dart.legacy(text_style.TextStyle), disabledDatesTextStyle: dart.legacy(text_style.TextStyle), endRangeSelectionColor: dart.legacy(ui.Color), headerBackgroundColor: dart.legacy(ui.Color), headerTextStyle: dart.legacy(text_style.TextStyle), leadingCellTextStyle: dart.legacy(text_style.TextStyle), leadingDatesTextStyle: dart.legacy(text_style.TextStyle), rangeSelectionColor: dart.legacy(ui.Color), rangeSelectionTextStyle: dart.legacy(text_style.TextStyle), selectionColor: dart.legacy(ui.Color), selectionTextStyle: dart.legacy(text_style.TextStyle), specialDatesTextStyle: dart.legacy(text_style.TextStyle), startRangeSelectionColor: dart.legacy(ui.Color), todayCellTextStyle: dart.legacy(text_style.TextStyle), todayHighlightColor: dart.legacy(ui.Color), todayTextStyle: dart.legacy(text_style.TextStyle), trailingDatesTextStyle: dart.legacy(text_style.TextStyle), viewHeaderBackgroundColor: dart.legacy(ui.Color), viewHeaderTextStyle: dart.legacy(text_style.TextStyle), weekendDatesTextStyle: dart.legacy(text_style.TextStyle)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(daterangepicker_theme.SfDateRangePickerThemeData, () => ({
    __proto__: dart.getGetters(daterangepicker_theme.SfDateRangePickerThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(daterangepicker_theme.SfDateRangePickerThemeData, I[14]);
  dart.setFieldSignature(daterangepicker_theme.SfDateRangePickerThemeData, () => ({
    __proto__: dart.getFields(daterangepicker_theme.SfDateRangePickerThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    viewHeaderTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    headerTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    trailingDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    leadingCellTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    activeDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    cellTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    rangeSelectionTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    leadingDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    disabledDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    disabledCellTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.legacy(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    startRangeSelectionColor: dart.finalFieldType(dart.legacy(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.legacy(ui.Color)),
    headerBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    viewHeaderBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    blackoutDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    todayHighlightColor: dart.finalFieldType(dart.legacy(ui.Color)),
    todayTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    todayCellTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    weekendDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    specialDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(daterangepicker_theme.SfDateRangePickerThemeData, ['_equals']);
  dart.defineExtensionAccessors(daterangepicker_theme.SfDateRangePickerThemeData, ['hashCode']);
  var data$8 = dart.privateName(datapager_theme, "SfDataPagerTheme.data");
  var child$7 = dart.privateName(datapager_theme, "SfDataPagerTheme.child");
  datapager_theme.SfDataPagerTheme = class SfDataPagerTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$8];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$7];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sfDataPagerTheme = context.dependOnInheritedWidgetOfExactType(T.SfDataPagerThemeL());
      t0$ = (t0 = sfDataPagerTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).dataPagerThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfDataPagerThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfDataPagerThemeL());
      return this === ancestorTheme ? child : new datapager_theme.SfDataPagerTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[69] || CT.C69});
    }
  };
  (datapager_theme.SfDataPagerTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$8] = data;
    this[child$7] = child;
    datapager_theme.SfDataPagerTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = datapager_theme.SfDataPagerTheme.prototype;
  dart.addTypeTests(datapager_theme.SfDataPagerTheme);
  dart.addTypeCaches(datapager_theme.SfDataPagerTheme);
  dart.setMethodSignature(datapager_theme.SfDataPagerTheme, () => ({
    __proto__: dart.getMethods(datapager_theme.SfDataPagerTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(datapager_theme.SfDataPagerTheme, I[16]);
  dart.setFieldSignature(datapager_theme.SfDataPagerTheme, () => ({
    __proto__: dart.getFields(datapager_theme.SfDataPagerTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(datapager_theme.SfDataPagerThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$5 = dart.privateName(datapager_theme, "SfDataPagerThemeData.brightness");
  var itemColor$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.itemColor");
  var backgroundColor$6 = dart.privateName(datapager_theme, "SfDataPagerThemeData.backgroundColor");
  var itemTextStyle$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.itemTextStyle");
  var disabledItemColor$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.disabledItemColor");
  var disabledItemTextStyle$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.disabledItemTextStyle");
  var selectedItemColor$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.selectedItemColor");
  var selectedItemTextStyle$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.selectedItemTextStyle");
  var itemBorderColor$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.itemBorderColor");
  var itemBorderWidth$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.itemBorderWidth");
  var itemBorderRadius$ = dart.privateName(datapager_theme, "SfDataPagerThemeData.itemBorderRadius");
  const Object_Diagnosticable$36$4 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$4.new = function() {
  }).prototype = Object_Diagnosticable$36$4.prototype;
  dart.applyMixin(Object_Diagnosticable$36$4, diagnostics.Diagnosticable);
  datapager_theme.SfDataPagerThemeData = class SfDataPagerThemeData extends Object_Diagnosticable$36$4 {
    get brightness() {
      return this[brightness$5];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get itemColor() {
      return this[itemColor$];
    }
    set itemColor(value) {
      super.itemColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$6];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get itemTextStyle() {
      return this[itemTextStyle$];
    }
    set itemTextStyle(value) {
      super.itemTextStyle = value;
    }
    get disabledItemColor() {
      return this[disabledItemColor$];
    }
    set disabledItemColor(value) {
      super.disabledItemColor = value;
    }
    get disabledItemTextStyle() {
      return this[disabledItemTextStyle$];
    }
    set disabledItemTextStyle(value) {
      super.disabledItemTextStyle = value;
    }
    get selectedItemColor() {
      return this[selectedItemColor$];
    }
    set selectedItemColor(value) {
      super.selectedItemColor = value;
    }
    get selectedItemTextStyle() {
      return this[selectedItemTextStyle$];
    }
    set selectedItemTextStyle(value) {
      super.selectedItemTextStyle = value;
    }
    get itemBorderColor() {
      return this[itemBorderColor$];
    }
    set itemBorderColor(value) {
      super.itemBorderColor = value;
    }
    get itemBorderWidth() {
      return this[itemBorderWidth$];
    }
    set itemBorderWidth(value) {
      super.itemBorderWidth = value;
    }
    get itemBorderRadius() {
      return this[itemBorderRadius$];
    }
    set itemBorderRadius(value) {
      super.itemBorderRadius = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let itemColor = opts && 'itemColor' in opts ? opts.itemColor : null;
      let itemTextStyle = opts && 'itemTextStyle' in opts ? opts.itemTextStyle : null;
      let selectedItemColor = opts && 'selectedItemColor' in opts ? opts.selectedItemColor : null;
      let selectedItemTextStyle = opts && 'selectedItemTextStyle' in opts ? opts.selectedItemTextStyle : null;
      let disabledItemColor = opts && 'disabledItemColor' in opts ? opts.disabledItemColor : null;
      let disabledItemTextStyle = opts && 'disabledItemTextStyle' in opts ? opts.disabledItemTextStyle : null;
      let itemBorderColor = opts && 'itemBorderColor' in opts ? opts.itemBorderColor : null;
      let itemBorderWidth = opts && 'itemBorderWidth' in opts ? opts.itemBorderWidth : null;
      let itemBorderRadius = opts && 'itemBorderRadius' in opts ? opts.itemBorderRadius : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      backgroundColor == null ? backgroundColor = isLight ? new ui.Color.fromRGBO(255, 255, 255, 1.0) : new ui.Color.fromRGBO(33, 33, 33, 1.0) : null;
      itemColor == null ? itemColor = isLight ? new ui.Color.fromRGBO(255, 255, 255, 1.0) : new ui.Color.fromRGBO(33, 33, 33, 1.0) : null;
      itemTextStyle == null ? itemTextStyle = new text_style.TextStyle.new({color: isLight ? new ui.Color.fromRGBO(0, 0, 0, 0.87) : new ui.Color.fromRGBO(255, 255, 255, 1.0), fontSize: 14.0, fontFamily: "Roboto", fontWeight: ui.FontWeight.w400}) : null;
      itemBorderRadius == null ? itemBorderRadius = new border_radius.BorderRadius.circular(50.0) : null;
      itemBorderColor == null ? itemBorderColor = colors$.Colors.transparent : null;
      selectedItemColor == null ? selectedItemColor = new ui.Color.fromRGBO(33, 150, 243, 1.0) : null;
      selectedItemTextStyle == null ? selectedItemTextStyle = new text_style.TextStyle.new({color: new ui.Color.fromRGBO(255, 255, 255, 1.0), fontSize: 14.0, fontFamily: "Roboto", fontWeight: ui.FontWeight.w400}) : null;
      disabledItemColor == null ? disabledItemColor = colors$.Colors.transparent : null;
      disabledItemTextStyle == null ? disabledItemTextStyle = new text_style.TextStyle.new({color: isLight ? new ui.Color.fromRGBO(0, 0, 0, 0.36) : new ui.Color.fromRGBO(255, 255, 255, 0.36)}) : null;
      return new datapager_theme.SfDataPagerThemeData.raw({brightness: brightness, backgroundColor: backgroundColor, itemColor: itemColor, itemTextStyle: itemTextStyle, selectedItemColor: selectedItemColor, selectedItemTextStyle: selectedItemTextStyle, disabledItemColor: disabledItemColor, disabledItemTextStyle: disabledItemTextStyle, itemBorderColor: itemBorderColor, itemBorderWidth: itemBorderWidth, itemBorderRadius: itemBorderRadius});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let itemColor = opts && 'itemColor' in opts ? opts.itemColor : null;
      let itemTextStyle = opts && 'itemTextStyle' in opts ? opts.itemTextStyle : null;
      let selectedItemColor = opts && 'selectedItemColor' in opts ? opts.selectedItemColor : null;
      let selectedItemTextStyle = opts && 'selectedItemTextStyle' in opts ? opts.selectedItemTextStyle : null;
      let disabledItemColor = opts && 'disabledItemColor' in opts ? opts.disabledItemColor : null;
      let disabledItemTextStyle = opts && 'disabledItemTextStyle' in opts ? opts.disabledItemTextStyle : null;
      let itemBorderColor = opts && 'itemBorderColor' in opts ? opts.itemBorderColor : null;
      let itemBorderWidth = opts && 'itemBorderWidth' in opts ? opts.itemBorderWidth : null;
      let itemBorderRadius = opts && 'itemBorderRadius' in opts ? opts.itemBorderRadius : null;
      return new datapager_theme.SfDataPagerThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), backgroundColor: (t0$ = backgroundColor, t0$ == null ? this.backgroundColor : t0$), itemColor: (t0$0 = itemColor, t0$0 == null ? this.itemColor : t0$0), itemTextStyle: (t0$1 = itemTextStyle, t0$1 == null ? this.itemTextStyle : t0$1), selectedItemColor: (t0$2 = selectedItemColor, t0$2 == null ? this.selectedItemColor : t0$2), selectedItemTextStyle: (t0$3 = selectedItemTextStyle, t0$3 == null ? this.selectedItemTextStyle : t0$3), disabledItemColor: (t0$4 = disabledItemColor, t0$4 == null ? this.disabledItemColor : t0$4), disabledItemTextStyle: (t0$5 = disabledItemTextStyle, t0$5 == null ? this.disabledItemTextStyle : t0$5), itemBorderColor: (t0$6 = itemBorderColor, t0$6 == null ? this.itemBorderColor : t0$6), itemBorderWidth: (t0$7 = itemBorderWidth, t0$7 == null ? this.itemBorderWidth : t0$7), itemBorderRadius: (t0$8 = itemBorderRadius, t0$8 == null ? this.itemBorderRadius : t0$8)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[17], 212, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return datapager_theme.SfDataPagerThemeData.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), itemColor: ui.Color.lerp(a.itemColor, b.itemColor, t), itemTextStyle: text_style.TextStyle.lerp(a.itemTextStyle, b.itemTextStyle, t), selectedItemColor: ui.Color.lerp(a.selectedItemColor, b.selectedItemColor, t), selectedItemTextStyle: text_style.TextStyle.lerp(a.selectedItemTextStyle, b.selectedItemTextStyle, t), disabledItemColor: ui.Color.lerp(a.disabledItemColor, b.disabledItemColor, t), disabledItemTextStyle: text_style.TextStyle.lerp(a.disabledItemTextStyle, b.disabledItemTextStyle, t), itemBorderColor: ui.Color.lerp(a.itemBorderColor, b.itemBorderColor, t), itemBorderWidth: ui.lerpDouble(a.itemBorderWidth, b.itemBorderWidth, t), itemBorderRadius: border_radius.BorderRadiusGeometry.lerp(a.itemBorderRadius, b.itemBorderRadius, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfDataPagerThemeDataL().as(other);
      return typedOther.brightness == this.brightness && dart.equals(typedOther.itemColor, this.itemColor) && dart.equals(typedOther.backgroundColor, this.backgroundColor) && dart.equals(typedOther.itemTextStyle, this.itemTextStyle) && dart.equals(typedOther.selectedItemColor, this.selectedItemColor) && dart.equals(typedOther.selectedItemTextStyle, this.selectedItemTextStyle) && dart.equals(typedOther.disabledItemColor, this.disabledItemColor) && dart.equals(typedOther.disabledItemTextStyle, this.disabledItemTextStyle) && dart.equals(typedOther.itemBorderColor, this.itemBorderColor) && typedOther.itemBorderWidth == this.itemBorderWidth && dart.equals(typedOther.itemBorderRadius, this.itemBorderRadius);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.itemColor, this.backgroundColor, this.itemTextStyle, this.selectedItemColor, this.selectedItemTextStyle, this.disabledItemColor, this.disabledItemTextStyle, this.itemBorderColor, this.itemBorderWidth, this.itemBorderRadius]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = datapager_theme.SfDataPagerThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: defaultData.backgroundColor}));
      properties.add(new colors.ColorProperty.new("itemColor", this.itemColor, {defaultValue: defaultData.itemColor}));
      properties.add(new colors.ColorProperty.new("selectedItemColor", this.selectedItemColor, {defaultValue: defaultData.selectedItemColor}));
      properties.add(new colors.ColorProperty.new("disabledItemColor", this.disabledItemColor, {defaultValue: defaultData.disabledItemColor}));
      properties.add(new colors.ColorProperty.new("itemBorderColor", this.itemBorderColor, {defaultValue: defaultData.itemBorderColor}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("itemTextStyle", this.itemTextStyle, {defaultValue: defaultData.itemTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("selectedItemTextStyle", this.selectedItemTextStyle, {defaultValue: defaultData.selectedItemTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyleL()).new("disabledItemTextStyle", this.disabledItemTextStyle, {defaultValue: defaultData.disabledItemTextStyle}));
      properties.add(new diagnostics.DoubleProperty.new("itemBorderWidth", this.itemBorderWidth, {defaultValue: defaultData.itemBorderWidth}));
      properties.add(new (T.DiagnosticsPropertyOfBorderRadiusGeometryL()).new("itemBorderRadius", this.itemBorderRadius, {defaultValue: defaultData.itemBorderRadius}));
    }
  };
  (datapager_theme.SfDataPagerThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let itemColor = opts && 'itemColor' in opts ? opts.itemColor : null;
    let itemTextStyle = opts && 'itemTextStyle' in opts ? opts.itemTextStyle : null;
    let selectedItemColor = opts && 'selectedItemColor' in opts ? opts.selectedItemColor : null;
    let selectedItemTextStyle = opts && 'selectedItemTextStyle' in opts ? opts.selectedItemTextStyle : null;
    let disabledItemColor = opts && 'disabledItemColor' in opts ? opts.disabledItemColor : null;
    let disabledItemTextStyle = opts && 'disabledItemTextStyle' in opts ? opts.disabledItemTextStyle : null;
    let itemBorderColor = opts && 'itemBorderColor' in opts ? opts.itemBorderColor : null;
    let itemBorderWidth = opts && 'itemBorderWidth' in opts ? opts.itemBorderWidth : null;
    let itemBorderRadius = opts && 'itemBorderRadius' in opts ? opts.itemBorderRadius : null;
    this[brightness$5] = brightness;
    this[backgroundColor$6] = backgroundColor;
    this[itemColor$] = itemColor;
    this[itemTextStyle$] = itemTextStyle;
    this[selectedItemColor$] = selectedItemColor;
    this[selectedItemTextStyle$] = selectedItemTextStyle;
    this[disabledItemColor$] = disabledItemColor;
    this[disabledItemTextStyle$] = disabledItemTextStyle;
    this[itemBorderColor$] = itemBorderColor;
    this[itemBorderWidth$] = itemBorderWidth;
    this[itemBorderRadius$] = itemBorderRadius;
    ;
  }).prototype = datapager_theme.SfDataPagerThemeData.prototype;
  dart.addTypeTests(datapager_theme.SfDataPagerThemeData);
  dart.addTypeCaches(datapager_theme.SfDataPagerThemeData);
  dart.setMethodSignature(datapager_theme.SfDataPagerThemeData, () => ({
    __proto__: dart.getMethods(datapager_theme.SfDataPagerThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(datapager_theme.SfDataPagerThemeData), [], {backgroundColor: dart.legacy(ui.Color), brightness: dart.legacy(ui.Brightness), disabledItemColor: dart.legacy(ui.Color), disabledItemTextStyle: dart.legacy(text_style.TextStyle), itemBorderColor: dart.legacy(ui.Color), itemBorderRadius: dart.legacy(border_radius.BorderRadiusGeometry), itemBorderWidth: dart.legacy(core.double), itemColor: dart.legacy(ui.Color), itemTextStyle: dart.legacy(text_style.TextStyle), selectedItemColor: dart.legacy(ui.Color), selectedItemTextStyle: dart.legacy(text_style.TextStyle)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(datapager_theme.SfDataPagerThemeData, () => ({
    __proto__: dart.getGetters(datapager_theme.SfDataPagerThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(datapager_theme.SfDataPagerThemeData, I[16]);
  dart.setFieldSignature(datapager_theme.SfDataPagerThemeData, () => ({
    __proto__: dart.getFields(datapager_theme.SfDataPagerThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    itemColor: dart.finalFieldType(dart.legacy(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    itemTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    disabledItemColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disabledItemTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    selectedItemColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectedItemTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    itemBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    itemBorderWidth: dart.finalFieldType(dart.legacy(core.double)),
    itemBorderRadius: dart.finalFieldType(dart.legacy(border_radius.BorderRadiusGeometry))
  }));
  dart.defineExtensionMethods(datapager_theme.SfDataPagerThemeData, ['_equals']);
  dart.defineExtensionAccessors(datapager_theme.SfDataPagerThemeData, ['hashCode']);
  var data$9 = dart.privateName(datagrid_theme, "SfDataGridTheme.data");
  var child$8 = dart.privateName(datagrid_theme, "SfDataGridTheme.child");
  datagrid_theme.SfDataGridTheme = class SfDataGridTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$9];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$8];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sfDataGridTheme = context.dependOnInheritedWidgetOfExactType(T.SfDataGridThemeL());
      t0$ = (t0 = sfDataGridTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).dataGridThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfDataGridThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfDataGridThemeL());
      return this === ancestorTheme ? child : new datagrid_theme.SfDataGridTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[73] || CT.C73});
    }
  };
  (datagrid_theme.SfDataGridTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$9] = data;
    this[child$8] = child;
    datagrid_theme.SfDataGridTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = datagrid_theme.SfDataGridTheme.prototype;
  dart.addTypeTests(datagrid_theme.SfDataGridTheme);
  dart.addTypeCaches(datagrid_theme.SfDataGridTheme);
  dart.setMethodSignature(datagrid_theme.SfDataGridTheme, () => ({
    __proto__: dart.getMethods(datagrid_theme.SfDataGridTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(datagrid_theme.SfDataGridTheme, I[18]);
  dart.setFieldSignature(datagrid_theme.SfDataGridTheme, () => ({
    __proto__: dart.getFields(datagrid_theme.SfDataGridTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(datagrid_theme.SfDataGridThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$6 = dart.privateName(datagrid_theme, "SfDataGridThemeData.brightness");
  var headerStyle$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.headerStyle");
  var cellStyle$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.cellStyle");
  var gridLineColor$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.gridLineColor");
  var gridLineStrokeWidth$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.gridLineStrokeWidth");
  var selectionStyle$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.selectionStyle");
  var currentCellStyle$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.currentCellStyle");
  var frozenPaneLineWidth$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.frozenPaneLineWidth");
  var frozenPaneLineColor$ = dart.privateName(datagrid_theme, "SfDataGridThemeData.frozenPaneLineColor");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var DataGridCellStyle_textStyle = dart.privateName(datagrid_theme, "DataGridCellStyle.textStyle");
  var DataGridCellStyle_backgroundColor = dart.privateName(datagrid_theme, "DataGridCellStyle.backgroundColor");
  var DataGridHeaderCellStyle_hoverTextStyle = dart.privateName(datagrid_theme, "DataGridHeaderCellStyle.hoverTextStyle");
  var DataGridHeaderCellStyle_hoverColor = dart.privateName(datagrid_theme, "DataGridHeaderCellStyle.hoverColor");
  var DataGridHeaderCellStyle_sortIconColor = dart.privateName(datagrid_theme, "DataGridHeaderCellStyle.sortIconColor");
  var DataGridCurrentCellStyle_borderWidth = dart.privateName(datagrid_theme, "DataGridCurrentCellStyle.borderWidth");
  var DataGridCurrentCellStyle_borderColor = dart.privateName(datagrid_theme, "DataGridCurrentCellStyle.borderColor");
  const Object_Diagnosticable$36$5 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$5.new = function() {
  }).prototype = Object_Diagnosticable$36$5.prototype;
  dart.applyMixin(Object_Diagnosticable$36$5, diagnostics.Diagnosticable);
  datagrid_theme.SfDataGridThemeData = class SfDataGridThemeData extends Object_Diagnosticable$36$5 {
    get brightness() {
      return this[brightness$6];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get headerStyle() {
      return this[headerStyle$];
    }
    set headerStyle(value) {
      super.headerStyle = value;
    }
    get cellStyle() {
      return this[cellStyle$];
    }
    set cellStyle(value) {
      super.cellStyle = value;
    }
    get gridLineColor() {
      return this[gridLineColor$];
    }
    set gridLineColor(value) {
      super.gridLineColor = value;
    }
    get gridLineStrokeWidth() {
      return this[gridLineStrokeWidth$];
    }
    set gridLineStrokeWidth(value) {
      super.gridLineStrokeWidth = value;
    }
    get selectionStyle() {
      return this[selectionStyle$];
    }
    set selectionStyle(value) {
      super.selectionStyle = value;
    }
    get currentCellStyle() {
      return this[currentCellStyle$];
    }
    set currentCellStyle(value) {
      super.currentCellStyle = value;
    }
    get frozenPaneLineWidth() {
      return this[frozenPaneLineWidth$];
    }
    set frozenPaneLineWidth(value) {
      super.frozenPaneLineWidth = value;
    }
    get frozenPaneLineColor() {
      return this[frozenPaneLineColor$];
    }
    set frozenPaneLineColor(value) {
      super.frozenPaneLineColor = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
      let cellStyle = opts && 'cellStyle' in opts ? opts.cellStyle : null;
      let gridLineColor = opts && 'gridLineColor' in opts ? opts.gridLineColor : null;
      let gridLineStrokeWidth = opts && 'gridLineStrokeWidth' in opts ? opts.gridLineStrokeWidth : null;
      let selectionStyle = opts && 'selectionStyle' in opts ? opts.selectionStyle : null;
      let currentCellStyle = opts && 'currentCellStyle' in opts ? opts.currentCellStyle : null;
      let frozenPaneLineColor = opts && 'frozenPaneLineColor' in opts ? opts.frozenPaneLineColor : null;
      let frozenPaneLineWidth = opts && 'frozenPaneLineWidth' in opts ? opts.frozenPaneLineWidth : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      headerStyle == null ? headerStyle = isLight ? C[77] || CT.C77 : C[82] || CT.C82 : null;
      cellStyle == null ? cellStyle = isLight ? C[86] || CT.C86 : C[89] || CT.C89 : null;
      gridLineColor == null ? gridLineColor = isLight ? C[91] || CT.C91 : C[92] || CT.C92 : null;
      gridLineStrokeWidth == null ? gridLineStrokeWidth = 1.0 : null;
      selectionStyle == null ? selectionStyle = isLight ? new datagrid_theme.DataGridCellStyle.new({textStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontWeight: ui.FontWeight.w400, fontSize: 14.0, color: C[80] || CT.C80}), backgroundColor: C[58] || CT.C58}) : new datagrid_theme.DataGridCellStyle.new({textStyle: new text_style.TextStyle.new({fontFamily: "Roboto", fontWeight: ui.FontWeight.w400, fontSize: 14.0, color: C[20] || CT.C20}), backgroundColor: C[21] || CT.C21}) : null;
      currentCellStyle == null ? currentCellStyle = isLight ? C[93] || CT.C93 : C[95] || CT.C95 : null;
      frozenPaneLineColor == null ? frozenPaneLineColor = isLight ? C[97] || CT.C97 : C[98] || CT.C98 : null;
      frozenPaneLineWidth == null ? frozenPaneLineWidth = 2.0 : null;
      return new datagrid_theme.SfDataGridThemeData.raw({brightness: brightness, headerStyle: headerStyle, cellStyle: cellStyle, gridLineColor: gridLineColor, gridLineStrokeWidth: gridLineStrokeWidth, selectionStyle: selectionStyle, currentCellStyle: currentCellStyle, frozenPaneLineColor: frozenPaneLineColor, frozenPaneLineWidth: frozenPaneLineWidth});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
      let cellStyle = opts && 'cellStyle' in opts ? opts.cellStyle : null;
      let gridLineColor = opts && 'gridLineColor' in opts ? opts.gridLineColor : null;
      let gridLineStrokeWidth = opts && 'gridLineStrokeWidth' in opts ? opts.gridLineStrokeWidth : null;
      let selectionStyle = opts && 'selectionStyle' in opts ? opts.selectionStyle : null;
      let currentCellStyle = opts && 'currentCellStyle' in opts ? opts.currentCellStyle : null;
      let frozenPaneLineWidth = opts && 'frozenPaneLineWidth' in opts ? opts.frozenPaneLineWidth : null;
      let frozenPaneLineColor = opts && 'frozenPaneLineColor' in opts ? opts.frozenPaneLineColor : null;
      return new datagrid_theme.SfDataGridThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), headerStyle: (t0$ = headerStyle, t0$ == null ? this.headerStyle : t0$), cellStyle: (t0$0 = cellStyle, t0$0 == null ? this.cellStyle : t0$0), gridLineColor: (t0$1 = gridLineColor, t0$1 == null ? this.gridLineColor : t0$1), gridLineStrokeWidth: (t0$2 = gridLineStrokeWidth, t0$2 == null ? this.gridLineStrokeWidth : t0$2), selectionStyle: (t0$3 = selectionStyle, t0$3 == null ? this.selectionStyle : t0$3), currentCellStyle: (t0$4 = currentCellStyle, t0$4 == null ? this.currentCellStyle : t0$4), frozenPaneLineColor: (t0$5 = frozenPaneLineColor, t0$5 == null ? this.frozenPaneLineColor : t0$5), frozenPaneLineWidth: (t0$6 = frozenPaneLineWidth, t0$6 == null ? this.frozenPaneLineWidth : t0$6)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[19], 428, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return datagrid_theme.SfDataGridThemeData.new({headerStyle: datagrid_theme.DataGridHeaderCellStyle.lerp(a.headerStyle, b.headerStyle, t), cellStyle: datagrid_theme.DataGridCellStyle.lerp(a.cellStyle, b.cellStyle, t), gridLineColor: ui.Color.lerp(a.gridLineColor, b.gridLineColor, t), gridLineStrokeWidth: ui.lerpDouble(a.gridLineStrokeWidth, b.gridLineStrokeWidth, t), selectionStyle: datagrid_theme.DataGridCellStyle.lerp(a.selectionStyle, b.selectionStyle, t), currentCellStyle: datagrid_theme.DataGridCurrentCellStyle.lerp(a.currentCellStyle, b.currentCellStyle, t), frozenPaneLineColor: ui.Color.lerp(a.frozenPaneLineColor, b.frozenPaneLineColor, t), frozenPaneLineWidth: ui.lerpDouble(a.frozenPaneLineWidth, b.frozenPaneLineWidth, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfDataGridThemeDataL().as(other);
      return typedOther.brightness == this.brightness && dart.equals(typedOther.headerStyle, this.headerStyle) && dart.equals(typedOther.cellStyle, this.cellStyle) && dart.equals(typedOther.gridLineColor, this.gridLineColor) && typedOther.gridLineStrokeWidth == this.gridLineStrokeWidth && dart.equals(typedOther.selectionStyle, this.selectionStyle) && dart.equals(typedOther.currentCellStyle, this.currentCellStyle) && typedOther.frozenPaneLineWidth == this.frozenPaneLineWidth && dart.equals(typedOther.frozenPaneLineColor, this.frozenPaneLineColor);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.headerStyle, this.cellStyle, this.gridLineColor, this.gridLineStrokeWidth, this.selectionStyle, this.currentCellStyle, this.frozenPaneLineColor, this.frozenPaneLineWidth]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = datagrid_theme.SfDataGridThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new (T.DiagnosticsPropertyOfDataGridHeaderCellStyleL()).new("headerStyle", this.headerStyle, {defaultValue: defaultData.headerStyle}));
      properties.add(new (T.DiagnosticsPropertyOfDataGridCellStyleL()).new("cellStyle", this.cellStyle, {defaultValue: defaultData.cellStyle}));
      properties.add(new colors.ColorProperty.new("gridLineColor", this.gridLineColor, {defaultValue: defaultData.gridLineColor}));
      properties.add(new diagnostics.DoubleProperty.new("gridLineStrokeWidth", this.gridLineStrokeWidth, {defaultValue: defaultData.gridLineStrokeWidth}));
      properties.add(new (T.DiagnosticsPropertyOfDataGridCellStyleL()).new("selectionStyle", this.selectionStyle, {defaultValue: defaultData.selectionStyle}));
      properties.add(new (T.DiagnosticsPropertyOfDataGridCurrentCellStyleL()).new("currentCellStyle", this.currentCellStyle, {defaultValue: defaultData.currentCellStyle}));
      properties.add(new colors.ColorProperty.new("frozenPaneLineColor", this.frozenPaneLineColor, {defaultValue: defaultData.frozenPaneLineColor}));
      properties.add(new diagnostics.DoubleProperty.new("frozenPaneLineWidth", this.frozenPaneLineWidth, {defaultValue: defaultData.frozenPaneLineWidth}));
    }
  };
  (datagrid_theme.SfDataGridThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
    let cellStyle = opts && 'cellStyle' in opts ? opts.cellStyle : null;
    let gridLineColor = opts && 'gridLineColor' in opts ? opts.gridLineColor : null;
    let gridLineStrokeWidth = opts && 'gridLineStrokeWidth' in opts ? opts.gridLineStrokeWidth : null;
    let selectionStyle = opts && 'selectionStyle' in opts ? opts.selectionStyle : null;
    let currentCellStyle = opts && 'currentCellStyle' in opts ? opts.currentCellStyle : null;
    let frozenPaneLineColor = opts && 'frozenPaneLineColor' in opts ? opts.frozenPaneLineColor : null;
    let frozenPaneLineWidth = opts && 'frozenPaneLineWidth' in opts ? opts.frozenPaneLineWidth : null;
    this[brightness$6] = brightness;
    this[headerStyle$] = headerStyle;
    this[cellStyle$] = cellStyle;
    this[gridLineColor$] = gridLineColor;
    this[gridLineStrokeWidth$] = gridLineStrokeWidth;
    this[selectionStyle$] = selectionStyle;
    this[currentCellStyle$] = currentCellStyle;
    this[frozenPaneLineColor$] = frozenPaneLineColor;
    this[frozenPaneLineWidth$] = frozenPaneLineWidth;
    ;
  }).prototype = datagrid_theme.SfDataGridThemeData.prototype;
  dart.addTypeTests(datagrid_theme.SfDataGridThemeData);
  dart.addTypeCaches(datagrid_theme.SfDataGridThemeData);
  dart.setMethodSignature(datagrid_theme.SfDataGridThemeData, () => ({
    __proto__: dart.getMethods(datagrid_theme.SfDataGridThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(datagrid_theme.SfDataGridThemeData), [], {brightness: dart.legacy(ui.Brightness), cellStyle: dart.legacy(datagrid_theme.DataGridCellStyle), currentCellStyle: dart.legacy(datagrid_theme.DataGridCurrentCellStyle), frozenPaneLineColor: dart.legacy(ui.Color), frozenPaneLineWidth: dart.legacy(core.double), gridLineColor: dart.legacy(ui.Color), gridLineStrokeWidth: dart.legacy(core.double), headerStyle: dart.legacy(datagrid_theme.DataGridHeaderCellStyle), selectionStyle: dart.legacy(datagrid_theme.DataGridCellStyle)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(datagrid_theme.SfDataGridThemeData, () => ({
    __proto__: dart.getGetters(datagrid_theme.SfDataGridThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(datagrid_theme.SfDataGridThemeData, I[18]);
  dart.setFieldSignature(datagrid_theme.SfDataGridThemeData, () => ({
    __proto__: dart.getFields(datagrid_theme.SfDataGridThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    headerStyle: dart.finalFieldType(dart.legacy(datagrid_theme.DataGridHeaderCellStyle)),
    cellStyle: dart.finalFieldType(dart.legacy(datagrid_theme.DataGridCellStyle)),
    gridLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    gridLineStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    selectionStyle: dart.finalFieldType(dart.legacy(datagrid_theme.DataGridCellStyle)),
    currentCellStyle: dart.finalFieldType(dart.legacy(datagrid_theme.DataGridCurrentCellStyle)),
    frozenPaneLineWidth: dart.finalFieldType(dart.legacy(core.double)),
    frozenPaneLineColor: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  dart.defineExtensionMethods(datagrid_theme.SfDataGridThemeData, ['_equals']);
  dart.defineExtensionAccessors(datagrid_theme.SfDataGridThemeData, ['hashCode']);
  const backgroundColor$7 = DataGridCellStyle_backgroundColor;
  const textStyle$ = DataGridCellStyle_textStyle;
  datagrid_theme.DataGridCellStyle = class DataGridCellStyle extends core.Object {
    get backgroundColor() {
      return this[backgroundColor$7];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.textStyle, this.backgroundColor]);
      return ui.hashList(values);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.DataGridCellStyleL().is(other) && dart.equals(other.backgroundColor, this.backgroundColor) && dart.equals(other.textStyle, this.textStyle);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[19], 550, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return new datagrid_theme.DataGridCellStyle.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), textStyle: text_style.TextStyle.lerp(a.textStyle, b.textStyle, t)});
    }
  };
  (datagrid_theme.DataGridCellStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[backgroundColor$7] = backgroundColor;
    this[textStyle$] = textStyle;
    ;
  }).prototype = datagrid_theme.DataGridCellStyle.prototype;
  dart.addTypeTests(datagrid_theme.DataGridCellStyle);
  dart.addTypeCaches(datagrid_theme.DataGridCellStyle);
  dart.setMethodSignature(datagrid_theme.DataGridCellStyle, () => ({
    __proto__: dart.getMethods(datagrid_theme.DataGridCellStyle.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(datagrid_theme.DataGridCellStyle, () => ({
    __proto__: dart.getGetters(datagrid_theme.DataGridCellStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(datagrid_theme.DataGridCellStyle, I[18]);
  dart.setFieldSignature(datagrid_theme.DataGridCellStyle, () => ({
    __proto__: dart.getFields(datagrid_theme.DataGridCellStyle.__proto__),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    textStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(datagrid_theme.DataGridCellStyle, ['_equals']);
  dart.defineExtensionAccessors(datagrid_theme.DataGridCellStyle, ['hashCode']);
  const sortIconColor$ = DataGridHeaderCellStyle_sortIconColor;
  const hoverColor$ = DataGridHeaderCellStyle_hoverColor;
  const hoverTextStyle$ = DataGridHeaderCellStyle_hoverTextStyle;
  datagrid_theme.DataGridHeaderCellStyle = class DataGridHeaderCellStyle extends datagrid_theme.DataGridCellStyle {
    get sortIconColor() {
      return this[sortIconColor$];
    }
    set sortIconColor(value) {
      super.sortIconColor = value;
    }
    get hoverColor() {
      return this[hoverColor$];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get hoverTextStyle() {
      return this[hoverTextStyle$];
    }
    set hoverTextStyle(value) {
      super.hoverTextStyle = value;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.textStyle, this.backgroundColor, this.sortIconColor, this.hoverColor, this.hoverTextStyle]);
      return ui.hashList(values);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.DataGridHeaderCellStyleL().is(other) && dart.equals(other.backgroundColor, this.backgroundColor) && dart.equals(other.textStyle, this.textStyle) && dart.equals(other.sortIconColor, this.sortIconColor) && dart.equals(other.hoverColor, this.hoverColor) && dart.equals(other.hoverTextStyle, this.hoverTextStyle);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[19], 616, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return new datagrid_theme.DataGridHeaderCellStyle.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), textStyle: text_style.TextStyle.lerp(a.textStyle, b.textStyle, t), sortIconColor: ui.Color.lerp(a.sortIconColor, b.sortIconColor, t), hoverColor: ui.Color.lerp(a.hoverColor, b.hoverColor, t), hoverTextStyle: text_style.TextStyle.lerp(a.hoverTextStyle, b.hoverTextStyle, t)});
    }
  };
  (datagrid_theme.DataGridHeaderCellStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let sortIconColor = opts && 'sortIconColor' in opts ? opts.sortIconColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let hoverTextStyle = opts && 'hoverTextStyle' in opts ? opts.hoverTextStyle : null;
    this[sortIconColor$] = sortIconColor;
    this[hoverColor$] = hoverColor;
    this[hoverTextStyle$] = hoverTextStyle;
    datagrid_theme.DataGridHeaderCellStyle.__proto__.new.call(this, {backgroundColor: backgroundColor, textStyle: textStyle});
    ;
  }).prototype = datagrid_theme.DataGridHeaderCellStyle.prototype;
  dart.addTypeTests(datagrid_theme.DataGridHeaderCellStyle);
  dart.addTypeCaches(datagrid_theme.DataGridHeaderCellStyle);
  dart.setLibraryUri(datagrid_theme.DataGridHeaderCellStyle, I[18]);
  dart.setFieldSignature(datagrid_theme.DataGridHeaderCellStyle, () => ({
    __proto__: dart.getFields(datagrid_theme.DataGridHeaderCellStyle.__proto__),
    sortIconColor: dart.finalFieldType(dart.legacy(ui.Color)),
    hoverColor: dart.finalFieldType(dart.legacy(ui.Color)),
    hoverTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(datagrid_theme.DataGridHeaderCellStyle, ['_equals']);
  dart.defineExtensionAccessors(datagrid_theme.DataGridHeaderCellStyle, ['hashCode']);
  const borderColor$ = DataGridCurrentCellStyle_borderColor;
  const borderWidth$ = DataGridCurrentCellStyle_borderWidth;
  datagrid_theme.DataGridCurrentCellStyle = class DataGridCurrentCellStyle extends core.Object {
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.DataGridCurrentCellStyleL().is(other) && dart.equals(other.borderColor, this.borderColor) && other.borderWidth == this.borderWidth;
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.borderColor, this.borderWidth]);
      return ui.hashList(values);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[19], 666, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return new datagrid_theme.DataGridCurrentCellStyle.new({borderColor: ui.Color.lerp(a.borderColor, b.borderColor, t), borderWidth: ui.lerpDouble(a.borderWidth, b.borderWidth, t)});
    }
  };
  (datagrid_theme.DataGridCurrentCellStyle.new = function(opts) {
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
    this[borderColor$] = borderColor;
    this[borderWidth$] = borderWidth;
    ;
  }).prototype = datagrid_theme.DataGridCurrentCellStyle.prototype;
  dart.addTypeTests(datagrid_theme.DataGridCurrentCellStyle);
  dart.addTypeCaches(datagrid_theme.DataGridCurrentCellStyle);
  dart.setMethodSignature(datagrid_theme.DataGridCurrentCellStyle, () => ({
    __proto__: dart.getMethods(datagrid_theme.DataGridCurrentCellStyle.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(datagrid_theme.DataGridCurrentCellStyle, () => ({
    __proto__: dart.getGetters(datagrid_theme.DataGridCurrentCellStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(datagrid_theme.DataGridCurrentCellStyle, I[18]);
  dart.setFieldSignature(datagrid_theme.DataGridCurrentCellStyle, () => ({
    __proto__: dart.getFields(datagrid_theme.DataGridCurrentCellStyle.__proto__),
    borderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    borderWidth: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(datagrid_theme.DataGridCurrentCellStyle, ['_equals']);
  dart.defineExtensionAccessors(datagrid_theme.DataGridCurrentCellStyle, ['hashCode']);
  var data$10 = dart.privateName(charts_theme, "SfChartTheme.data");
  var child$9 = dart.privateName(charts_theme, "SfChartTheme.child");
  charts_theme.SfChartTheme = class SfChartTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$10];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$9];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sfChartTheme = context.dependOnInheritedWidgetOfExactType(T.SfChartThemeL());
      t0$ = (t0 = sfChartTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).chartThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfChartThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfChartThemeL());
      return this === ancestorTheme ? child : new charts_theme.SfChartTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[99] || CT.C99});
    }
  };
  (charts_theme.SfChartTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$10] = data;
    this[child$9] = child;
    charts_theme.SfChartTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = charts_theme.SfChartTheme.prototype;
  dart.addTypeTests(charts_theme.SfChartTheme);
  dart.addTypeCaches(charts_theme.SfChartTheme);
  dart.setMethodSignature(charts_theme.SfChartTheme, () => ({
    __proto__: dart.getMethods(charts_theme.SfChartTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(charts_theme.SfChartTheme, I[20]);
  dart.setFieldSignature(charts_theme.SfChartTheme, () => ({
    __proto__: dart.getFields(charts_theme.SfChartTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(charts_theme.SfChartThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$7 = dart.privateName(charts_theme, "SfChartThemeData.brightness");
  var backgroundColor$8 = dart.privateName(charts_theme, "SfChartThemeData.backgroundColor");
  var axisLabelColor$0 = dart.privateName(charts_theme, "SfChartThemeData.axisLabelColor");
  var axisTitleColor$ = dart.privateName(charts_theme, "SfChartThemeData.axisTitleColor");
  var axisLineColor$0 = dart.privateName(charts_theme, "SfChartThemeData.axisLineColor");
  var majorGridLineColor$ = dart.privateName(charts_theme, "SfChartThemeData.majorGridLineColor");
  var minorGridLineColor$ = dart.privateName(charts_theme, "SfChartThemeData.minorGridLineColor");
  var majorTickLineColor$ = dart.privateName(charts_theme, "SfChartThemeData.majorTickLineColor");
  var minorTickLineColor$ = dart.privateName(charts_theme, "SfChartThemeData.minorTickLineColor");
  var titleTextColor$ = dart.privateName(charts_theme, "SfChartThemeData.titleTextColor");
  var titleBackgroundColor$0 = dart.privateName(charts_theme, "SfChartThemeData.titleBackgroundColor");
  var legendTextColor$ = dart.privateName(charts_theme, "SfChartThemeData.legendTextColor");
  var legendTitleColor$ = dart.privateName(charts_theme, "SfChartThemeData.legendTitleColor");
  var legendBackgroundColor$ = dart.privateName(charts_theme, "SfChartThemeData.legendBackgroundColor");
  var plotAreaBackgroundColor$ = dart.privateName(charts_theme, "SfChartThemeData.plotAreaBackgroundColor");
  var plotAreaBorderColor$ = dart.privateName(charts_theme, "SfChartThemeData.plotAreaBorderColor");
  var crosshairLineColor$ = dart.privateName(charts_theme, "SfChartThemeData.crosshairLineColor");
  var crosshairBackgroundColor$ = dart.privateName(charts_theme, "SfChartThemeData.crosshairBackgroundColor");
  var crosshairLabelColor$ = dart.privateName(charts_theme, "SfChartThemeData.crosshairLabelColor");
  var tooltipColor$0 = dart.privateName(charts_theme, "SfChartThemeData.tooltipColor");
  var tooltipLabelColor$ = dart.privateName(charts_theme, "SfChartThemeData.tooltipLabelColor");
  var tooltipSeparatorColor$ = dart.privateName(charts_theme, "SfChartThemeData.tooltipSeparatorColor");
  var selectionRectColor$ = dart.privateName(charts_theme, "SfChartThemeData.selectionRectColor");
  var selectionRectBorderColor$ = dart.privateName(charts_theme, "SfChartThemeData.selectionRectBorderColor");
  var selectionTooltipConnectorLineColor$ = dart.privateName(charts_theme, "SfChartThemeData.selectionTooltipConnectorLineColor");
  var waterfallConnectorLineColor$ = dart.privateName(charts_theme, "SfChartThemeData.waterfallConnectorLineColor");
  const Object_Diagnosticable$36$6 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$6.new = function() {
  }).prototype = Object_Diagnosticable$36$6.prototype;
  dart.applyMixin(Object_Diagnosticable$36$6, diagnostics.Diagnosticable);
  charts_theme.SfChartThemeData = class SfChartThemeData extends Object_Diagnosticable$36$6 {
    get brightness() {
      return this[brightness$7];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get backgroundColor() {
      return this[backgroundColor$8];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get axisLabelColor() {
      return this[axisLabelColor$0];
    }
    set axisLabelColor(value) {
      super.axisLabelColor = value;
    }
    get axisTitleColor() {
      return this[axisTitleColor$];
    }
    set axisTitleColor(value) {
      super.axisTitleColor = value;
    }
    get axisLineColor() {
      return this[axisLineColor$0];
    }
    set axisLineColor(value) {
      super.axisLineColor = value;
    }
    get majorGridLineColor() {
      return this[majorGridLineColor$];
    }
    set majorGridLineColor(value) {
      super.majorGridLineColor = value;
    }
    get minorGridLineColor() {
      return this[minorGridLineColor$];
    }
    set minorGridLineColor(value) {
      super.minorGridLineColor = value;
    }
    get majorTickLineColor() {
      return this[majorTickLineColor$];
    }
    set majorTickLineColor(value) {
      super.majorTickLineColor = value;
    }
    get minorTickLineColor() {
      return this[minorTickLineColor$];
    }
    set minorTickLineColor(value) {
      super.minorTickLineColor = value;
    }
    get titleTextColor() {
      return this[titleTextColor$];
    }
    set titleTextColor(value) {
      super.titleTextColor = value;
    }
    get titleBackgroundColor() {
      return this[titleBackgroundColor$0];
    }
    set titleBackgroundColor(value) {
      super.titleBackgroundColor = value;
    }
    get legendTextColor() {
      return this[legendTextColor$];
    }
    set legendTextColor(value) {
      super.legendTextColor = value;
    }
    get legendTitleColor() {
      return this[legendTitleColor$];
    }
    set legendTitleColor(value) {
      super.legendTitleColor = value;
    }
    get legendBackgroundColor() {
      return this[legendBackgroundColor$];
    }
    set legendBackgroundColor(value) {
      super.legendBackgroundColor = value;
    }
    get plotAreaBackgroundColor() {
      return this[plotAreaBackgroundColor$];
    }
    set plotAreaBackgroundColor(value) {
      super.plotAreaBackgroundColor = value;
    }
    get plotAreaBorderColor() {
      return this[plotAreaBorderColor$];
    }
    set plotAreaBorderColor(value) {
      super.plotAreaBorderColor = value;
    }
    get crosshairLineColor() {
      return this[crosshairLineColor$];
    }
    set crosshairLineColor(value) {
      super.crosshairLineColor = value;
    }
    get crosshairBackgroundColor() {
      return this[crosshairBackgroundColor$];
    }
    set crosshairBackgroundColor(value) {
      super.crosshairBackgroundColor = value;
    }
    get crosshairLabelColor() {
      return this[crosshairLabelColor$];
    }
    set crosshairLabelColor(value) {
      super.crosshairLabelColor = value;
    }
    get tooltipColor() {
      return this[tooltipColor$0];
    }
    set tooltipColor(value) {
      super.tooltipColor = value;
    }
    get tooltipLabelColor() {
      return this[tooltipLabelColor$];
    }
    set tooltipLabelColor(value) {
      super.tooltipLabelColor = value;
    }
    get tooltipSeparatorColor() {
      return this[tooltipSeparatorColor$];
    }
    set tooltipSeparatorColor(value) {
      super.tooltipSeparatorColor = value;
    }
    get selectionRectColor() {
      return this[selectionRectColor$];
    }
    set selectionRectColor(value) {
      super.selectionRectColor = value;
    }
    get selectionRectBorderColor() {
      return this[selectionRectBorderColor$];
    }
    set selectionRectBorderColor(value) {
      super.selectionRectBorderColor = value;
    }
    get selectionTooltipConnectorLineColor() {
      return this[selectionTooltipConnectorLineColor$];
    }
    set selectionTooltipConnectorLineColor(value) {
      super.selectionTooltipConnectorLineColor = value;
    }
    get waterfallConnectorLineColor() {
      return this[waterfallConnectorLineColor$];
    }
    set waterfallConnectorLineColor(value) {
      super.waterfallConnectorLineColor = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let axisLabelColor = opts && 'axisLabelColor' in opts ? opts.axisLabelColor : null;
      let axisTitleColor = opts && 'axisTitleColor' in opts ? opts.axisTitleColor : null;
      let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
      let majorGridLineColor = opts && 'majorGridLineColor' in opts ? opts.majorGridLineColor : null;
      let minorGridLineColor = opts && 'minorGridLineColor' in opts ? opts.minorGridLineColor : null;
      let majorTickLineColor = opts && 'majorTickLineColor' in opts ? opts.majorTickLineColor : null;
      let minorTickLineColor = opts && 'minorTickLineColor' in opts ? opts.minorTickLineColor : null;
      let titleTextColor = opts && 'titleTextColor' in opts ? opts.titleTextColor : null;
      let titleBackgroundColor = opts && 'titleBackgroundColor' in opts ? opts.titleBackgroundColor : null;
      let legendTextColor = opts && 'legendTextColor' in opts ? opts.legendTextColor : null;
      let legendTitleColor = opts && 'legendTitleColor' in opts ? opts.legendTitleColor : null;
      let legendBackgroundColor = opts && 'legendBackgroundColor' in opts ? opts.legendBackgroundColor : null;
      let plotAreaBackgroundColor = opts && 'plotAreaBackgroundColor' in opts ? opts.plotAreaBackgroundColor : null;
      let plotAreaBorderColor = opts && 'plotAreaBorderColor' in opts ? opts.plotAreaBorderColor : null;
      let crosshairLineColor = opts && 'crosshairLineColor' in opts ? opts.crosshairLineColor : null;
      let crosshairBackgroundColor = opts && 'crosshairBackgroundColor' in opts ? opts.crosshairBackgroundColor : null;
      let crosshairLabelColor = opts && 'crosshairLabelColor' in opts ? opts.crosshairLabelColor : null;
      let tooltipColor = opts && 'tooltipColor' in opts ? opts.tooltipColor : null;
      let tooltipLabelColor = opts && 'tooltipLabelColor' in opts ? opts.tooltipLabelColor : null;
      let tooltipSeparatorColor = opts && 'tooltipSeparatorColor' in opts ? opts.tooltipSeparatorColor : null;
      let selectionRectColor = opts && 'selectionRectColor' in opts ? opts.selectionRectColor : null;
      let selectionRectBorderColor = opts && 'selectionRectBorderColor' in opts ? opts.selectionRectBorderColor : null;
      let selectionTooltipConnectorLineColor = opts && 'selectionTooltipConnectorLineColor' in opts ? opts.selectionTooltipConnectorLineColor : null;
      let waterfallConnectorLineColor = opts && 'waterfallConnectorLineColor' in opts ? opts.waterfallConnectorLineColor : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      backgroundColor == null ? backgroundColor = colors$.Colors.transparent : null;
      axisLabelColor == null ? axisLabelColor = isLight ? C[100] || CT.C100 : C[101] || CT.C101 : null;
      axisTitleColor == null ? axisTitleColor = isLight ? C[44] || CT.C44 : C[20] || CT.C20 : null;
      axisLineColor == null ? axisLineColor = isLight ? C[102] || CT.C102 : C[103] || CT.C103 : null;
      majorGridLineColor == null ? majorGridLineColor = isLight ? C[104] || CT.C104 : C[105] || CT.C105 : null;
      minorGridLineColor == null ? minorGridLineColor = isLight ? C[106] || CT.C106 : C[105] || CT.C105 : null;
      majorTickLineColor == null ? majorTickLineColor = isLight ? C[102] || CT.C102 : C[107] || CT.C107 : null;
      minorTickLineColor == null ? minorTickLineColor = isLight ? C[108] || CT.C108 : C[109] || CT.C109 : null;
      titleTextColor == null ? titleTextColor = isLight ? C[44] || CT.C44 : C[20] || CT.C20 : null;
      titleBackgroundColor == null ? titleBackgroundColor = colors$.Colors.transparent : null;
      legendTextColor == null ? legendTextColor = isLight ? C[110] || CT.C110 : C[20] || CT.C20 : null;
      legendBackgroundColor == null ? legendBackgroundColor = isLight ? C[20] || CT.C20 : C[111] || CT.C111 : null;
      legendTitleColor == null ? legendTitleColor = isLight ? C[44] || CT.C44 : C[20] || CT.C20 : null;
      plotAreaBackgroundColor == null ? plotAreaBackgroundColor = colors$.Colors.transparent : null;
      plotAreaBorderColor == null ? plotAreaBorderColor = isLight ? C[104] || CT.C104 : C[103] || CT.C103 : null;
      crosshairLineColor == null ? crosshairLineColor = isLight ? C[112] || CT.C112 : C[20] || CT.C20 : null;
      crosshairBackgroundColor == null ? crosshairBackgroundColor = isLight ? C[112] || CT.C112 : C[20] || CT.C20 : null;
      crosshairLabelColor == null ? crosshairLabelColor = isLight ? C[113] || CT.C113 : C[111] || CT.C111 : null;
      tooltipColor == null ? tooltipColor = isLight ? C[114] || CT.C114 : C[20] || CT.C20 : null;
      tooltipLabelColor == null ? tooltipLabelColor = isLight ? C[20] || CT.C20 : C[111] || CT.C111 : null;
      tooltipSeparatorColor == null ? tooltipSeparatorColor = isLight ? C[20] || CT.C20 : C[109] || CT.C109 : null;
      selectionRectColor == null ? selectionRectColor = isLight ? C[115] || CT.C115 : C[116] || CT.C116 : null;
      selectionRectBorderColor == null ? selectionRectBorderColor = isLight ? C[117] || CT.C117 : C[20] || CT.C20 : null;
      selectionTooltipConnectorLineColor == null ? selectionTooltipConnectorLineColor = isLight ? C[112] || CT.C112 : C[109] || CT.C109 : null;
      waterfallConnectorLineColor == null ? waterfallConnectorLineColor = isLight ? C[111] || CT.C111 : C[20] || CT.C20 : null;
      return new charts_theme.SfChartThemeData.raw({brightness: brightness, axisLabelColor: axisLabelColor, axisLineColor: axisLineColor, axisTitleColor: axisTitleColor, backgroundColor: backgroundColor, titleTextColor: titleTextColor, crosshairBackgroundColor: crosshairBackgroundColor, crosshairLabelColor: crosshairLabelColor, crosshairLineColor: crosshairLineColor, legendBackgroundColor: legendBackgroundColor, legendTextColor: legendTextColor, legendTitleColor: legendTitleColor, majorGridLineColor: majorGridLineColor, majorTickLineColor: majorTickLineColor, minorGridLineColor: minorGridLineColor, minorTickLineColor: minorTickLineColor, plotAreaBackgroundColor: plotAreaBackgroundColor, plotAreaBorderColor: plotAreaBorderColor, selectionRectColor: selectionRectColor, selectionRectBorderColor: selectionRectBorderColor, selectionTooltipConnectorLineColor: selectionTooltipConnectorLineColor, titleBackgroundColor: titleBackgroundColor, tooltipColor: tooltipColor, tooltipSeparatorColor: tooltipSeparatorColor, tooltipLabelColor: tooltipLabelColor, waterfallConnectorLineColor: waterfallConnectorLineColor});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21, t0$22, t0$23;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let axisLabelColor = opts && 'axisLabelColor' in opts ? opts.axisLabelColor : null;
      let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
      let axisTitleColor = opts && 'axisTitleColor' in opts ? opts.axisTitleColor : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let titleTextColor = opts && 'titleTextColor' in opts ? opts.titleTextColor : null;
      let crosshairBackgroundColor = opts && 'crosshairBackgroundColor' in opts ? opts.crosshairBackgroundColor : null;
      let crosshairLabelColor = opts && 'crosshairLabelColor' in opts ? opts.crosshairLabelColor : null;
      let crosshairLineColor = opts && 'crosshairLineColor' in opts ? opts.crosshairLineColor : null;
      let legendBackgroundColor = opts && 'legendBackgroundColor' in opts ? opts.legendBackgroundColor : null;
      let legendTextColor = opts && 'legendTextColor' in opts ? opts.legendTextColor : null;
      let legendTitleColor = opts && 'legendTitleColor' in opts ? opts.legendTitleColor : null;
      let majorGridLineColor = opts && 'majorGridLineColor' in opts ? opts.majorGridLineColor : null;
      let majorTickLineColor = opts && 'majorTickLineColor' in opts ? opts.majorTickLineColor : null;
      let minorGridLineColor = opts && 'minorGridLineColor' in opts ? opts.minorGridLineColor : null;
      let minorTickLineColor = opts && 'minorTickLineColor' in opts ? opts.minorTickLineColor : null;
      let plotAreaBackgroundColor = opts && 'plotAreaBackgroundColor' in opts ? opts.plotAreaBackgroundColor : null;
      let plotAreaBorderColor = opts && 'plotAreaBorderColor' in opts ? opts.plotAreaBorderColor : null;
      let selectionRectColor = opts && 'selectionRectColor' in opts ? opts.selectionRectColor : null;
      let selectionRectBorderColor = opts && 'selectionRectBorderColor' in opts ? opts.selectionRectBorderColor : null;
      let selectionTooltipConnectorLineColor = opts && 'selectionTooltipConnectorLineColor' in opts ? opts.selectionTooltipConnectorLineColor : null;
      let titleBackgroundColor = opts && 'titleBackgroundColor' in opts ? opts.titleBackgroundColor : null;
      let tooltipColor = opts && 'tooltipColor' in opts ? opts.tooltipColor : null;
      let tooltipSeparatorColor = opts && 'tooltipSeparatorColor' in opts ? opts.tooltipSeparatorColor : null;
      let tooltipLabelColor = opts && 'tooltipLabelColor' in opts ? opts.tooltipLabelColor : null;
      let waterfallConnectorLineColor = opts && 'waterfallConnectorLineColor' in opts ? opts.waterfallConnectorLineColor : null;
      return new charts_theme.SfChartThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), axisLabelColor: (t0$ = axisLabelColor, t0$ == null ? this.axisLabelColor : t0$), axisLineColor: (t0$0 = axisLineColor, t0$0 == null ? this.axisLineColor : t0$0), axisTitleColor: (t0$1 = axisTitleColor, t0$1 == null ? this.axisTitleColor : t0$1), backgroundColor: (t0$2 = backgroundColor, t0$2 == null ? this.backgroundColor : t0$2), titleTextColor: (t0$3 = titleTextColor, t0$3 == null ? this.titleTextColor : t0$3), crosshairBackgroundColor: (t0$4 = crosshairBackgroundColor, t0$4 == null ? this.crosshairBackgroundColor : t0$4), crosshairLabelColor: (t0$5 = crosshairLabelColor, t0$5 == null ? this.crosshairLabelColor : t0$5), crosshairLineColor: (t0$6 = crosshairLineColor, t0$6 == null ? this.crosshairLineColor : t0$6), legendBackgroundColor: (t0$7 = legendBackgroundColor, t0$7 == null ? this.legendBackgroundColor : t0$7), legendTextColor: (t0$8 = legendTextColor, t0$8 == null ? this.legendTextColor : t0$8), legendTitleColor: (t0$9 = legendTitleColor, t0$9 == null ? this.legendTitleColor : t0$9), majorGridLineColor: (t0$10 = majorGridLineColor, t0$10 == null ? this.majorGridLineColor : t0$10), majorTickLineColor: (t0$11 = majorTickLineColor, t0$11 == null ? this.majorTickLineColor : t0$11), minorGridLineColor: (t0$12 = minorGridLineColor, t0$12 == null ? this.minorGridLineColor : t0$12), minorTickLineColor: (t0$13 = minorTickLineColor, t0$13 == null ? this.minorTickLineColor : t0$13), plotAreaBackgroundColor: (t0$14 = plotAreaBackgroundColor, t0$14 == null ? this.plotAreaBackgroundColor : t0$14), plotAreaBorderColor: (t0$15 = plotAreaBorderColor, t0$15 == null ? this.plotAreaBackgroundColor : t0$15), selectionRectColor: (t0$16 = selectionRectColor, t0$16 == null ? this.selectionRectColor : t0$16), selectionRectBorderColor: (t0$17 = selectionRectBorderColor, t0$17 == null ? this.selectionRectBorderColor : t0$17), selectionTooltipConnectorLineColor: (t0$18 = selectionTooltipConnectorLineColor, t0$18 == null ? this.selectionTooltipConnectorLineColor : t0$18), titleBackgroundColor: (t0$19 = titleBackgroundColor, t0$19 == null ? this.titleBackgroundColor : t0$19), tooltipColor: (t0$20 = tooltipColor, t0$20 == null ? this.tooltipColor : t0$20), tooltipSeparatorColor: (t0$21 = tooltipSeparatorColor, t0$21 == null ? this.tooltipSeparatorColor : t0$21), tooltipLabelColor: (t0$22 = tooltipLabelColor, t0$22 == null ? this.tooltipLabelColor : t0$22), waterfallConnectorLineColor: (t0$23 = waterfallConnectorLineColor, t0$23 == null ? this.waterfallConnectorLineColor : t0$23)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[21], 1045, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return charts_theme.SfChartThemeData.new({axisLabelColor: ui.Color.lerp(a.axisLabelColor, b.axisLabelColor, t), axisLineColor: ui.Color.lerp(a.axisLineColor, b.axisLineColor, t), axisTitleColor: ui.Color.lerp(a.axisTitleColor, b.axisTitleColor, t), backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), titleTextColor: ui.Color.lerp(a.titleTextColor, b.titleTextColor, t), crosshairBackgroundColor: ui.Color.lerp(a.crosshairBackgroundColor, b.crosshairBackgroundColor, t), crosshairLabelColor: ui.Color.lerp(a.crosshairLabelColor, b.crosshairLabelColor, t), crosshairLineColor: ui.Color.lerp(a.crosshairLineColor, b.crosshairLineColor, t), legendBackgroundColor: ui.Color.lerp(a.legendBackgroundColor, b.legendBackgroundColor, t), legendTextColor: ui.Color.lerp(a.legendTextColor, b.legendTextColor, t), legendTitleColor: ui.Color.lerp(a.legendTitleColor, b.legendTitleColor, t), majorGridLineColor: ui.Color.lerp(a.majorGridLineColor, b.majorGridLineColor, t), majorTickLineColor: ui.Color.lerp(a.majorTickLineColor, b.majorTickLineColor, t), minorGridLineColor: ui.Color.lerp(a.minorGridLineColor, b.minorGridLineColor, t), minorTickLineColor: ui.Color.lerp(a.minorTickLineColor, b.minorTickLineColor, t), plotAreaBackgroundColor: ui.Color.lerp(a.plotAreaBackgroundColor, b.plotAreaBackgroundColor, t), plotAreaBorderColor: ui.Color.lerp(a.plotAreaBorderColor, b.plotAreaBorderColor, t), selectionRectColor: ui.Color.lerp(a.selectionRectColor, b.selectionRectColor, t), selectionRectBorderColor: ui.Color.lerp(a.selectionRectBorderColor, b.selectionRectBorderColor, t), selectionTooltipConnectorLineColor: ui.Color.lerp(a.selectionTooltipConnectorLineColor, b.selectionTooltipConnectorLineColor, t), titleBackgroundColor: ui.Color.lerp(a.titleBackgroundColor, b.titleBackgroundColor, t), tooltipColor: ui.Color.lerp(a.tooltipColor, b.tooltipColor, t), tooltipSeparatorColor: ui.Color.lerp(a.tooltipSeparatorColor, b.tooltipSeparatorColor, t), tooltipLabelColor: ui.Color.lerp(a.tooltipLabelColor, b.tooltipLabelColor, t), waterfallConnectorLineColor: ui.Color.lerp(a.waterfallConnectorLineColor, b.waterfallConnectorLineColor, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfChartThemeDataL().as(other);
      return dart.equals(typedOther.axisLabelColor, this.axisLabelColor) && dart.equals(typedOther.axisLineColor, this.axisLineColor) && dart.equals(typedOther.axisTitleColor, this.axisTitleColor) && dart.equals(typedOther.backgroundColor, this.backgroundColor) && dart.equals(typedOther.titleTextColor, this.titleTextColor) && dart.equals(typedOther.crosshairBackgroundColor, this.crosshairBackgroundColor) && dart.equals(typedOther.crosshairLabelColor, this.crosshairLabelColor) && dart.equals(typedOther.crosshairLineColor, this.crosshairLineColor) && dart.equals(typedOther.legendBackgroundColor, this.legendBackgroundColor) && dart.equals(typedOther.legendTextColor, this.legendTextColor) && dart.equals(typedOther.legendTitleColor, this.legendTitleColor) && dart.equals(typedOther.majorGridLineColor, this.majorGridLineColor) && dart.equals(typedOther.majorTickLineColor, this.majorTickLineColor) && dart.equals(typedOther.minorGridLineColor, this.minorGridLineColor) && dart.equals(typedOther.minorTickLineColor, this.minorTickLineColor) && dart.equals(typedOther.plotAreaBackgroundColor, this.plotAreaBackgroundColor) && dart.equals(typedOther.plotAreaBorderColor, this.plotAreaBorderColor) && dart.equals(typedOther.selectionRectColor, this.selectionRectColor) && dart.equals(typedOther.selectionRectBorderColor, this.selectionRectBorderColor) && dart.equals(typedOther.selectionTooltipConnectorLineColor, this.selectionTooltipConnectorLineColor) && dart.equals(typedOther.titleBackgroundColor, this.titleBackgroundColor) && dart.equals(typedOther.tooltipColor, this.tooltipColor) && dart.equals(typedOther.tooltipSeparatorColor, this.tooltipSeparatorColor) && dart.equals(typedOther.tooltipLabelColor, this.tooltipLabelColor) && dart.equals(typedOther.waterfallConnectorLineColor, this.waterfallConnectorLineColor);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.axisLabelColor, this.axisLineColor, this.axisTitleColor, this.backgroundColor, this.titleTextColor, this.crosshairBackgroundColor, this.crosshairLabelColor, this.crosshairLineColor, this.legendBackgroundColor, this.legendTextColor, this.legendTitleColor, this.majorGridLineColor, this.majorTickLineColor, this.minorGridLineColor, this.minorTickLineColor, this.plotAreaBackgroundColor, this.plotAreaBorderColor, this.selectionRectColor, this.selectionRectBorderColor, this.selectionTooltipConnectorLineColor, this.titleBackgroundColor, this.tooltipColor, this.tooltipSeparatorColor, this.tooltipLabelColor, this.waterfallConnectorLineColor]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = charts_theme.SfChartThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new colors.ColorProperty.new("axisLabelColor", this.axisLabelColor, {defaultValue: defaultData.axisLabelColor}));
      properties.add(new colors.ColorProperty.new("axisLineColor", this.axisLineColor, {defaultValue: defaultData.axisLineColor}));
      properties.add(new colors.ColorProperty.new("axisTitleColor", this.axisTitleColor, {defaultValue: defaultData.axisTitleColor}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: defaultData.backgroundColor}));
      properties.add(new colors.ColorProperty.new("titleTextColor", this.titleTextColor, {defaultValue: defaultData.titleTextColor}));
      properties.add(new colors.ColorProperty.new("crosshairBackgroundColor", this.crosshairBackgroundColor, {defaultValue: defaultData.crosshairBackgroundColor}));
      properties.add(new colors.ColorProperty.new("crosshairLabelColor", this.crosshairLabelColor, {defaultValue: defaultData.crosshairLabelColor}));
      properties.add(new colors.ColorProperty.new("crosshairLineColor", this.crosshairLineColor, {defaultValue: defaultData.crosshairLineColor}));
      properties.add(new colors.ColorProperty.new("legendBackgroundColor", this.legendBackgroundColor, {defaultValue: defaultData.legendBackgroundColor}));
      properties.add(new colors.ColorProperty.new("legendTextColor", this.legendTextColor, {defaultValue: defaultData.legendTextColor}));
      properties.add(new colors.ColorProperty.new("legendTitleColor", this.legendTitleColor, {defaultValue: defaultData.legendTitleColor}));
      properties.add(new colors.ColorProperty.new("majorGridLineColor", this.majorGridLineColor, {defaultValue: defaultData.majorGridLineColor}));
      properties.add(new colors.ColorProperty.new("majorTickLineColor", this.majorTickLineColor, {defaultValue: defaultData.majorTickLineColor}));
      properties.add(new colors.ColorProperty.new("minorGridLineColor", this.minorGridLineColor, {defaultValue: defaultData.minorGridLineColor}));
      properties.add(new colors.ColorProperty.new("minorTickLineColor", this.minorTickLineColor, {defaultValue: defaultData.minorTickLineColor}));
      properties.add(new colors.ColorProperty.new("plotAreaBackgroundColor", this.plotAreaBackgroundColor, {defaultValue: defaultData.plotAreaBackgroundColor}));
      properties.add(new colors.ColorProperty.new("plotAreaBorderColor", this.plotAreaBorderColor, {defaultValue: defaultData.plotAreaBorderColor}));
      properties.add(new colors.ColorProperty.new("selectionRectColor", this.selectionRectColor, {defaultValue: defaultData.selectionRectColor}));
      properties.add(new colors.ColorProperty.new("selectionRectBorderColor", this.selectionRectBorderColor, {defaultValue: defaultData.selectionRectBorderColor}));
      properties.add(new colors.ColorProperty.new("selectionTooltipConnectorLineColor", this.selectionTooltipConnectorLineColor, {defaultValue: defaultData.selectionTooltipConnectorLineColor}));
      properties.add(new colors.ColorProperty.new("titleBackgroundColor", this.titleBackgroundColor, {defaultValue: defaultData.titleBackgroundColor}));
      properties.add(new colors.ColorProperty.new("tooltipColor", this.tooltipColor, {defaultValue: defaultData.tooltipColor}));
      properties.add(new colors.ColorProperty.new("tooltipSeparatorColor", this.tooltipSeparatorColor, {defaultValue: defaultData.tooltipSeparatorColor}));
      properties.add(new colors.ColorProperty.new("tooltipLabelColor", this.tooltipLabelColor, {defaultValue: defaultData.tooltipLabelColor}));
      properties.add(new colors.ColorProperty.new("waterfallConnectorLineColor", this.waterfallConnectorLineColor, {defaultValue: defaultData.waterfallConnectorLineColor}));
    }
  };
  (charts_theme.SfChartThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let axisLabelColor = opts && 'axisLabelColor' in opts ? opts.axisLabelColor : null;
    let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
    let axisTitleColor = opts && 'axisTitleColor' in opts ? opts.axisTitleColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let titleTextColor = opts && 'titleTextColor' in opts ? opts.titleTextColor : null;
    let crosshairBackgroundColor = opts && 'crosshairBackgroundColor' in opts ? opts.crosshairBackgroundColor : null;
    let crosshairLabelColor = opts && 'crosshairLabelColor' in opts ? opts.crosshairLabelColor : null;
    let crosshairLineColor = opts && 'crosshairLineColor' in opts ? opts.crosshairLineColor : null;
    let legendBackgroundColor = opts && 'legendBackgroundColor' in opts ? opts.legendBackgroundColor : null;
    let legendTextColor = opts && 'legendTextColor' in opts ? opts.legendTextColor : null;
    let legendTitleColor = opts && 'legendTitleColor' in opts ? opts.legendTitleColor : null;
    let majorGridLineColor = opts && 'majorGridLineColor' in opts ? opts.majorGridLineColor : null;
    let majorTickLineColor = opts && 'majorTickLineColor' in opts ? opts.majorTickLineColor : null;
    let minorGridLineColor = opts && 'minorGridLineColor' in opts ? opts.minorGridLineColor : null;
    let minorTickLineColor = opts && 'minorTickLineColor' in opts ? opts.minorTickLineColor : null;
    let plotAreaBackgroundColor = opts && 'plotAreaBackgroundColor' in opts ? opts.plotAreaBackgroundColor : null;
    let plotAreaBorderColor = opts && 'plotAreaBorderColor' in opts ? opts.plotAreaBorderColor : null;
    let selectionRectColor = opts && 'selectionRectColor' in opts ? opts.selectionRectColor : null;
    let selectionRectBorderColor = opts && 'selectionRectBorderColor' in opts ? opts.selectionRectBorderColor : null;
    let selectionTooltipConnectorLineColor = opts && 'selectionTooltipConnectorLineColor' in opts ? opts.selectionTooltipConnectorLineColor : null;
    let titleBackgroundColor = opts && 'titleBackgroundColor' in opts ? opts.titleBackgroundColor : null;
    let tooltipColor = opts && 'tooltipColor' in opts ? opts.tooltipColor : null;
    let tooltipSeparatorColor = opts && 'tooltipSeparatorColor' in opts ? opts.tooltipSeparatorColor : null;
    let tooltipLabelColor = opts && 'tooltipLabelColor' in opts ? opts.tooltipLabelColor : null;
    let waterfallConnectorLineColor = opts && 'waterfallConnectorLineColor' in opts ? opts.waterfallConnectorLineColor : null;
    this[brightness$7] = brightness;
    this[axisLabelColor$0] = axisLabelColor;
    this[axisLineColor$0] = axisLineColor;
    this[axisTitleColor$] = axisTitleColor;
    this[backgroundColor$8] = backgroundColor;
    this[titleTextColor$] = titleTextColor;
    this[crosshairBackgroundColor$] = crosshairBackgroundColor;
    this[crosshairLabelColor$] = crosshairLabelColor;
    this[crosshairLineColor$] = crosshairLineColor;
    this[legendBackgroundColor$] = legendBackgroundColor;
    this[legendTextColor$] = legendTextColor;
    this[legendTitleColor$] = legendTitleColor;
    this[majorGridLineColor$] = majorGridLineColor;
    this[majorTickLineColor$] = majorTickLineColor;
    this[minorGridLineColor$] = minorGridLineColor;
    this[minorTickLineColor$] = minorTickLineColor;
    this[plotAreaBackgroundColor$] = plotAreaBackgroundColor;
    this[plotAreaBorderColor$] = plotAreaBorderColor;
    this[selectionRectColor$] = selectionRectColor;
    this[selectionRectBorderColor$] = selectionRectBorderColor;
    this[selectionTooltipConnectorLineColor$] = selectionTooltipConnectorLineColor;
    this[titleBackgroundColor$0] = titleBackgroundColor;
    this[tooltipColor$0] = tooltipColor;
    this[tooltipSeparatorColor$] = tooltipSeparatorColor;
    this[tooltipLabelColor$] = tooltipLabelColor;
    this[waterfallConnectorLineColor$] = waterfallConnectorLineColor;
    ;
  }).prototype = charts_theme.SfChartThemeData.prototype;
  dart.addTypeTests(charts_theme.SfChartThemeData);
  dart.addTypeCaches(charts_theme.SfChartThemeData);
  dart.setMethodSignature(charts_theme.SfChartThemeData, () => ({
    __proto__: dart.getMethods(charts_theme.SfChartThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(charts_theme.SfChartThemeData), [], {axisLabelColor: dart.legacy(ui.Color), axisLineColor: dart.legacy(ui.Color), axisTitleColor: dart.legacy(ui.Color), backgroundColor: dart.legacy(ui.Color), brightness: dart.legacy(ui.Brightness), crosshairBackgroundColor: dart.legacy(ui.Color), crosshairLabelColor: dart.legacy(ui.Color), crosshairLineColor: dart.legacy(ui.Color), legendBackgroundColor: dart.legacy(ui.Color), legendTextColor: dart.legacy(ui.Color), legendTitleColor: dart.legacy(ui.Color), majorGridLineColor: dart.legacy(ui.Color), majorTickLineColor: dart.legacy(ui.Color), minorGridLineColor: dart.legacy(ui.Color), minorTickLineColor: dart.legacy(ui.Color), plotAreaBackgroundColor: dart.legacy(ui.Color), plotAreaBorderColor: dart.legacy(ui.Color), selectionRectBorderColor: dart.legacy(ui.Color), selectionRectColor: dart.legacy(ui.Color), selectionTooltipConnectorLineColor: dart.legacy(ui.Color), titleBackgroundColor: dart.legacy(ui.Color), titleTextColor: dart.legacy(ui.Color), tooltipColor: dart.legacy(ui.Color), tooltipLabelColor: dart.legacy(ui.Color), tooltipSeparatorColor: dart.legacy(ui.Color), waterfallConnectorLineColor: dart.legacy(ui.Color)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(charts_theme.SfChartThemeData, () => ({
    __proto__: dart.getGetters(charts_theme.SfChartThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(charts_theme.SfChartThemeData, I[20]);
  dart.setFieldSignature(charts_theme.SfChartThemeData, () => ({
    __proto__: dart.getFields(charts_theme.SfChartThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    axisLabelColor: dart.finalFieldType(dart.legacy(ui.Color)),
    axisTitleColor: dart.finalFieldType(dart.legacy(ui.Color)),
    axisLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    majorGridLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    minorGridLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    majorTickLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    minorTickLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    titleTextColor: dart.finalFieldType(dart.legacy(ui.Color)),
    titleBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    legendTextColor: dart.finalFieldType(dart.legacy(ui.Color)),
    legendTitleColor: dart.finalFieldType(dart.legacy(ui.Color)),
    legendBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    plotAreaBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    plotAreaBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    crosshairLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    crosshairBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    crosshairLabelColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipLabelColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipSeparatorColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionRectColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionRectBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionTooltipConnectorLineColor: dart.finalFieldType(dart.legacy(ui.Color)),
    waterfallConnectorLineColor: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  dart.defineExtensionMethods(charts_theme.SfChartThemeData, ['_equals']);
  dart.defineExtensionAccessors(charts_theme.SfChartThemeData, ['hashCode']);
  var data$11 = dart.privateName(calendar_theme, "SfCalendarTheme.data");
  var child$10 = dart.privateName(calendar_theme, "SfCalendarTheme.child");
  calendar_theme.SfCalendarTheme = class SfCalendarTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$11];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$10];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sfCalendarTheme = context.dependOnInheritedWidgetOfExactType(T.SfCalendarThemeL());
      t0$ = (t0 = sfCalendarTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).calendarThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfCalendarThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfCalendarThemeL());
      return this === ancestorTheme ? child : new calendar_theme.SfCalendarTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[118] || CT.C118});
    }
  };
  (calendar_theme.SfCalendarTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$11] = data;
    this[child$10] = child;
    calendar_theme.SfCalendarTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = calendar_theme.SfCalendarTheme.prototype;
  dart.addTypeTests(calendar_theme.SfCalendarTheme);
  dart.addTypeCaches(calendar_theme.SfCalendarTheme);
  dart.setMethodSignature(calendar_theme.SfCalendarTheme, () => ({
    __proto__: dart.getMethods(calendar_theme.SfCalendarTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(calendar_theme.SfCalendarTheme, I[22]);
  dart.setFieldSignature(calendar_theme.SfCalendarTheme, () => ({
    __proto__: dart.getFields(calendar_theme.SfCalendarTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(calendar_theme.SfCalendarThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$8 = dart.privateName(calendar_theme, "SfCalendarThemeData.brightness");
  var backgroundColor$9 = dart.privateName(calendar_theme, "SfCalendarThemeData.backgroundColor");
  var headerTextStyle$2 = dart.privateName(calendar_theme, "SfCalendarThemeData.headerTextStyle");
  var cellBorderColor$ = dart.privateName(calendar_theme, "SfCalendarThemeData.cellBorderColor");
  var headerBackgroundColor$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.headerBackgroundColor");
  var selectionBorderColor$ = dart.privateName(calendar_theme, "SfCalendarThemeData.selectionBorderColor");
  var agendaBackgroundColor$ = dart.privateName(calendar_theme, "SfCalendarThemeData.agendaBackgroundColor");
  var viewHeaderBackgroundColor$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.viewHeaderBackgroundColor");
  var viewHeaderDayTextStyle$ = dart.privateName(calendar_theme, "SfCalendarThemeData.viewHeaderDayTextStyle");
  var agendaDayTextStyle$ = dart.privateName(calendar_theme, "SfCalendarThemeData.agendaDayTextStyle");
  var agendaDateTextStyle$ = dart.privateName(calendar_theme, "SfCalendarThemeData.agendaDateTextStyle");
  var activeDatesBackgroundColor$ = dart.privateName(calendar_theme, "SfCalendarThemeData.activeDatesBackgroundColor");
  var todayBackgroundColor$ = dart.privateName(calendar_theme, "SfCalendarThemeData.todayBackgroundColor");
  var trailingDatesBackgroundColor$ = dart.privateName(calendar_theme, "SfCalendarThemeData.trailingDatesBackgroundColor");
  var leadingDatesBackgroundColor$ = dart.privateName(calendar_theme, "SfCalendarThemeData.leadingDatesBackgroundColor");
  var leadingDatesTextStyle$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.leadingDatesTextStyle");
  var blackoutDatesTextStyle$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.blackoutDatesTextStyle");
  var displayNameTextStyle$ = dart.privateName(calendar_theme, "SfCalendarThemeData.displayNameTextStyle");
  var todayTextStyle$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.todayTextStyle");
  var todayHighlightColor$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.todayHighlightColor");
  var viewHeaderDateTextStyle$ = dart.privateName(calendar_theme, "SfCalendarThemeData.viewHeaderDateTextStyle");
  var timeTextStyle$ = dart.privateName(calendar_theme, "SfCalendarThemeData.timeTextStyle");
  var activeDatesTextStyle$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.activeDatesTextStyle");
  var trailingDatesTextStyle$0 = dart.privateName(calendar_theme, "SfCalendarThemeData.trailingDatesTextStyle");
  const Object_Diagnosticable$36$7 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$7.new = function() {
  }).prototype = Object_Diagnosticable$36$7.prototype;
  dart.applyMixin(Object_Diagnosticable$36$7, diagnostics.Diagnosticable);
  calendar_theme.SfCalendarThemeData = class SfCalendarThemeData extends Object_Diagnosticable$36$7 {
    get brightness() {
      return this[brightness$8];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get backgroundColor() {
      return this[backgroundColor$9];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get headerTextStyle() {
      return this[headerTextStyle$2];
    }
    set headerTextStyle(value) {
      super.headerTextStyle = value;
    }
    get cellBorderColor() {
      return this[cellBorderColor$];
    }
    set cellBorderColor(value) {
      super.cellBorderColor = value;
    }
    get headerBackgroundColor() {
      return this[headerBackgroundColor$0];
    }
    set headerBackgroundColor(value) {
      super.headerBackgroundColor = value;
    }
    get selectionBorderColor() {
      return this[selectionBorderColor$];
    }
    set selectionBorderColor(value) {
      super.selectionBorderColor = value;
    }
    get agendaBackgroundColor() {
      return this[agendaBackgroundColor$];
    }
    set agendaBackgroundColor(value) {
      super.agendaBackgroundColor = value;
    }
    get viewHeaderBackgroundColor() {
      return this[viewHeaderBackgroundColor$0];
    }
    set viewHeaderBackgroundColor(value) {
      super.viewHeaderBackgroundColor = value;
    }
    get viewHeaderDayTextStyle() {
      return this[viewHeaderDayTextStyle$];
    }
    set viewHeaderDayTextStyle(value) {
      super.viewHeaderDayTextStyle = value;
    }
    get agendaDayTextStyle() {
      return this[agendaDayTextStyle$];
    }
    set agendaDayTextStyle(value) {
      super.agendaDayTextStyle = value;
    }
    get agendaDateTextStyle() {
      return this[agendaDateTextStyle$];
    }
    set agendaDateTextStyle(value) {
      super.agendaDateTextStyle = value;
    }
    get activeDatesBackgroundColor() {
      return this[activeDatesBackgroundColor$];
    }
    set activeDatesBackgroundColor(value) {
      super.activeDatesBackgroundColor = value;
    }
    get todayBackgroundColor() {
      return this[todayBackgroundColor$];
    }
    set todayBackgroundColor(value) {
      super.todayBackgroundColor = value;
    }
    get trailingDatesBackgroundColor() {
      return this[trailingDatesBackgroundColor$];
    }
    set trailingDatesBackgroundColor(value) {
      super.trailingDatesBackgroundColor = value;
    }
    get leadingDatesBackgroundColor() {
      return this[leadingDatesBackgroundColor$];
    }
    set leadingDatesBackgroundColor(value) {
      super.leadingDatesBackgroundColor = value;
    }
    get leadingDatesTextStyle() {
      return this[leadingDatesTextStyle$0];
    }
    set leadingDatesTextStyle(value) {
      super.leadingDatesTextStyle = value;
    }
    get blackoutDatesTextStyle() {
      return this[blackoutDatesTextStyle$0];
    }
    set blackoutDatesTextStyle(value) {
      super.blackoutDatesTextStyle = value;
    }
    get displayNameTextStyle() {
      return this[displayNameTextStyle$];
    }
    set displayNameTextStyle(value) {
      super.displayNameTextStyle = value;
    }
    get todayTextStyle() {
      return this[todayTextStyle$0];
    }
    set todayTextStyle(value) {
      super.todayTextStyle = value;
    }
    get todayHighlightColor() {
      return this[todayHighlightColor$0];
    }
    set todayHighlightColor(value) {
      super.todayHighlightColor = value;
    }
    get viewHeaderDateTextStyle() {
      return this[viewHeaderDateTextStyle$];
    }
    set viewHeaderDateTextStyle(value) {
      super.viewHeaderDateTextStyle = value;
    }
    get timeTextStyle() {
      return this[timeTextStyle$];
    }
    set timeTextStyle(value) {
      super.timeTextStyle = value;
    }
    get activeDatesTextStyle() {
      return this[activeDatesTextStyle$0];
    }
    set activeDatesTextStyle(value) {
      super.activeDatesTextStyle = value;
    }
    get trailingDatesTextStyle() {
      return this[trailingDatesTextStyle$0];
    }
    set trailingDatesTextStyle(value) {
      super.trailingDatesTextStyle = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let headerBackgroundColor = opts && 'headerBackgroundColor' in opts ? opts.headerBackgroundColor : null;
      let agendaBackgroundColor = opts && 'agendaBackgroundColor' in opts ? opts.agendaBackgroundColor : null;
      let cellBorderColor = opts && 'cellBorderColor' in opts ? opts.cellBorderColor : null;
      let activeDatesBackgroundColor = opts && 'activeDatesBackgroundColor' in opts ? opts.activeDatesBackgroundColor : null;
      let todayBackgroundColor = opts && 'todayBackgroundColor' in opts ? opts.todayBackgroundColor : null;
      let trailingDatesBackgroundColor = opts && 'trailingDatesBackgroundColor' in opts ? opts.trailingDatesBackgroundColor : null;
      let leadingDatesBackgroundColor = opts && 'leadingDatesBackgroundColor' in opts ? opts.leadingDatesBackgroundColor : null;
      let selectionBorderColor = opts && 'selectionBorderColor' in opts ? opts.selectionBorderColor : null;
      let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
      let viewHeaderBackgroundColor = opts && 'viewHeaderBackgroundColor' in opts ? opts.viewHeaderBackgroundColor : null;
      let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
      let agendaDayTextStyle = opts && 'agendaDayTextStyle' in opts ? opts.agendaDayTextStyle : null;
      let agendaDateTextStyle = opts && 'agendaDateTextStyle' in opts ? opts.agendaDateTextStyle : null;
      let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
      let viewHeaderDateTextStyle = opts && 'viewHeaderDateTextStyle' in opts ? opts.viewHeaderDateTextStyle : null;
      let viewHeaderDayTextStyle = opts && 'viewHeaderDayTextStyle' in opts ? opts.viewHeaderDayTextStyle : null;
      let timeTextStyle = opts && 'timeTextStyle' in opts ? opts.timeTextStyle : null;
      let activeDatesTextStyle = opts && 'activeDatesTextStyle' in opts ? opts.activeDatesTextStyle : null;
      let trailingDatesTextStyle = opts && 'trailingDatesTextStyle' in opts ? opts.trailingDatesTextStyle : null;
      let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
      let blackoutDatesTextStyle = opts && 'blackoutDatesTextStyle' in opts ? opts.blackoutDatesTextStyle : null;
      let displayNameTextStyle = opts && 'displayNameTextStyle' in opts ? opts.displayNameTextStyle : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      backgroundColor == null ? backgroundColor = isLight ? colors$.Colors.white : colors$.Colors.transparent : null;
      headerBackgroundColor == null ? headerBackgroundColor = colors$.Colors.transparent : null;
      agendaBackgroundColor == null ? agendaBackgroundColor = colors$.Colors.transparent : null;
      agendaDayTextStyle == null ? agendaDayTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black54, fontWeight: ui.FontWeight.w500, fontSize: 10.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white70, fontWeight: ui.FontWeight.w500, fontSize: 10.0, fontFamily: "Roboto"}) : null;
      agendaDateTextStyle == null ? agendaDateTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black, fontSize: 18.0, fontFamily: "Roboto", fontWeight: ui.FontWeight.normal}) : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 18.0, fontFamily: "Roboto", fontWeight: ui.FontWeight.normal}) : null;
      activeDatesBackgroundColor == null ? activeDatesBackgroundColor = colors$.Colors.transparent : null;
      todayBackgroundColor == null ? todayBackgroundColor = colors$.Colors.transparent : null;
      trailingDatesBackgroundColor == null ? trailingDatesBackgroundColor = colors$.Colors.transparent : null;
      leadingDatesBackgroundColor == null ? leadingDatesBackgroundColor = colors$.Colors.transparent : null;
      viewHeaderBackgroundColor == null ? viewHeaderBackgroundColor = colors$.Colors.transparent : null;
      cellBorderColor == null ? cellBorderColor = isLight ? colors$.Colors.black.withOpacity(0.16) : colors$.Colors.white30 : null;
      todayTextStyle == null ? todayTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.black, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      headerTextStyle == null ? headerTextStyle = isLight ? C[122] || CT.C122 : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 18.0, fontFamily: "Roboto"}) : null;
      activeDatesTextStyle == null ? activeDatesTextStyle = isLight ? C[123] || CT.C123 : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      timeTextStyle == null ? timeTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black54, fontWeight: ui.FontWeight.w500, fontSize: 10.0}) : new text_style.TextStyle.new({color: colors$.Colors.white38, fontWeight: ui.FontWeight.w500, fontSize: 10.0}) : null;
      viewHeaderDateTextStyle == null ? viewHeaderDateTextStyle = isLight ? C[124] || CT.C124 : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 15.0, fontWeight: ui.FontWeight.w400, fontFamily: "Roboto"}) : null;
      viewHeaderDayTextStyle == null ? viewHeaderDayTextStyle = isLight ? C[125] || CT.C125 : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 11.0, fontWeight: ui.FontWeight.w400, fontFamily: "Roboto"}) : null;
      trailingDatesTextStyle == null ? trailingDatesTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black54, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white70, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      leadingDatesTextStyle == null ? leadingDatesTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black54, fontSize: 13.0, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white70, fontSize: 13.0, fontFamily: "Roboto"}) : null;
      displayNameTextStyle == null ? displayNameTextStyle = isLight ? new text_style.TextStyle.new({color: colors$.Colors.black, fontSize: 10.0, fontWeight: ui.FontWeight.w500, fontFamily: "Roboto"}) : new text_style.TextStyle.new({color: colors$.Colors.white, fontSize: 10.0, fontWeight: ui.FontWeight.w500, fontFamily: "Roboto"}) : null;
      return new calendar_theme.SfCalendarThemeData.raw({brightness: brightness, backgroundColor: backgroundColor, headerTextStyle: headerTextStyle, headerBackgroundColor: headerBackgroundColor, agendaBackgroundColor: agendaBackgroundColor, viewHeaderDateTextStyle: viewHeaderDateTextStyle, viewHeaderDayTextStyle: viewHeaderDayTextStyle, agendaDayTextStyle: agendaDayTextStyle, agendaDateTextStyle: agendaDateTextStyle, cellBorderColor: cellBorderColor, timeTextStyle: timeTextStyle, activeDatesTextStyle: activeDatesTextStyle, activeDatesBackgroundColor: activeDatesBackgroundColor, todayBackgroundColor: todayBackgroundColor, trailingDatesBackgroundColor: trailingDatesBackgroundColor, leadingDatesBackgroundColor: leadingDatesBackgroundColor, trailingDatesTextStyle: trailingDatesTextStyle, blackoutDatesTextStyle: blackoutDatesTextStyle, displayNameTextStyle: displayNameTextStyle, leadingDatesTextStyle: leadingDatesTextStyle, todayTextStyle: todayTextStyle, todayHighlightColor: todayHighlightColor, viewHeaderBackgroundColor: viewHeaderBackgroundColor, selectionBorderColor: selectionBorderColor});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
      let headerBackgroundColor = opts && 'headerBackgroundColor' in opts ? opts.headerBackgroundColor : null;
      let agendaBackgroundColor = opts && 'agendaBackgroundColor' in opts ? opts.agendaBackgroundColor : null;
      let cellBorderColor = opts && 'cellBorderColor' in opts ? opts.cellBorderColor : null;
      let viewHeaderDateTextStyle = opts && 'viewHeaderDateTextStyle' in opts ? opts.viewHeaderDateTextStyle : null;
      let viewHeaderDayTextStyle = opts && 'viewHeaderDayTextStyle' in opts ? opts.viewHeaderDayTextStyle : null;
      let agendaDayTextStyle = opts && 'agendaDayTextStyle' in opts ? opts.agendaDayTextStyle : null;
      let agendaDateTextStyle = opts && 'agendaDateTextStyle' in opts ? opts.agendaDateTextStyle : null;
      let timeTextStyle = opts && 'timeTextStyle' in opts ? opts.timeTextStyle : null;
      let activeDatesTextStyle = opts && 'activeDatesTextStyle' in opts ? opts.activeDatesTextStyle : null;
      let activeDatesBackgroundColor = opts && 'activeDatesBackgroundColor' in opts ? opts.activeDatesBackgroundColor : null;
      let todayBackgroundColor = opts && 'todayBackgroundColor' in opts ? opts.todayBackgroundColor : null;
      let trailingDatesBackgroundColor = opts && 'trailingDatesBackgroundColor' in opts ? opts.trailingDatesBackgroundColor : null;
      let leadingDatesBackgroundColor = opts && 'leadingDatesBackgroundColor' in opts ? opts.leadingDatesBackgroundColor : null;
      let trailingDatesTextStyle = opts && 'trailingDatesTextStyle' in opts ? opts.trailingDatesTextStyle : null;
      let blackoutDatesTextStyle = opts && 'blackoutDatesTextStyle' in opts ? opts.blackoutDatesTextStyle : null;
      let displayNameTextStyle = opts && 'displayNameTextStyle' in opts ? opts.displayNameTextStyle : null;
      let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
      let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
      let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
      let viewHeaderBackgroundColor = opts && 'viewHeaderBackgroundColor' in opts ? opts.viewHeaderBackgroundColor : null;
      let selectionBorderColor = opts && 'selectionBorderColor' in opts ? opts.selectionBorderColor : null;
      return new calendar_theme.SfCalendarThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), backgroundColor: (t0$ = backgroundColor, t0$ == null ? this.backgroundColor : t0$), headerTextStyle: (t0$0 = headerTextStyle, t0$0 == null ? this.headerTextStyle : t0$0), headerBackgroundColor: (t0$1 = headerBackgroundColor, t0$1 == null ? this.headerBackgroundColor : t0$1), agendaBackgroundColor: (t0$2 = agendaBackgroundColor, t0$2 == null ? this.agendaBackgroundColor : t0$2), cellBorderColor: (t0$3 = cellBorderColor, t0$3 == null ? this.cellBorderColor : t0$3), viewHeaderDateTextStyle: (t0$4 = viewHeaderDateTextStyle, t0$4 == null ? this.viewHeaderDateTextStyle : t0$4), viewHeaderDayTextStyle: (t0$5 = viewHeaderDayTextStyle, t0$5 == null ? this.viewHeaderDayTextStyle : t0$5), agendaDayTextStyle: (t0$6 = agendaDayTextStyle, t0$6 == null ? this.agendaDayTextStyle : t0$6), agendaDateTextStyle: (t0$7 = agendaDateTextStyle, t0$7 == null ? this.agendaDateTextStyle : t0$7), timeTextStyle: (t0$8 = timeTextStyle, t0$8 == null ? this.timeTextStyle : t0$8), activeDatesTextStyle: (t0$9 = activeDatesTextStyle, t0$9 == null ? this.activeDatesTextStyle : t0$9), activeDatesBackgroundColor: (t0$10 = activeDatesBackgroundColor, t0$10 == null ? this.activeDatesBackgroundColor : t0$10), todayBackgroundColor: (t0$11 = todayBackgroundColor, t0$11 == null ? this.todayBackgroundColor : t0$11), trailingDatesBackgroundColor: (t0$12 = trailingDatesBackgroundColor, t0$12 == null ? this.trailingDatesBackgroundColor : t0$12), leadingDatesBackgroundColor: (t0$13 = leadingDatesBackgroundColor, t0$13 == null ? this.leadingDatesBackgroundColor : t0$13), trailingDatesTextStyle: (t0$14 = trailingDatesTextStyle, t0$14 == null ? this.trailingDatesTextStyle : t0$14), blackoutDatesTextStyle: (t0$15 = blackoutDatesTextStyle, t0$15 == null ? this.blackoutDatesTextStyle : t0$15), displayNameTextStyle: (t0$16 = displayNameTextStyle, t0$16 == null ? this.displayNameTextStyle : t0$16), leadingDatesTextStyle: (t0$17 = leadingDatesTextStyle, t0$17 == null ? this.leadingDatesTextStyle : t0$17), todayTextStyle: (t0$18 = todayTextStyle, t0$18 == null ? this.todayTextStyle : t0$18), todayHighlightColor: (t0$19 = todayHighlightColor, t0$19 == null ? this.todayHighlightColor : t0$19), viewHeaderBackgroundColor: T.ColorL().as((t0$20 = viewHeaderBackgroundColor, t0$20 == null ? this.viewHeaderBackgroundColor : t0$20)), selectionBorderColor: (t0$21 = selectionBorderColor, t0$21 == null ? this.selectionBorderColor : t0$21)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[23], 875, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return calendar_theme.SfCalendarThemeData.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), headerBackgroundColor: ui.Color.lerp(a.headerBackgroundColor, b.headerBackgroundColor, t), agendaBackgroundColor: ui.Color.lerp(a.agendaBackgroundColor, b.agendaBackgroundColor, t), cellBorderColor: ui.Color.lerp(a.cellBorderColor, b.cellBorderColor, t), selectionBorderColor: ui.Color.lerp(a.selectionBorderColor, b.selectionBorderColor, t), activeDatesBackgroundColor: ui.Color.lerp(a.activeDatesBackgroundColor, b.activeDatesBackgroundColor, t), todayBackgroundColor: ui.Color.lerp(a.todayBackgroundColor, b.todayBackgroundColor, t), trailingDatesBackgroundColor: ui.Color.lerp(a.trailingDatesBackgroundColor, b.trailingDatesBackgroundColor, t), leadingDatesBackgroundColor: ui.Color.lerp(a.leadingDatesBackgroundColor, b.leadingDatesBackgroundColor, t), todayHighlightColor: ui.Color.lerp(a.todayHighlightColor, b.todayHighlightColor, t), viewHeaderBackgroundColor: ui.Color.lerp(a.viewHeaderBackgroundColor, b.viewHeaderBackgroundColor, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfCalendarThemeDataL().as(other);
      return dart.equals(typedOther.backgroundColor, this.backgroundColor) && dart.equals(typedOther.headerTextStyle, this.headerTextStyle) && dart.equals(typedOther.headerBackgroundColor, this.headerBackgroundColor) && dart.equals(typedOther.agendaBackgroundColor, this.agendaBackgroundColor) && dart.equals(typedOther.cellBorderColor, this.cellBorderColor) && dart.equals(typedOther.viewHeaderDateTextStyle, this.viewHeaderDateTextStyle) && dart.equals(typedOther.viewHeaderDayTextStyle, this.viewHeaderDayTextStyle) && dart.equals(typedOther.agendaDayTextStyle, this.agendaDayTextStyle) && dart.equals(typedOther.agendaDateTextStyle, this.agendaDateTextStyle) && dart.equals(typedOther.timeTextStyle, this.timeTextStyle) && dart.equals(typedOther.activeDatesTextStyle, this.activeDatesTextStyle) && dart.equals(typedOther.activeDatesBackgroundColor, this.activeDatesBackgroundColor) && dart.equals(typedOther.todayBackgroundColor, this.todayBackgroundColor) && dart.equals(typedOther.trailingDatesBackgroundColor, this.trailingDatesBackgroundColor) && dart.equals(typedOther.leadingDatesBackgroundColor, this.leadingDatesBackgroundColor) && dart.equals(typedOther.trailingDatesTextStyle, this.trailingDatesTextStyle) && dart.equals(typedOther.blackoutDatesTextStyle, this.blackoutDatesTextStyle) && dart.equals(typedOther.leadingDatesTextStyle, this.leadingDatesTextStyle) && dart.equals(typedOther.todayTextStyle, this.todayTextStyle) && dart.equals(typedOther.todayHighlightColor, this.todayHighlightColor) && dart.equals(typedOther.viewHeaderBackgroundColor, this.viewHeaderBackgroundColor) && dart.equals(typedOther.selectionBorderColor, this.selectionBorderColor);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.headerTextStyle, this.headerBackgroundColor, this.agendaBackgroundColor, this.cellBorderColor, this.viewHeaderDateTextStyle, this.viewHeaderDayTextStyle, this.agendaDayTextStyle, this.agendaDateTextStyle, this.timeTextStyle, this.activeDatesTextStyle, this.activeDatesBackgroundColor, this.todayBackgroundColor, this.trailingDatesBackgroundColor, this.leadingDatesBackgroundColor, this.trailingDatesTextStyle, this.blackoutDatesTextStyle, this.leadingDatesTextStyle, this.todayTextStyle, this.todayHighlightColor, this.viewHeaderBackgroundColor, this.selectionBorderColor]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = calendar_theme.SfCalendarThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: defaultData.backgroundColor}));
      properties.add(new colors.ColorProperty.new("headerBackgroundColor", this.headerBackgroundColor, {defaultValue: defaultData.headerBackgroundColor}));
      properties.add(new colors.ColorProperty.new("agendaBackgroundColor", this.agendaBackgroundColor, {defaultValue: defaultData.agendaBackgroundColor}));
      properties.add(new colors.ColorProperty.new("cellBorderColor", this.cellBorderColor, {defaultValue: defaultData.cellBorderColor}));
      properties.add(new colors.ColorProperty.new("activeDatesBackgroundColor", this.activeDatesBackgroundColor, {defaultValue: defaultData.activeDatesBackgroundColor}));
      properties.add(new colors.ColorProperty.new("todayBackgroundColor", this.todayBackgroundColor, {defaultValue: defaultData.todayBackgroundColor}));
      properties.add(new colors.ColorProperty.new("trailingDatesBackgroundColor", this.trailingDatesBackgroundColor, {defaultValue: defaultData.trailingDatesBackgroundColor}));
      properties.add(new colors.ColorProperty.new("leadingDatesBackgroundColor", this.leadingDatesBackgroundColor, {defaultValue: defaultData.leadingDatesBackgroundColor}));
      properties.add(new colors.ColorProperty.new("todayHighlightColor", this.todayHighlightColor, {defaultValue: defaultData.todayHighlightColor}));
      properties.add(new colors.ColorProperty.new("viewHeaderBackgroundColor", this.viewHeaderBackgroundColor, {defaultValue: defaultData.viewHeaderBackgroundColor}));
      properties.add(new colors.ColorProperty.new("selectionBorderColor", this.selectionBorderColor, {defaultValue: defaultData.selectionBorderColor}));
    }
  };
  (calendar_theme.SfCalendarThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let headerTextStyle = opts && 'headerTextStyle' in opts ? opts.headerTextStyle : null;
    let headerBackgroundColor = opts && 'headerBackgroundColor' in opts ? opts.headerBackgroundColor : null;
    let agendaBackgroundColor = opts && 'agendaBackgroundColor' in opts ? opts.agendaBackgroundColor : null;
    let cellBorderColor = opts && 'cellBorderColor' in opts ? opts.cellBorderColor : null;
    let viewHeaderDateTextStyle = opts && 'viewHeaderDateTextStyle' in opts ? opts.viewHeaderDateTextStyle : null;
    let viewHeaderDayTextStyle = opts && 'viewHeaderDayTextStyle' in opts ? opts.viewHeaderDayTextStyle : null;
    let viewHeaderBackgroundColor = opts && 'viewHeaderBackgroundColor' in opts ? opts.viewHeaderBackgroundColor : null;
    let agendaDayTextStyle = opts && 'agendaDayTextStyle' in opts ? opts.agendaDayTextStyle : null;
    let agendaDateTextStyle = opts && 'agendaDateTextStyle' in opts ? opts.agendaDateTextStyle : null;
    let timeTextStyle = opts && 'timeTextStyle' in opts ? opts.timeTextStyle : null;
    let activeDatesTextStyle = opts && 'activeDatesTextStyle' in opts ? opts.activeDatesTextStyle : null;
    let activeDatesBackgroundColor = opts && 'activeDatesBackgroundColor' in opts ? opts.activeDatesBackgroundColor : null;
    let todayBackgroundColor = opts && 'todayBackgroundColor' in opts ? opts.todayBackgroundColor : null;
    let trailingDatesBackgroundColor = opts && 'trailingDatesBackgroundColor' in opts ? opts.trailingDatesBackgroundColor : null;
    let leadingDatesBackgroundColor = opts && 'leadingDatesBackgroundColor' in opts ? opts.leadingDatesBackgroundColor : null;
    let trailingDatesTextStyle = opts && 'trailingDatesTextStyle' in opts ? opts.trailingDatesTextStyle : null;
    let blackoutDatesTextStyle = opts && 'blackoutDatesTextStyle' in opts ? opts.blackoutDatesTextStyle : null;
    let displayNameTextStyle = opts && 'displayNameTextStyle' in opts ? opts.displayNameTextStyle : null;
    let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
    let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
    let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
    let selectionBorderColor = opts && 'selectionBorderColor' in opts ? opts.selectionBorderColor : null;
    this[brightness$8] = brightness;
    this[backgroundColor$9] = backgroundColor;
    this[headerTextStyle$2] = headerTextStyle;
    this[headerBackgroundColor$0] = headerBackgroundColor;
    this[agendaBackgroundColor$] = agendaBackgroundColor;
    this[cellBorderColor$] = cellBorderColor;
    this[viewHeaderDateTextStyle$] = viewHeaderDateTextStyle;
    this[viewHeaderDayTextStyle$] = viewHeaderDayTextStyle;
    this[viewHeaderBackgroundColor$0] = viewHeaderBackgroundColor;
    this[agendaDayTextStyle$] = agendaDayTextStyle;
    this[agendaDateTextStyle$] = agendaDateTextStyle;
    this[timeTextStyle$] = timeTextStyle;
    this[activeDatesTextStyle$0] = activeDatesTextStyle;
    this[activeDatesBackgroundColor$] = activeDatesBackgroundColor;
    this[todayBackgroundColor$] = todayBackgroundColor;
    this[trailingDatesBackgroundColor$] = trailingDatesBackgroundColor;
    this[leadingDatesBackgroundColor$] = leadingDatesBackgroundColor;
    this[trailingDatesTextStyle$0] = trailingDatesTextStyle;
    this[blackoutDatesTextStyle$0] = blackoutDatesTextStyle;
    this[displayNameTextStyle$] = displayNameTextStyle;
    this[leadingDatesTextStyle$0] = leadingDatesTextStyle;
    this[todayTextStyle$0] = todayTextStyle;
    this[todayHighlightColor$0] = todayHighlightColor;
    this[selectionBorderColor$] = selectionBorderColor;
    ;
  }).prototype = calendar_theme.SfCalendarThemeData.prototype;
  dart.addTypeTests(calendar_theme.SfCalendarThemeData);
  dart.addTypeCaches(calendar_theme.SfCalendarThemeData);
  dart.setMethodSignature(calendar_theme.SfCalendarThemeData, () => ({
    __proto__: dart.getMethods(calendar_theme.SfCalendarThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(calendar_theme.SfCalendarThemeData), [], {activeDatesBackgroundColor: dart.legacy(ui.Color), activeDatesTextStyle: dart.legacy(text_style.TextStyle), agendaBackgroundColor: dart.legacy(ui.Color), agendaDateTextStyle: dart.legacy(text_style.TextStyle), agendaDayTextStyle: dart.legacy(text_style.TextStyle), backgroundColor: dart.legacy(ui.Color), blackoutDatesTextStyle: dart.legacy(text_style.TextStyle), brightness: dart.legacy(ui.Brightness), cellBorderColor: dart.legacy(ui.Color), displayNameTextStyle: dart.legacy(text_style.TextStyle), headerBackgroundColor: dart.legacy(ui.Color), headerTextStyle: dart.legacy(text_style.TextStyle), leadingDatesBackgroundColor: dart.legacy(ui.Color), leadingDatesTextStyle: dart.legacy(text_style.TextStyle), selectionBorderColor: dart.legacy(ui.Color), timeTextStyle: dart.legacy(text_style.TextStyle), todayBackgroundColor: dart.legacy(ui.Color), todayHighlightColor: dart.legacy(ui.Color), todayTextStyle: dart.legacy(text_style.TextStyle), trailingDatesBackgroundColor: dart.legacy(ui.Color), trailingDatesTextStyle: dart.legacy(text_style.TextStyle), viewHeaderBackgroundColor: dart.legacy(text_style.TextStyle), viewHeaderDateTextStyle: dart.legacy(text_style.TextStyle), viewHeaderDayTextStyle: dart.legacy(text_style.TextStyle)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(calendar_theme.SfCalendarThemeData, () => ({
    __proto__: dart.getGetters(calendar_theme.SfCalendarThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(calendar_theme.SfCalendarThemeData, I[22]);
  dart.setFieldSignature(calendar_theme.SfCalendarThemeData, () => ({
    __proto__: dart.getFields(calendar_theme.SfCalendarThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    headerTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    cellBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    headerBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    selectionBorderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    agendaBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    viewHeaderBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    viewHeaderDayTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    agendaDayTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    agendaDateTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    activeDatesBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    todayBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    trailingDatesBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    leadingDatesBackgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    leadingDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    blackoutDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    displayNameTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    todayTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    todayHighlightColor: dart.finalFieldType(dart.legacy(ui.Color)),
    viewHeaderDateTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    timeTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    activeDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    trailingDatesTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(calendar_theme.SfCalendarThemeData, ['_equals']);
  dart.defineExtensionAccessors(calendar_theme.SfCalendarThemeData, ['hashCode']);
  var data$12 = dart.privateName(barcodes_theme, "SfBarcodeTheme.data");
  var child$11 = dart.privateName(barcodes_theme, "SfBarcodeTheme.child");
  barcodes_theme.SfBarcodeTheme = class SfBarcodeTheme extends inherited_theme.InheritedTheme {
    get data() {
      return this[data$12];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$11];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let sfBarcodeTheme = context.dependOnInheritedWidgetOfExactType(T.SfBarcodeThemeL());
      t0$ = (t0 = sfBarcodeTheme, t0 == null ? null : t0.data);
      return t0$ == null ? theme_widget.SfTheme.of(context).barcodeThemeData : t0$;
    }
    updateShouldNotify(oldWidget) {
      T.SfBarcodeThemeL().as(oldWidget);
      return !dart.equals(this.data, oldWidget.data);
    }
    wrap(context, child) {
      let ancestorTheme = context.findAncestorWidgetOfExactType(T.SfBarcodeThemeL());
      return this === ancestorTheme ? child : new barcodes_theme.SfBarcodeTheme.new({data: this.data, child: child, $creationLocationd_0dea112b090073317d4: C[126] || CT.C126});
    }
  };
  (barcodes_theme.SfBarcodeTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$12] = data;
    this[child$11] = child;
    barcodes_theme.SfBarcodeTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = barcodes_theme.SfBarcodeTheme.prototype;
  dart.addTypeTests(barcodes_theme.SfBarcodeTheme);
  dart.addTypeCaches(barcodes_theme.SfBarcodeTheme);
  dart.setMethodSignature(barcodes_theme.SfBarcodeTheme, () => ({
    __proto__: dart.getMethods(barcodes_theme.SfBarcodeTheme.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    wrap: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
  }));
  dart.setLibraryUri(barcodes_theme.SfBarcodeTheme, I[24]);
  dart.setFieldSignature(barcodes_theme.SfBarcodeTheme, () => ({
    __proto__: dart.getFields(barcodes_theme.SfBarcodeTheme.__proto__),
    data: dart.finalFieldType(dart.legacy(barcodes_theme.SfBarcodeThemeData)),
    child: dart.finalFieldType(dart.legacy(framework.Widget))
  }));
  var brightness$9 = dart.privateName(barcodes_theme, "SfBarcodeThemeData.brightness");
  var backgroundColor$10 = dart.privateName(barcodes_theme, "SfBarcodeThemeData.backgroundColor");
  var barColor$ = dart.privateName(barcodes_theme, "SfBarcodeThemeData.barColor");
  var textColor$ = dart.privateName(barcodes_theme, "SfBarcodeThemeData.textColor");
  const Object_Diagnosticable$36$8 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$8.new = function() {
  }).prototype = Object_Diagnosticable$36$8.prototype;
  dart.applyMixin(Object_Diagnosticable$36$8, diagnostics.Diagnosticable);
  barcodes_theme.SfBarcodeThemeData = class SfBarcodeThemeData extends Object_Diagnosticable$36$8 {
    get brightness() {
      return this[brightness$9];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get backgroundColor() {
      return this[backgroundColor$10];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get barColor() {
      return this[barColor$];
    }
    set barColor(value) {
      super.barColor = value;
    }
    get textColor() {
      return this[textColor$];
    }
    set textColor(value) {
      super.textColor = value;
    }
    static new(opts) {
      let t0;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let barColor = opts && 'barColor' in opts ? opts.barColor : null;
      let textColor = opts && 'textColor' in opts ? opts.textColor : null;
      brightness = (t0 = brightness, t0 == null ? ui.Brightness.light : t0);
      let isLight = brightness == ui.Brightness.light;
      backgroundColor == null ? backgroundColor = colors$.Colors.transparent : null;
      barColor == null ? barColor = isLight ? C[84] || CT.C84 : C[34] || CT.C34 : null;
      textColor == null ? textColor = isLight ? C[84] || CT.C84 : C[34] || CT.C34 : null;
      return new barcodes_theme.SfBarcodeThemeData.raw({brightness: brightness, backgroundColor: backgroundColor, barColor: barColor, textColor: textColor});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let barColor = opts && 'barColor' in opts ? opts.barColor : null;
      let textColor = opts && 'textColor' in opts ? opts.textColor : null;
      return new barcodes_theme.SfBarcodeThemeData.raw({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), backgroundColor: (t0$ = backgroundColor, t0$ == null ? this.backgroundColor : t0$), barColor: (t0$0 = barColor, t0$0 == null ? this.barColor : t0$0), textColor: (t0$1 = textColor, t0$1 == null ? this.textColor : t0$1)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, I[25], 289, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      return barcodes_theme.SfBarcodeThemeData.new({backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), barColor: ui.Color.lerp(a.barColor, b.barColor, t), textColor: ui.Color.lerp(a.textColor, b.textColor, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      let typedOther = T.SfBarcodeThemeDataL().as(other);
      return dart.equals(typedOther.backgroundColor, this.backgroundColor) && dart.equals(typedOther.barColor, this.barColor) && dart.equals(typedOther.textColor, this.textColor);
    }
    get hashCode() {
      let values = T.JSArrayOfObjectL().of([this.backgroundColor, this.barColor, this.textColor]);
      return ui.hashList(values);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = barcodes_theme.SfBarcodeThemeData.new();
      properties.add(new (T.EnumPropertyOfBrightnessL()).new("brightness", this.brightness, {defaultValue: defaultData.brightness}));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor, {defaultValue: defaultData.backgroundColor}));
      properties.add(new colors.ColorProperty.new("barColor", this.barColor, {defaultValue: defaultData.barColor}));
      properties.add(new colors.ColorProperty.new("textColor", this.textColor, {defaultValue: defaultData.textColor}));
    }
  };
  (barcodes_theme.SfBarcodeThemeData.raw = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let barColor = opts && 'barColor' in opts ? opts.barColor : null;
    let textColor = opts && 'textColor' in opts ? opts.textColor : null;
    this[brightness$9] = brightness;
    this[backgroundColor$10] = backgroundColor;
    this[barColor$] = barColor;
    this[textColor$] = textColor;
    ;
  }).prototype = barcodes_theme.SfBarcodeThemeData.prototype;
  dart.addTypeTests(barcodes_theme.SfBarcodeThemeData);
  dart.addTypeCaches(barcodes_theme.SfBarcodeThemeData);
  dart.setMethodSignature(barcodes_theme.SfBarcodeThemeData, () => ({
    __proto__: dart.getMethods(barcodes_theme.SfBarcodeThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(barcodes_theme.SfBarcodeThemeData), [], {backgroundColor: dart.legacy(ui.Color), barColor: dart.legacy(ui.Color), brightness: dart.legacy(ui.Brightness), textColor: dart.legacy(ui.Color)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(barcodes_theme.SfBarcodeThemeData, () => ({
    __proto__: dart.getGetters(barcodes_theme.SfBarcodeThemeData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(barcodes_theme.SfBarcodeThemeData, I[24]);
  dart.setFieldSignature(barcodes_theme.SfBarcodeThemeData, () => ({
    __proto__: dart.getFields(barcodes_theme.SfBarcodeThemeData.__proto__),
    brightness: dart.finalFieldType(dart.legacy(ui.Brightness)),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    barColor: dart.finalFieldType(dart.legacy(ui.Color)),
    textColor: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  dart.defineExtensionMethods(barcodes_theme.SfBarcodeThemeData, ['_equals']);
  dart.defineExtensionAccessors(barcodes_theme.SfBarcodeThemeData, ['hashCode']);
  dart.trackLibraries("packages/syncfusion_flutter_core/src/theme/theme_widget.dart", {
    "package:syncfusion_flutter_core/src/theme/theme_widget.dart": theme_widget,
    "package:syncfusion_flutter_core/src/theme/slider_theme.dart": slider_theme,
    "package:syncfusion_flutter_core/src/theme/range_slider_theme.dart": range_slider_theme,
    "package:syncfusion_flutter_core/src/theme/range_selector_theme.dart": range_selector_theme,
    "package:syncfusion_flutter_core/src/theme/pdfviewer_theme.dart": pdfviewer_theme,
    "package:syncfusion_flutter_core/src/theme/maps_theme.dart": maps_theme,
    "package:syncfusion_flutter_core/src/theme/gauges_theme.dart": gauges_theme,
    "package:syncfusion_flutter_core/src/theme/daterangepicker_theme.dart": daterangepicker_theme,
    "package:syncfusion_flutter_core/src/theme/datapager_theme.dart": datapager_theme,
    "package:syncfusion_flutter_core/src/theme/datagrid_theme.dart": datagrid_theme,
    "package:syncfusion_flutter_core/src/theme/charts_theme.dart": charts_theme,
    "package:syncfusion_flutter_core/src/theme/calendar_theme.dart": calendar_theme,
    "package:syncfusion_flutter_core/src/theme/barcodes_theme.dart": barcodes_theme,
    "package:syncfusion_flutter_core/theme.dart": theme$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["theme_widget.dart","slider_theme.dart","range_slider_theme.dart","range_selector_theme.dart","pdfviewer_theme.dart","maps_theme.dart","gauges_theme.dart","daterangepicker_theme.dart","datapager_theme.dart","datagrid_theme.dart","charts_theme.dart","calendar_theme.dart","barcodes_theme.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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ACd,AAAY,WAAD;AAG6B,MAF1D,AAAW,UAAD,KAAK,mCACX,8BAA8B,gDAChB,AAAY,WAAD;IAC/B;;;QArbiB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAxCA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC3N2B;;;;;;IAIhB;;;;;;cAOiC;;AACnB,6BACrB,AAAQ,OAAD;AACX,kBAAO,gBAAgB,eAAhB,OAAkB;YAAlB,eAAkC,AAAY,wBAAT,OAAO;IACrD;;iCAG2C;AACvC,YAAK,cAAL,WAAQ,AAAU,SAAD;IAAK;SAGD,SAAgB;AACd,0BACrB,AAAQ,OAAD;AACX,YAAO,AAAU,UAAM,aAAa,GAC9B,KAAK,GACL,qDAAyB,kBAAa,KAAK;IACnD;;;QAjC8B;QAAU;QAAW;;IAAX;IAAW;AAC7C,yEAAW,GAAG,SAAS,KAAK;;EAAC;;;;;;;;;;;;;;;;;IA+TvB;;;;;;IA4BA;;;;;;;;UA5QI;UACL;UACA;UACF;UACA;UACE;UACA;UACG;UACA;UACA;UACJ;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACC;UACA;UACA;UACA;UACA;UACA;UACA;UACA;AACkC,MAA3C,cAAwB,KAAX,UAAU,EAAV,aAAyB;AAC3B,oBAAU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","file":"../../../../../../../../packages/syncfusion_flutter_core/src/theme/theme_widget.dart.lib.js"}');
  // Exports:
  return {
    src__theme__theme_widget: theme_widget,
    src__theme__slider_theme: slider_theme,
    src__theme__range_slider_theme: range_slider_theme,
    src__theme__range_selector_theme: range_selector_theme,
    src__theme__pdfviewer_theme: pdfviewer_theme,
    src__theme__maps_theme: maps_theme,
    src__theme__gauges_theme: gauges_theme,
    src__theme__daterangepicker_theme: daterangepicker_theme,
    src__theme__datapager_theme: datapager_theme,
    src__theme__datagrid_theme: datagrid_theme,
    src__theme__charts_theme: charts_theme,
    src__theme__calendar_theme: calendar_theme,
    src__theme__barcodes_theme: barcodes_theme,
    theme: theme$
  };
}));

//# sourceMappingURL=theme_widget.dart.lib.js.map
